# Strapi 后端开发规范 (Strapi Backend Rules)

## 🚨 **铁律警告：新建内容类型后必须立即配置数据库注释和字段描述！**

**⚠️ 这是强制性要求，任何跳过都是严重错误！**
- 🗃️ **数据库表注释** - 每个表必须添加中文描述
- 🗃️ **数据库字段注释** - 每个字段必须添加中文描述  
- 🎨 **Admin字段描述** - 每个字段必须配置中文描述显示
- 🔍 **强制验证检查** - 必须验证配置效果

**违反后果：**
- 数据库维护困难，字段含义不明
- Admin界面显示英文，管理员无法使用
- 团队协作效率低，生产环境故障排查困难

---

## 🚨 Strapi 5.x 关键错误预防

### **必须使用TypeScript + ES6语法**
```typescript
// ✅ 正确格式
import { factories } from '@strapi/strapi'
export default factories.createCoreController('api::article.article');

// ❌ 错误格式 - 会导致404
const { createCoreController } = require('@strapi/strapi').factories;
module.exports = createCoreController('api::article.article');
```

### **关键注意事项**
- ❌ 删除 `content-types/{name}/index.js` 文件 (导致冲突)
- ✅ 必须使用 `.ts` 扩展名
- ✅ 优先使用Admin界面创建内容类型
- ✅ 创建后立即配置Public角色权限

### **快速问题诊断**
```bash
# 1. 测试API状态
curl -s "http://localhost:1337/api/articles" | jq '.error.status'
# 404 = 未识别格式 | 403 = 需要权限 | 200 = 正常

# 2. 检查文件格式
find src/api -name "*.js" -o -name "*.ts" | sort
# 应该只有.ts文件

# 3. 修复重启
rm -rf .tmp && npm run develop
```

### **权限自动化配置 (推荐)**
在 `backend/src/index.ts` 添加bootstrap函数自动配置权限：
```typescript
export default {
  async bootstrap({ strapi }) {
    const publicRole = await strapi.entityService.findMany('plugin::users-permissions.role', {
      filters: { type: 'public' }
    });
    
    const permissions = [
      'api::article.article.find', 'api::article.article.findOne',
      'api::author.author.find', 'api::category.category.find',
      'api::tag.tag.find', 'api::site-config.site-config.find',
      'api::seo-metrics.seo-metrics.find'
    ];
    
    // 自动创建/启用权限逻辑...
  }
};
```

## 🔥 **新建内容类型标准流程（强制执行）**

**🚨 铁律警告：新建任何内容类型后，必须立即执行数据库注释和字段描述配置！**
**⚠️ 这不是可选步骤，是强制性要求！任何跳过都是错误的！**

### **第一步：Admin界面创建内容类型**
```bash
# 1. 进入Strapi管理后台
http://localhost:1337/admin → Content-Type Builder

# 2. 创建内容类型时必须遵循的命名规范
- 类型名称：使用英文小写，单数形式（如：article, author, category）
- 显示名称：使用中文，便于管理员理解（如：文章管理, 作者管理）
- API ID：确保与类型名称一致
```

### **第二步：🚨 强制执行数据库注释和字段描述配置**
```bash
# 🔥 新建内容类型后，绝对不能跳过以下命令：
./scripts.sh content-type configure [content-type-name]

# 🚨 如果脚本不存在，必须手动执行以下强制步骤：

# 步骤1：🗃️ 强制生成数据库表注释（必须执行）
cat > backend/add-db-comments-${content_type}.sql << EOF
-- 强制数据库注释 - ${content_type}
COMMENT ON TABLE ${table_name} IS '${中文表描述}';
COMMENT ON COLUMN ${table_name}.字段名 IS '中文字段描述';
-- ... 为每个字段添加注释
EOF

psql -U aibianx_dev -d aibianx_dev -f backend/add-db-comments-${content_type}.sql

# 步骤2：🎨 强制生成字段描述配置（必须执行）
cat > backend/update-field-descriptions-${content_type}.sql << EOF
-- 强制字段描述配置 - ${content_type}
UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,字段名,edit,description}', 
    '"中文字段描述"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::${content_type}.${content_type}';
-- ... 为每个字段添加描述
EOF

psql -U aibianx_dev -d aibianx_dev -f backend/update-field-descriptions-${content_type}.sql

# 步骤3：🔄 强制清除缓存并重启（必须执行）
./scripts.sh deploy stop
rm -rf backend/.tmp backend/.cache backend/build
./scripts.sh deploy start

# 🚨 执行结果验证（强制检查）：
# ✅ 数据库注释：必须100%添加到所有表和字段
# ✅ Admin界面字段描述：必须100%显示中文描述
# ✅ API权限：必须配置并验证访问正常
# ❌ 任何一项失败都必须重新执行整个流程
```

### **第三步：自动验证（无需手动检查）**
```bash
# 🔥 配置命令会自动执行所有验证，输出验证结果：

# ✅ 数据库注释验证
# ✅ 字段描述验证
# ✅ API权限验证
# ✅ 管理界面验证

# 📊 如果验证失败，命令会自动重试并输出详细错误信息
```

### **🎯 自动化配置脚本实现**

#### **自动化脚本功能说明**
```bash
# 🔥 完全自动化的内容类型配置脚本
# 位置：scripts/content-type/configure-content-type.sh

configure_content_type() {
    local content_type="$1"
    local table_name="${content_type//-/_}s"  # smtp-config -> smtp_configs
    
    echo "🚀 开始配置内容类型: $content_type"
    
    # 1. 停止服务并清除缓存
    ./scripts.sh deploy stop
    cd backend && rm -rf .tmp .cache build dist node_modules/.cache
    cd ../frontend && rm -rf .next node_modules/.cache && cd ..
    
    # 2. 自动生成并执行数据库表注释
    generate_table_comments "$content_type" "$table_name"
    
    # 3. 自动生成并执行字段描述配置
    generate_field_descriptions "$content_type"
    
    # 4. 重启服务
    ./scripts.sh deploy start
    
    # 5. 自动验证配置结果
    verify_configuration "$content_type" "$table_name"
    
    # 6. 清理临时文件
    cleanup_temp_files "$content_type"
    
    echo "✅ 内容类型 $content_type 配置完成！"
}
```

#### **自动表注释生成器**
```bash
generate_table_comments() {
    local content_type="$1"
    local table_name="$2"
    
    echo "📝 生成数据库表注释..."
    
    # 自动生成表注释SQL（基于内容类型schema.json）
    cat > "backend/auto-db-comments-${content_type}.sql" << EOF
-- 自动生成的数据库注释 - ${content_type}
-- 生成时间: $(date)

-- 从schema.json自动提取表注释
COMMENT ON TABLE ${table_name} IS '$(extract_table_description "$content_type")';

-- 从schema.json自动提取字段注释
$(generate_column_comments "$content_type" "$table_name")
EOF

    # 执行SQL
    cd backend && psql -U aibianx_dev -d aibianx_dev -f "auto-db-comments-${content_type}.sql"
}
```

#### **自动字段描述生成器**
```bash
generate_field_descriptions() {
    local content_type="$1"
    
    echo "🎨 生成字段描述配置..."
    
    # 直接更新数据库配置表
    cat > "backend/auto-field-descriptions-${content_type}.sql" << EOF
-- 自动生成的字段描述配置 - ${content_type}
-- 生成时间: $(date)

-- 从schema.json自动提取字段描述并更新Strapi配置
$(generate_field_description_updates "$content_type")
EOF

    # 执行字段描述更新
    cd backend && psql -U aibianx_dev -d aibianx_dev -f "auto-field-descriptions-${content_type}.sql"
}
```

#### **自动验证器**
```bash
verify_configuration() {
    local content_type="$1"
    local table_name="$2"
    
    echo "🔍 验证配置结果..."
    
    # 验证数据库注释
    local comment_count=$(psql -U aibianx_dev -d aibianx_dev -t -c "
        SELECT COUNT(*) FROM information_schema.columns cols 
        INNER JOIN pg_class pgc ON pgc.relname = cols.table_name 
        WHERE table_name = '$table_name' 
        AND col_description(pgc.oid, cols.ordinal_position) IS NOT NULL;
    ")
    
    echo "✅ 数据库注释: $comment_count 个字段已添加注释"
    
    # 验证字段描述配置
    local desc_count=$(psql -U aibianx_dev -d aibianx_dev -t -c "
        SELECT jsonb_object_keys(value::jsonb->'metadatas') 
        FROM strapi_core_store_settings 
        WHERE key = 'plugin_content_manager_configuration_content_types::api::${content_type}.${content_type}';
    " | wc -l)
    
    echo "✅ 字段描述: $desc_count 个字段已配置描述"
    
    # 验证API访问
    if curl -s "http://localhost:1337/api/${content_type}s" | grep -q "data"; then
        echo "✅ API访问: 正常"
    else
        echo "⚠️ API访问: 需要配置权限"
    fi
}
```

## 🌐 **域名配置标准（统一管理）**

### **⚠️ 重要原则**
所有URL和域名配置必须使用环境变量，禁止硬编码！确保开发环境、生产环境配置统一管理。

### **🔧 环境变量标准配置**

#### **前端环境变量 (frontend/.env.local)**
```bash
# 前端服务配置（域名和端口分离）
NEXT_PUBLIC_FRONTEND_DOMAIN=localhost
NEXT_PUBLIC_FRONTEND_PORT=80
NEXT_PUBLIC_FRONTEND_PROTOCOL=http

# 后端服务配置（域名和端口分离）
NEXT_PUBLIC_BACKEND_DOMAIN=localhost
NEXT_PUBLIC_BACKEND_PORT=1337
NEXT_PUBLIC_BACKEND_PROTOCOL=http

# 搜索服务配置（域名和端口分离）
NEXT_PUBLIC_SEARCH_DOMAIN=localhost
NEXT_PUBLIC_SEARCH_PORT=7700
NEXT_PUBLIC_SEARCH_PROTOCOL=http

# NextAuth配置
NEXTAUTH_SECRET=your-secret-key
```

#### **后端环境变量 (backend/.env)**
```bash
# 后端服务配置（域名和端口分离）
BACKEND_DOMAIN=localhost
BACKEND_PORT=1337
BACKEND_PROTOCOL=http
HOST=0.0.0.0
PORT=1337

# 前端服务配置（域名和端口分离）
FRONTEND_DOMAIN=localhost
FRONTEND_PORT=80
FRONTEND_PROTOCOL=http

# 数据库服务配置（域名和端口分离）
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=aibianx_dev
DATABASE_USERNAME=aibianx_dev
DATABASE_PASSWORD=aibianx_password

# 搜索服务配置（域名和端口分离）
MEILISEARCH_DOMAIN=localhost
MEILISEARCH_PORT=7700
MEILISEARCH_PROTOCOL=http
MEILISEARCH_API_KEY=

# 安全配置
APP_KEYS=key1,key2,key3,key4
API_TOKEN_SALT=api-token-salt
ADMIN_JWT_SECRET=admin-jwt-secret
JWT_SECRET=jwt-secret
```

### **🔧 字段描述配置标准流程（关键）**

**⚠️ 重要提醒**：字段描述配置失败是反复出现的问题，必须严格按照以下流程执行！

#### **问题症状识别**
- Admin界面字段没有中文描述显示
- 描述显示为空或显示英文字段名
- 配置后刷新页面描述消失

#### **强制解决方案（100%有效）**

**第一步：彻底清除所有缓存**
```bash
# 停止所有服务
./scripts.sh deploy stop

# 清除后端所有缓存（关键步骤）
cd backend && rm -rf .tmp .cache build dist node_modules/.cache

# 清除前端缓存
cd ../frontend && rm -rf .next node_modules/.cache
```

**第二步：直接更新数据库配置**
```bash
# 创建字段描述更新脚本
cat > backend/update-field-descriptions.sql << 'EOF'
-- 更新Article字段描述（示例）
UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,featured,edit,description}', 
    '"是否置顶推荐：用于首页精选推荐，置顶显示优质内容，提升文章曝光度"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';

UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,isPremium,edit,description}', 
    '"是否会员专享：标记为会员专享的文章需要会员权限才能查看完整内容，用于付费内容管理"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';
EOF

# 执行数据库更新
cd backend && psql -U aibianx_dev -d aibianx_dev -f update-field-descriptions.sql
```

**第三步：重启服务并强制刷新**
```bash
# 重启开发环境（会自动清除缓存）
./scripts.sh deploy start

# 等待服务完全启动后，强制刷新浏览器
# 按 Ctrl+Shift+R (Windows) 或 Cmd+Shift+R (Mac)
```

### **🚨 强制执行检查清单（100%必须完成）**

**每创建一个内容类型，必须逐项检查以下清单，任何未完成项都是严重错误！**

#### **第一级：数据库层面（绝对不能跳过）**
- [ ] **🗃️ 数据库表注释** - 必须为每个表添加中文描述注释
- [ ] **🗃️ 数据库字段注释** - 必须为每个字段添加中文描述注释
- [ ] **🗃️ 关联表注释** - 必须为关联表添加注释说明关联关系

#### **第二级：管理界面层面（绝对不能跳过）**
- [ ] **🎨 字段描述配置** - 必须为每个字段配置中文描述，显示在Admin界面
- [ ] **🎨 字段标签配置** - 必须配置中文字段标签
- [ ] **🎨 字段帮助文本** - 必须为复杂字段添加帮助说明

#### **第三级：权限和访问层面（绝对不能跳过）**
- [ ] **🔐 Public角色权限** - 必须配置find和findOne权限
- [ ] **🔐 Authenticated权限** - 必须配置相应的CRUD权限
- [ ] **🔐 API端点测试** - 必须验证API可正常访问

#### **第四级：前端集成层面（建议完成）**
- [ ] **📝 TypeScript类型定义** - 更新前端类型定义
- [ ] **🔗 API集成测试** - 前端能正常调用API
- [ ] **🎯 页面集成验证** - 相关页面能正常展示数据

### **🚨 绝对禁止的操作（违反后果自负）**

#### **💀 致命错误级别（导致系统崩溃或严重问题）**
- ❌ **跳过数据库注释** - 将导致：
  - 后期维护困难，字段含义不明
  - 团队协作效率低，需要反复询问字段含义
  - 数据库结构文档缺失
- ❌ **跳过字段描述配置** - 将导致：
  - Admin界面显示英文字段名，管理员困惑
  - 内容管理效率低下，需要猜测字段含义
  - 非技术人员无法使用后台管理系统
- ❌ **创建多余的index.js文件** - 将导致：
  - Strapi 5.x路由冲突
  - API返回404错误
  - 系统无法正常启动

#### **⚠️ 严重错误级别（导致功能异常）**
- ❌ **忘记权限配置** - 将导致API无法访问，前端集成失败
- ❌ **不验证API端点** - 可能存在配置错误，影响生产环境
- ❌ **不清除缓存重启** - 配置不生效，浪费调试时间

#### **🔥 强制执行验证命令**
```bash
# 创建内容类型后，必须执行以下验证命令：
echo "🚨 开始强制验证新建内容类型配置..."

# 1. 验证数据库注释
echo "1️⃣ 检查数据库注释..."
psql -U aibianx_dev -d aibianx_dev -c "
SELECT 
    t.table_name,
    obj_description(c.oid) as table_comment,
    COUNT(col_description(c.oid, a.attnum)) as commented_columns,
    COUNT(a.attname) as total_columns
FROM information_schema.tables t
LEFT JOIN pg_class c ON c.relname = t.table_name
LEFT JOIN pg_attribute a ON a.attrelid = c.oid AND a.attnum > 0
WHERE t.table_name = '${table_name}'
GROUP BY t.table_name, c.oid;
"

# 2. 验证字段描述配置
echo "2️⃣ 检查字段描述配置..."
psql -U aibianx_dev -d aibianx_dev -c "
SELECT 
    key,
    jsonb_object_keys(value::jsonb->'metadatas') as configured_fields
FROM strapi_core_store_settings 
WHERE key LIKE '%${content_type}%'
  AND key LIKE '%content_types%';
"

# 3. 验证API权限
echo "3️⃣ 检查API权限配置..."
curl -s "http://localhost:1337/api/${content_type}s" | head -n 5

# 4. 验证Admin界面
echo "4️⃣ 请手动检查Admin界面字段描述是否显示中文！"
echo "   访问: http://localhost:1337/admin/content-manager/collection-types/api::${content_type}.${content_type}"

echo "✅ 验证完成！如有任何项目失败，必须重新执行配置流程！"
```

### **🛠️ 强制自动化解决方案（推荐使用）**

#### **方案一：使用自动化脚本（推荐）**
```bash
# 🚀 创建内容类型完整配置脚本（如果存在）
./scripts.sh content-type configure [content-type-name]

# 🎯 该脚本强制执行以下所有步骤：
# 1. 🗃️ 数据库表和字段注释自动添加（100%覆盖）
# 2. 🎨 Admin界面字段描述自动配置（中文显示）
# 3. 🔐 API权限自动配置（Public + Authenticated）
# 4. 🔄 服务自动重启和缓存清理
# 5. ✅ 完整性验证检查（数据库+API+界面）
# 6. 📋 生成验证报告

# 🎯 如需手动配置，可使用现有工具：
./scripts.sh tools fix-fields-any [content-type-name]  # 字段描述配置
psql -U aibianx_dev -d aibianx_dev -f add-comments.sql  # 数据库注释
```

#### **方案二：手动强制执行（脚本不存在时）**
```bash
# 🚨 当自动化脚本不存在时，必须按以下步骤手动执行：

# 1. 创建数据库注释脚本并执行
content_type="your-content-type"
table_name="${content_type//-/_}s"  # 转换命名格式

cat > backend/add-db-comments-${content_type}.sql << EOF
-- 数据库注释 - ${content_type}
COMMENT ON TABLE ${table_name} IS '${content_type}管理表 - 详细描述此表的用途';
-- 为每个字段添加注释（根据实际schema.json字段）
COMMENT ON COLUMN ${table_name}.id IS '主键ID';
COMMENT ON COLUMN ${table_name}.created_at IS '创建时间';
COMMENT ON COLUMN ${table_name}.updated_at IS '更新时间';
-- ... 添加其他字段注释
EOF

psql -U aibianx_dev -d aibianx_dev -f backend/add-db-comments-${content_type}.sql

# 2. 创建字段描述配置脚本并执行
cat > backend/update-field-descriptions-${content_type}.sql << EOF
-- 字段描述配置 - ${content_type}
-- 为每个字段添加中文描述（根据实际schema.json字段）
UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,字段名,edit,description}', 
    '"字段的中文描述说明"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::${content_type}.${content_type}';
-- ... 为其他字段添加描述
EOF

psql -U aibianx_dev -d aibianx_dev -f backend/update-field-descriptions-${content_type}.sql

# 3. 强制清除缓存并重启
./scripts.sh deploy stop
rm -rf backend/.tmp backend/.cache backend/build backend/dist
./scripts.sh deploy start

# 4. 强制验证配置结果
echo "🔍 验证配置结果..."
# 验证数据库注释
psql -U aibianx_dev -d aibianx_dev -c "
SELECT obj_description('${table_name}'::regclass) as table_comment;
"
# 验证API访问
curl -s "http://localhost:1337/api/${content_type}s" | head -n 3
echo "✅ 请手动检查Admin界面是否显示中文字段描述！"
```

#### **🚨 验收标准（必须100%通过）**

**在完成配置后，必须通过以下验收标准，任何一项失败都必须重新配置：**

1. **数据库注释验收**：
   - ✅ 表注释存在且为中文描述
   - ✅ 所有字段注释存在且为中文描述
   - ✅ 关联表注释完整

2. **Admin界面验收**：
   - ✅ 所有字段显示中文描述
   - ✅ 字段标签为中文
   - ✅ 复杂字段有帮助文本

3. **API访问验收**：
   - ✅ GET /api/${content_type}s 返回200状态
   - ✅ GET /api/${content_type}s/:id 返回200状态
   - ✅ 数据结构符合预期

4. **权限配置验收**：
   - ✅ Public角色有find和findOne权限
   - ✅ Authenticated角色有完整CRUD权限