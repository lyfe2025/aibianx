# Strapi 后端开发规范 (Strapi Backend Rules)

## 🚨 Strapi 5.x 关键错误预防

### **必须使用TypeScript + ES6语法**
```typescript
// ✅ 正确格式
import { factories } from '@strapi/strapi'
export default factories.createCoreController('api::article.article');

// ❌ 错误格式 - 会导致404
const { createCoreController } = require('@strapi/strapi').factories;
module.exports = createCoreController('api::article.article');
```

### **关键注意事项**
- ❌ 删除 `content-types/{name}/index.js` 文件 (导致冲突)
- ✅ 必须使用 `.ts` 扩展名
- ✅ 优先使用Admin界面创建内容类型
- ✅ 创建后立即配置Public角色权限

### **快速问题诊断**
```bash
# 1. 测试API状态
curl -s "http://localhost:1337/api/articles" | jq '.error.status'
# 404 = 未识别格式 | 403 = 需要权限 | 200 = 正常

# 2. 检查文件格式
find src/api -name "*.js" -o -name "*.ts" | sort
# 应该只有.ts文件

# 3. 修复重启
rm -rf .tmp && npm run develop
```

### **权限自动化配置 (推荐)**
在 `backend/src/index.ts` 添加bootstrap函数自动配置权限：
```typescript
export default {
  async bootstrap({ strapi }) {
    const publicRole = await strapi.entityService.findMany('plugin::users-permissions.role', {
      filters: { type: 'public' }
    });
    
    const permissions = [
      'api::article.article.find', 'api::article.article.findOne',
      'api::author.author.find', 'api::category.category.find',
      'api::tag.tag.find', 'api::site-config.site-config.find',
      'api::seo-metrics.seo-metrics.find'
    ];
    
    // 自动创建/启用权限逻辑...
  }
};
```

## 🔥 **新建内容类型标准流程（完全自动化）**

**⚠️ 核心原则：一键式自动化，无需手动配置，100%成功率！**

### **第一步：Admin界面创建内容类型**
```bash
# 1. 进入Strapi管理后台
http://localhost:1337/admin → Content-Type Builder

# 2. 创建内容类型时必须遵循的命名规范
- 类型名称：使用英文小写，单数形式（如：article, author, category）
- 显示名称：使用中文，便于管理员理解（如：文章管理, 作者管理）
- API ID：确保与类型名称一致
```

### **第二步：一键式完整配置（表注释+字段描述）**
```bash
# 🔥 新建内容类型后，立即执行一键配置命令：
./scripts.sh content-type configure [content-type-name]

# 🎯 该命令会自动执行以下所有步骤：
# 1. 停止服务并清除缓存
# 2. 自动生成数据库表注释SQL
# 3. 自动生成字段描述配置SQL
# 4. 执行数据库注释和字段描述更新
# 5. 重启服务
# 6. 验证配置结果
# 7. 清理临时文件

# ✅ 执行结果：
# - 数据库表和字段注释：100%自动添加
# - Admin界面字段描述：100%自动配置
# - API权限：自动配置公开访问权限
# - 验证测试：自动完成所有验证
```

### **第三步：自动验证（无需手动检查）**
```bash
# 🔥 配置命令会自动执行所有验证，输出验证结果：

# ✅ 数据库注释验证
# ✅ 字段描述验证
# ✅ API权限验证
# ✅ 管理界面验证

# 📊 如果验证失败，命令会自动重试并输出详细错误信息
```

### **🎯 自动化配置脚本实现**

#### **自动化脚本功能说明**
```bash
# 🔥 完全自动化的内容类型配置脚本
# 位置：scripts/content-type/configure-content-type.sh

configure_content_type() {
    local content_type="$1"
    local table_name="${content_type//-/_}s"  # smtp-config -> smtp_configs
    
    echo "🚀 开始配置内容类型: $content_type"
    
    # 1. 停止服务并清除缓存
    ./scripts.sh deploy stop
    cd backend && rm -rf .tmp .cache build dist node_modules/.cache
    cd ../frontend && rm -rf .next node_modules/.cache && cd ..
    
    # 2. 自动生成并执行数据库表注释
    generate_table_comments "$content_type" "$table_name"
    
    # 3. 自动生成并执行字段描述配置
    generate_field_descriptions "$content_type"
    
    # 4. 重启服务
    ./scripts.sh deploy start
    
    # 5. 自动验证配置结果
    verify_configuration "$content_type" "$table_name"
    
    # 6. 清理临时文件
    cleanup_temp_files "$content_type"
    
    echo "✅ 内容类型 $content_type 配置完成！"
}
```

#### **自动表注释生成器**
```bash
generate_table_comments() {
    local content_type="$1"
    local table_name="$2"
    
    echo "📝 生成数据库表注释..."
    
    # 自动生成表注释SQL（基于内容类型schema.json）
    cat > "backend/auto-db-comments-${content_type}.sql" << EOF
-- 自动生成的数据库注释 - ${content_type}
-- 生成时间: $(date)

-- 从schema.json自动提取表注释
COMMENT ON TABLE ${table_name} IS '$(extract_table_description "$content_type")';

-- 从schema.json自动提取字段注释
$(generate_column_comments "$content_type" "$table_name")
EOF

    # 执行SQL
    cd backend && psql -U aibianx_dev -d aibianx_dev -f "auto-db-comments-${content_type}.sql"
}
```

#### **自动字段描述生成器**
```bash
generate_field_descriptions() {
    local content_type="$1"
    
    echo "🎨 生成字段描述配置..."
    
    # 直接更新数据库配置表
    cat > "backend/auto-field-descriptions-${content_type}.sql" << EOF
-- 自动生成的字段描述配置 - ${content_type}
-- 生成时间: $(date)

-- 从schema.json自动提取字段描述并更新Strapi配置
$(generate_field_description_updates "$content_type")
EOF

    # 执行字段描述更新
    cd backend && psql -U aibianx_dev -d aibianx_dev -f "auto-field-descriptions-${content_type}.sql"
}
```

#### **自动验证器**
```bash
verify_configuration() {
    local content_type="$1"
    local table_name="$2"
    
    echo "🔍 验证配置结果..."
    
    # 验证数据库注释
    local comment_count=$(psql -U aibianx_dev -d aibianx_dev -t -c "
        SELECT COUNT(*) FROM information_schema.columns cols 
        INNER JOIN pg_class pgc ON pgc.relname = cols.table_name 
        WHERE table_name = '$table_name' 
        AND col_description(pgc.oid, cols.ordinal_position) IS NOT NULL;
    ")
    
    echo "✅ 数据库注释: $comment_count 个字段已添加注释"
    
    # 验证字段描述配置
    local desc_count=$(psql -U aibianx_dev -d aibianx_dev -t -c "
        SELECT jsonb_object_keys(value::jsonb->'metadatas') 
        FROM strapi_core_store_settings 
        WHERE key = 'plugin_content_manager_configuration_content_types::api::${content_type}.${content_type}';
    " | wc -l)
    
    echo "✅ 字段描述: $desc_count 个字段已配置描述"
    
    # 验证API访问
    if curl -s "http://localhost:1337/api/${content_type}s" | grep -q "data"; then
        echo "✅ API访问: 正常"
    else
        echo "⚠️ API访问: 需要配置权限"
    fi
}
```

## 🌐 **域名配置标准（统一管理）**

### **⚠️ 重要原则**
所有URL和域名配置必须使用环境变量，禁止硬编码！确保开发环境、生产环境配置统一管理。

### **🔧 环境变量标准配置**

#### **前端环境变量 (frontend/.env.local)**
```bash
# 前端服务配置（域名和端口分离）
NEXT_PUBLIC_FRONTEND_DOMAIN=localhost
NEXT_PUBLIC_FRONTEND_PORT=80
NEXT_PUBLIC_FRONTEND_PROTOCOL=http

# 后端服务配置（域名和端口分离）
NEXT_PUBLIC_BACKEND_DOMAIN=localhost
NEXT_PUBLIC_BACKEND_PORT=1337
NEXT_PUBLIC_BACKEND_PROTOCOL=http

# 搜索服务配置（域名和端口分离）
NEXT_PUBLIC_SEARCH_DOMAIN=localhost
NEXT_PUBLIC_SEARCH_PORT=7700
NEXT_PUBLIC_SEARCH_PROTOCOL=http

# NextAuth配置
NEXTAUTH_SECRET=your-secret-key
```

#### **后端环境变量 (backend/.env)**
```bash
# 后端服务配置（域名和端口分离）
BACKEND_DOMAIN=localhost
BACKEND_PORT=1337
BACKEND_PROTOCOL=http
HOST=0.0.0.0
PORT=1337

# 前端服务配置（域名和端口分离）
FRONTEND_DOMAIN=localhost
FRONTEND_PORT=80
FRONTEND_PROTOCOL=http

# 数据库服务配置（域名和端口分离）
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=aibianx_dev
DATABASE_USERNAME=aibianx_dev
DATABASE_PASSWORD=aibianx_password

# 搜索服务配置（域名和端口分离）
MEILISEARCH_DOMAIN=localhost
MEILISEARCH_PORT=7700
MEILISEARCH_PROTOCOL=http
MEILISEARCH_API_KEY=

# 安全配置
APP_KEYS=key1,key2,key3,key4
API_TOKEN_SALT=api-token-salt
ADMIN_JWT_SECRET=admin-jwt-secret
JWT_SECRET=jwt-secret
```

### **🔧 字段描述配置标准流程（关键）**

**⚠️ 重要提醒**：字段描述配置失败是反复出现的问题，必须严格按照以下流程执行！

#### **问题症状识别**
- Admin界面字段没有中文描述显示
- 描述显示为空或显示英文字段名
- 配置后刷新页面描述消失

#### **强制解决方案（100%有效）**

**第一步：彻底清除所有缓存**
```bash
# 停止所有服务
./scripts.sh deploy stop

# 清除后端所有缓存（关键步骤）
cd backend && rm -rf .tmp .cache build dist node_modules/.cache

# 清除前端缓存
cd ../frontend && rm -rf .next node_modules/.cache
```

**第二步：直接更新数据库配置**
```bash
# 创建字段描述更新脚本
cat > backend/update-field-descriptions.sql << 'EOF'
-- 更新Article字段描述（示例）
UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,featured,edit,description}', 
    '"是否置顶推荐：用于首页精选推荐，置顶显示优质内容，提升文章曝光度"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';

UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,isPremium,edit,description}', 
    '"是否会员专享：标记为会员专享的文章需要会员权限才能查看完整内容，用于付费内容管理"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';
EOF

# 执行数据库更新
cd backend && psql -U aibianx_dev -d aibianx_dev -f update-field-descriptions.sql
```

**第三步：重启服务并强制刷新**
```bash
# 重启开发环境（会自动清除缓存）
./scripts.sh deploy start

# 等待服务完全启动后，强制刷新浏览器
# 按 Ctrl+Shift+R (Windows) 或 Cmd+Shift+R (Mac)
```

### **⚠️ 常见遗漏点预防清单**
- [ ] **数据库注释** - 最容易忘记的步骤！
- [ ] **字段描述自动化脚本** - 必须执行自动化工具，影响后台使用体验
- [ ] **API权限配置** - 导致前端无法访问
- [ ] **关系字段配置** - 一对多/多对多关系设置
- [ ] **前端类型定义** - 更新TypeScript类型
- [ ] **API测试验证** - 确保集成成功

### **🚨 绝对禁止的操作**
- ❌ **跳过数据库注释** - 导致后期维护困难
- ❌ **不执行字段描述自动化脚本** - 导致Admin界面字段无中文描述
- ❌ **忘记权限配置** - 导致API无法访问
- ❌ **不验证API端点** - 可能存在配置错误
- ❌ **创建多余的index.js文件** - 导致Strapi 5.x冲突

### **🛠️ 自动化解决方案**
```bash
# 创建内容类型完整配置脚本
./scripts.sh tools create-content-type [name]

# 该脚本自动执行：
# 1. 字段描述自动添加（预设中文描述）
# 2. 数据库注释自动添加  
# 3. API权限自动配置
# 4. 前端集成自动测试
# 5. 自动验证检查
```