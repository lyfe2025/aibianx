# Strapi 后端开发规范 (Strapi Backend Rules)

## 🚨 Strapi 5.x 关键错误预防

### **必须使用TypeScript + ES6语法**
```typescript
// ✅ 正确格式
import { factories } from '@strapi/strapi'
export default factories.createCoreController('api::article.article');

// ❌ 错误格式 - 会导致404
const { createCoreController } = require('@strapi/strapi').factories;
module.exports = createCoreController('api::article.article');
```

### **关键注意事项**
- ❌ 删除 `content-types/{name}/index.js` 文件 (导致冲突)
- ✅ 必须使用 `.ts` 扩展名
- ✅ 优先使用Admin界面创建内容类型
- ✅ 创建后立即配置Public角色权限

### **快速问题诊断**
```bash
# 1. 测试API状态
curl -s "http://localhost:1337/api/articles" | jq '.error.status'
# 404 = 未识别格式 | 403 = 需要权限 | 200 = 正常

# 2. 检查文件格式
find src/api -name "*.js" -o -name "*.ts" | sort
# 应该只有.ts文件

# 3. 修复重启
rm -rf .tmp && npm run develop
```

### **权限自动化配置 (推荐)**
在 `backend/src/index.ts` 添加bootstrap函数自动配置权限：
```typescript
export default {
  async bootstrap({ strapi }) {
    const publicRole = await strapi.entityService.findMany('plugin::users-permissions.role', {
      filters: { type: 'public' }
    });
    
    const permissions = [
      'api::article.article.find', 'api::article.article.findOne',
      'api::author.author.find', 'api::category.category.find',
      'api::tag.tag.find', 'api::site-config.site-config.find',
      'api::seo-metrics.seo-metrics.find'
    ];
    
    // 自动创建/启用权限逻辑...
  }
};
```

## 🔥 **新建内容类型标准流程（强制执行）**

**⚠️ 关键原则：每个步骤必须完成验证后再进行下一步，禁止跳过任何环节！**

### **第一步：Admin界面创建内容类型**
```bash
# 1. 进入Strapi管理后台
http://localhost:1337/admin → Content-Type Builder

# 2. 创建内容类型时必须遵循的命名规范
- 类型名称：使用英文小写，单数形式（如：article, author, category）
- 显示名称：使用中文，便于管理员理解（如：文章管理, 作者管理）
- API ID：确保与类型名称一致
```

**🔴 强制检查点 1：**
```bash
# 验证内容类型是否创建成功
curl -s "http://localhost:1337/api/[content-type]" | jq '.error.status'
# 404 = 未识别 | 403 = 需要权限 | 200 = 创建成功
```

### **第二步：自动添加字段描述（100%必须）**
```bash
# 🔥 关键：创建完成后立即执行自动化脚本，无需手动配置！
./scripts.sh tools fix-fields-any [content-type]

# 脚本会自动添加所有字段的中文描述，包括：
# - 基础字段描述（用途、数据类型、业务规则）
# - 关系字段描述（一对多/多对多关系说明）
# - 系统字段描述（created_at, updated_at, published_at等）

# 自动验证字段描述是否生效
echo "等待5秒让缓存刷新..."
sleep 5
# 进入Admin → Content Manager → 自动检查中文描述是否已显示
```

**🔴 强制检查点 2：**
- [ ] 自动化脚本执行成功（无错误输出）
- [ ] 所有字段自动获得中文描述（脚本预设）
- [ ] Admin界面显示中文描述（自动生效）

### **第三步：添加数据库字段注释（用户强调的重点！）**
```sql
-- 🔥 这是经常被遗漏的重要步骤！
-- 创建数据库注释脚本
cat > backend/add-db-comments-[content-type].sql << 'EOF'
-- 添加表注释
COMMENT ON TABLE [table_name] IS '中文表描述，说明业务用途';

-- 添加字段注释（每个字段都必须添加）
COMMENT ON COLUMN [table_name].id IS '主键ID，自动生成';
COMMENT ON COLUMN [table_name].name IS '名称：必填字段，最长100字符';
COMMENT ON COLUMN [table_name].slug IS 'URL标识符：基于名称自动生成';
COMMENT ON COLUMN [table_name].description IS '描述说明：最长500字符，可选';
COMMENT ON COLUMN [table_name].created_at IS '创建时间：自动生成';
COMMENT ON COLUMN [table_name].updated_at IS '更新时间：自动修改';
COMMENT ON COLUMN [table_name].published_at IS '发布时间：NULL表示草稿状态';

-- 关系字段注释
COMMENT ON COLUMN [table_name].author_id IS '作者ID：关联users表，一对多关系';
COMMENT ON COLUMN [table_name].category_id IS '分类ID：关联categories表，多对一关系';
EOF

# 执行数据库注释
cd backend && psql -U aibianx_dev -d aibianx_dev -f add-db-comments-[content-type].sql
```

**🔴 强制检查点 3：**
```sql
-- 验证数据库注释是否添加成功
SELECT 
    column_name,
    data_type,
    col_description(pgc.oid, cols.ordinal_position) as column_comment
FROM information_schema.columns cols
INNER JOIN pg_class pgc ON pgc.relname = cols.table_name
WHERE table_name = '[table_name]' AND table_schema = 'public';
```

### **第四步：配置API权限（立即执行）**
```bash
# 进入Strapi Admin
http://localhost:1337/admin → Settings → Users & Permissions → Roles → Public

# 🔥 必须勾选的权限（每个内容类型）：
- find（获取列表）
- findOne（获取单个）
- count（计数）- 如果需要

# ❌ 禁止勾选的权限（公共角色）：
- create（创建）
- update（更新）  
- delete（删除）
```

**🔴 强制检查点 4：**
```bash
# 验证API权限配置
curl -s "http://localhost:1337/api/[content-types]?pagination[pageSize]=1" | jq '.data | length'
# 返回数字 = 成功 | 返回null或错误 = 权限未配置
```

### **第五步：创建控制器和路由（如需自定义）**
```typescript
// 🔥 只有需要自定义逻辑时才创建，否则使用默认的

// src/api/[content-type]/controllers/[content-type].ts
import { factories } from '@strapi/strapi'

export default factories.createCoreController('api::[content-type].[content-type]', ({ strapi }) => ({
  // 只添加需要自定义的方法
  async find(ctx) {
    // 自定义逻辑
    return await super.find(ctx)
  }
}))
```

### **第六步：前端API集成测试**
```bash
# 创建前端测试端点
# frontend/src/app/api/test-[content-type]/route.ts

# 测试API集成
curl -s "http://localhost/api/test-[content-type]" | jq '.status'

# 测试Admin界面
# 创建一条测试数据，验证所有字段是否正常工作
```

**🔴 强制检查点 5：**
- [ ] 前端API调用成功
- [ ] Admin界面所有字段正常显示
- [ ] 字段描述正确显示中文
- [ ] 数据库注释完整

### **第七步：最终验证清单**
```bash
# 🔥 所有步骤完成后的最终检查（缺一不可）

# 1. API端点可访问
curl -s "http://localhost:1337/api/[content-types]" | jq '.data'

# 2. 字段描述完整
# Admin界面检查每个字段的中文描述

# 3. 数据库注释完整
psql -U aibianx_dev -d aibianx_dev -c "
SELECT 
    column_name,
    col_description(pgc.oid, cols.ordinal_position) as comment
FROM information_schema.columns cols
INNER JOIN pg_class pgc ON pgc.relname = cols.table_name
WHERE table_name = '[table_name]' AND table_schema = 'public'
ORDER BY ordinal_position;
"

# 4. 权限配置正确
curl -s "http://localhost:1337/api/[content-types]?pagination[pageSize]=1"

# 5. 前端集成正常
curl -s "http://localhost/api/test-[content-type]"
```

## 🌐 **域名配置标准（统一管理）**

### **⚠️ 重要原则**
所有URL和域名配置必须使用环境变量，禁止硬编码！确保开发环境、生产环境配置统一管理。

### **🔧 环境变量标准配置**

#### **前端环境变量 (frontend/.env.local)**
```bash
# 前端服务配置（域名和端口分离）
NEXT_PUBLIC_FRONTEND_DOMAIN=localhost
NEXT_PUBLIC_FRONTEND_PORT=80
NEXT_PUBLIC_FRONTEND_PROTOCOL=http

# 后端服务配置（域名和端口分离）
NEXT_PUBLIC_BACKEND_DOMAIN=localhost
NEXT_PUBLIC_BACKEND_PORT=1337
NEXT_PUBLIC_BACKEND_PROTOCOL=http

# 搜索服务配置（域名和端口分离）
NEXT_PUBLIC_SEARCH_DOMAIN=localhost
NEXT_PUBLIC_SEARCH_PORT=7700
NEXT_PUBLIC_SEARCH_PROTOCOL=http

# NextAuth配置
NEXTAUTH_SECRET=your-secret-key
```

#### **后端环境变量 (backend/.env)**
```bash
# 后端服务配置（域名和端口分离）
BACKEND_DOMAIN=localhost
BACKEND_PORT=1337
BACKEND_PROTOCOL=http
HOST=0.0.0.0
PORT=1337

# 前端服务配置（域名和端口分离）
FRONTEND_DOMAIN=localhost
FRONTEND_PORT=80
FRONTEND_PROTOCOL=http

# 数据库服务配置（域名和端口分离）
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=aibianx_dev
DATABASE_USERNAME=aibianx_dev
DATABASE_PASSWORD=aibianx_password

# 搜索服务配置（域名和端口分离）
MEILISEARCH_DOMAIN=localhost
MEILISEARCH_PORT=7700
MEILISEARCH_PROTOCOL=http
MEILISEARCH_API_KEY=

# 安全配置
APP_KEYS=key1,key2,key3,key4
API_TOKEN_SALT=api-token-salt
ADMIN_JWT_SECRET=admin-jwt-secret
JWT_SECRET=jwt-secret
```

### **🔧 字段描述配置标准流程（关键）**

**⚠️ 重要提醒**：字段描述配置失败是反复出现的问题，必须严格按照以下流程执行！

#### **问题症状识别**
- Admin界面字段没有中文描述显示
- 描述显示为空或显示英文字段名
- 配置后刷新页面描述消失

#### **强制解决方案（100%有效）**

**第一步：彻底清除所有缓存**
```bash
# 停止所有服务
./scripts.sh deploy stop

# 清除后端所有缓存（关键步骤）
cd backend && rm -rf .tmp .cache build dist node_modules/.cache

# 清除前端缓存
cd ../frontend && rm -rf .next node_modules/.cache
```

**第二步：直接更新数据库配置**
```bash
# 创建字段描述更新脚本
cat > backend/update-field-descriptions.sql << 'EOF'
-- 更新Article字段描述（示例）
UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,featured,edit,description}', 
    '"是否置顶推荐：用于首页精选推荐，置顶显示优质内容，提升文章曝光度"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';

UPDATE strapi_core_store_settings 
SET value = jsonb_set(
    value::jsonb, 
    '{metadatas,isPremium,edit,description}', 
    '"是否会员专享：标记为会员专享的文章需要会员权限才能查看完整内容，用于付费内容管理"'
) 
WHERE key = 'plugin_content_manager_configuration_content_types::api::article.article';
EOF

# 执行数据库更新
cd backend && psql -U aibianx_dev -d aibianx_dev -f update-field-descriptions.sql
```

**第三步：重启服务并强制刷新**
```bash
# 重启开发环境（会自动清除缓存）
./scripts.sh deploy start

# 等待服务完全启动后，强制刷新浏览器
# 按 Ctrl+Shift+R (Windows) 或 Cmd+Shift+R (Mac)
```

### **⚠️ 常见遗漏点预防清单**
- [ ] **数据库注释** - 最容易忘记的步骤！
- [ ] **字段描述自动化脚本** - 必须执行自动化工具，影响后台使用体验
- [ ] **API权限配置** - 导致前端无法访问
- [ ] **关系字段配置** - 一对多/多对多关系设置
- [ ] **前端类型定义** - 更新TypeScript类型
- [ ] **API测试验证** - 确保集成成功

### **🚨 绝对禁止的操作**
- ❌ **跳过数据库注释** - 导致后期维护困难
- ❌ **不执行字段描述自动化脚本** - 导致Admin界面字段无中文描述
- ❌ **忘记权限配置** - 导致API无法访问
- ❌ **不验证API端点** - 可能存在配置错误
- ❌ **创建多余的index.js文件** - 导致Strapi 5.x冲突

### **🛠️ 自动化解决方案**
```bash
# 创建内容类型完整配置脚本
./scripts.sh tools create-content-type [name]

# 该脚本自动执行：
# 1. 字段描述自动添加（预设中文描述）
# 2. 数据库注释自动添加  
# 3. API权限自动配置
# 4. 前端集成自动测试
# 5. 自动验证检查
```