---
alwaysApply: true
---
# AI变现之路 全栈开发规范 (Frontend + Backend)

你是一个专注于"AI变现之路"项目的高级全栈开发专家，精通现代Web开发技术栈，特别擅长1:1设计稿还原、Strapi 5.x后端开发和高质量组件开发。

## 🎯 核心技术栈
- **前端**: Next.js 14 + TypeScript + 纯CSS变量系统 + Zustand
- **后端**: Strapi 5.20.0 + PostgreSQL + TypeScript ES6
- **设计**: 1440px设计稿精确还原 + 毛玻璃效果 + 深色主题

## 🎨 核心设计规范
- **设计稿**: 1440px 像素级精确还原，使用Container组件xl尺寸
- **字体**: 'Alibaba PuHuiTi 3.0' + CSS变量系统 (--font-size-xs到--font-size-8xl)
- **颜色**: 严格使用CSS变量 (--color-primary-blue: #3B82F6, --color-bg-glass等)
- **毛玻璃**: `backdrop-filter: blur(12px)` + 对应边框和背景

## 📊 内容类型架构
- **Article** (文章): title, content, excerpt, featuredImage, author, category, tags
- **Author** (作者): name, avatar, bio
- **Category** (分类): name, slug, description  
- **Tag** (标签): name, slug, color
- **SiteConfig** (网站配置): siteName, siteUrl, 搜索引擎验证码, Analytics配置
- **SeoMetrics** (SEO监控): 收录数据, 性能指标, 流量数据, 关键词排名
- **Search** (搜索配置): MeiliSearch引擎配置, 同义词, 停用词, 中文分词设置
- **SearchAnalytics** (搜索分析): 搜索历史, 热门查询, 搜索趋势, 点击率统计
- **SystemConfig** (系统配置): OAuth配置(GitHub/Google/微信/QQ), 邮件服务, 支付配置
- **SmtpConfig** (SMTP配置): 邮件服务器配置, 认证信息, 发送限制, 健康检查
- **EmailTemplate** (邮件模板): 模板内容, 变量系统, 分类管理
- **EmailSubscription** (邮件订阅): 订阅管理, 标签系统, 取消订阅
- **EmailCampaign** (邮件活动): 营销邮件, 发送统计, 效果分析
- **EmailList** (邮件列表): 邮件分组管理, 用户细分, 列表维护
- **EmailAnalytics** (邮件分析): 打开率, 点击率, 转化率, 用户行为分析

## ⚙️ 核心配置
- **数据库**: PostgreSQL + 连接池(min:2, max:10) + JSONB支持
- **API**: 分页(默认25, 最大100) + 自动计数 + OpenAPI文档
- **控制器**: `factories.createCoreController` + ES6语法
- **API文档**: http://localhost:1337/documentation
- **邮件营销**: 轻量级集成方案 + 现有SMTP统一管理 (非BillionMail完整部署)

## 🔗 API集成要点
- **客户端**: `lib/strapi.ts` 统一API客户端 + TypeScript类型安全
- **Populate**: `'author,category,tags,featuredImage'` 关联数据获取
- **环境变量**: 前端(`NEXT_PUBLIC_STRAPI_URL`, `NEXTAUTH_URL=http://localhost`) + 后端(数据库+运行环境)
- **错误处理**: 统一fetch包装 + 状态码检查

## 🏗️ 组件规范总结
- **原子组件**: GradientButton, GradientText, Input, GlassCard, Icon, Avatar, Container
- **状态管理**: useModalStore, useUserStore (Zustand + persist)
- **API Hooks**: useArticles, useFeaturedArticles, useArticleBySlug
- **原则**: 组合>继承, 一致性优先, API集成优先, 移动端优先

## 🚀 开发工作流（智能环境管理系统）

### **🧠 智能统一入口系统**
- **🎯 统一入口**: `./scripts.sh` - 企业级智能脚本管理系统
- **🎨 自适应菜单**: 根据环境自动切换菜单主题和功能
  - 🔧 **开发环境**: 蓝色主题，专注开发调试功能
  - 🚀 **生产环境**: 红色主题，专注部署监控功能
- **⚡ 智能命令映射**: 同一选项号在不同环境执行对应功能

### **🔧 开发环境工作流**
- **环境启动**: `./scripts.sh deploy start` 或菜单选择 `1) 启动完整开发环境`
- **快速调试**: `./scripts.sh tools status` 或菜单选择 `6) 查看系统状态`  
- **搜索管理**: `./scripts.sh search manage` 或菜单选择 `12) 搜索管理工具`
- **数据备份**: `./scripts.sh backup full` 或菜单选择 `14) 完整系统备份`
- **邮件系统**: `./scripts.sh billionmail check` 或菜单选择 `17) 检查BillionMail状态`
- **服务停止**: `./scripts.sh deploy stop` 或菜单选择 `4) 停止所有服务`

### **🚀 生产环境工作流**
- **全自动部署**: `./scripts.sh production auto-deploy yourdomain.com mail.yourdomain.com`
- **快速部署**: 菜单选择 `1) 全自动部署 (安装环境+代码+配置+部署)`
- **服务管理**: 
  - `./scripts.sh production start` 或菜单选择 `2) 启动前端服务`
  - `./scripts.sh production stop` 或菜单选择 `4) 停止生产环境`
- **监控管理**:
  - `./scripts.sh production monitor` 或菜单选择 `11) 启动实时监控`
  - `./scripts.sh production status` 或菜单选择 `6) 检查生产状态`
- **维护工具**:
  - `./scripts.sh production backup` 或菜单选择 `18) 创建环境备份`
  - `./scripts.sh production cleanup` 或菜单选择 `21) 清理生产资源`

### **🔄 环境智能切换**
- **切换方法**: `./scripts.sh` 进入菜单，选择 `e) 环境切换`
- **环境标记**: 
  - `.development` - 开发环境标记文件
  - `.production` - 生产环境标记文件
- **自动适应**: 菜单和功能根据环境标记自动调整

### **📊 系统访问地址**
- **开发环境**: 前端 http://localhost (端口80) | 后端 http://localhost:1337/admin
- **生产环境**: 前端 https://yourdomain.com | 后端 https://yourdomain.com/admin
- **邮件系统**: 开发 http://localhost:8080 | 生产 https://yourdomain.com:8080
- **搜索引擎**: http://localhost:7700 (MeiliSearch)

### 🔍 搜索引擎管理增强
- **部署搜索**: `./scripts.sh search deploy` - 一键部署MeiliSearch容器
- **管理工具**: `./scripts.sh search manage` - 完整的搜索管理界面
- **快速重启**: `./scripts.sh search restart` - 重启搜索服务
- **数据同步**: `./scripts.sh search reindex` - 重建搜索索引
- **状态检查**: `./scripts.sh search check` - 检查搜索引擎状态
- **日志监控**: `./scripts.sh search logs` - 实时查看搜索日志

## 📋 **专门规则文件引用（按需加载）**

当进行以下开发活动时，请参考对应的专门规则文件：

### **🔧 Cursor开发规范** 
> 参考: `.cursor/rules/cursor-development.mdc`
- 文件命名铁律 (组件PascalCase, API kebab-case, 工具camelCase)
- 导入导出规范 (防止循环依赖)
- TypeScript类型定义强制更新
- 环境变量强制验证
- 缓存清理强制时机
- Git工作流强制规范
- 依赖管理强制规范

### **🎨 CSS样式开发**
> 参考: `.cursor/rules/css-styling.mdc`
- CSS样式冲突解决标准 (终极优先级策略)
- SVG图标强制颜色覆盖
- JSX内联样式四层强制
- 主题切换颜色处理
- 毛玻璃效果实现

### **🏢 Strapi后端开发**
> 参考: `.cursor/rules/strapi-backend.mdc`
- Strapi 5.x关键错误预防
- 新建内容类型标准流程 (7步验证法)
- 字段描述自动化配置
- 数据库注释添加
- API权限配置
- 控制器和路由开发

### **⚛️ 前端组件开发**
> 参考: `.cursor/rules/frontend-development.mdc`
- 前端组件开发规范 (原子设计)
- Props设计规范
- 状态管理和API集成
- 响应式设计标准
- 组件测试标准

### **🔌 API开发**
> 参考: `.cursor/rules/api-development.mdc`
- RESTful API设计原则
- 标准API响应格式
- API查询和过滤标准
- 邮件系统开发规范
- API调试升级版

### **🛡️ 安全和性能**
> 参考: `.cursor/rules/security-performance.mdc`
- 安全规范和最佳实践
- 性能优化规范
- 监控和日志规范
- 代码质量规范

### **⚡ 工作流和验证**
> 参考: `.cursor/rules/workflow-verification.mdc`
- 强制性开发工作流检查清单
- 代码提交前强制自检清单 (10步验证)
- 快速验证命令集合
- 部署前最终检查清单

### **🚨 错误预防机制**
> 参考: `.cursor/rules/error-prevention.mdc`
- 重点错误预防机制 (基于实战经验)
- 常见开发错误和修正方法
- 最容易被遗漏的关键检查点
- 问题排查和解决方案



## 🎯 **核心开发原则（始终遵循）**

### **🚨 强制执行步骤（违反即为严重错误）：**

#### **💀 致命错误级：数据库和后台配置（绝对禁止跳过）**
- ❌ **跳过数据库表注释** → 致命后果：
  - 数据库维护困难，字段含义不明
  - 团队协作效率低，需要反复询问
  - 生产环境故障排查困难
  - **强制要求：每个新表必须添加中文注释**
- ❌ **跳过数据库字段注释** → 致命后果：
  - 字段用途不明，导致数据错误
  - 数据迁移和升级风险极高
  - **强制要求：每个字段必须添加中文注释**
- ❌ **不执行字段描述自动化脚本** → 致命后果：
  - Admin界面显示英文字段名，管理员无法使用
  - 内容管理效率极低，影响业务运营
  - 非技术人员无法操作后台系统
  - **强制要求：每个内容类型必须配置中文字段描述**

#### **⚠️ 严重错误级：开发环境和类型安全**
- ❌ **忘记更新TypeScript类型** → 类型安全缺失，运行时错误
- ❌ **不清理缓存** → 开发环境混乱，配置不生效
- ❌ **硬编码URL和颜色** → 环境切换困难，部署失败
- ❌ **不执行提交前检查** → 代码质量问题，线上bug

#### **🔥 强制验证命令（新建内容类型后必须执行）**
```bash
# 🚨 每次新建内容类型后，必须执行以下验证：
content_type="新建的内容类型名"
table_name="${content_type//-/_}s"

echo "🔍 验证数据库注释..."
psql -U aibianx_dev -d aibianx_dev -c "
SELECT 
    t.table_name,
    obj_description(c.oid) as table_comment,
    COUNT(col_description(c.oid, a.attnum)) as commented_columns
FROM information_schema.tables t
LEFT JOIN pg_class c ON c.relname = t.table_name
LEFT JOIN pg_attribute a ON a.attrelid = c.oid AND a.attnum > 0
WHERE t.table_name = '${table_name}'
GROUP BY t.table_name, c.oid;
"

echo "🔍 验证字段描述配置..."
psql -U aibianx_dev -d aibianx_dev -c "
SELECT jsonb_object_keys(value::jsonb->'metadatas') as configured_fields
FROM strapi_core_store_settings 
WHERE key = 'plugin_content_manager_configuration_content_types::api::${content_type}.${content_type}';
"

echo "🔍 验证Admin界面..."
echo "请访问并确认字段显示中文描述："
echo "http://localhost:1337/admin/content-manager/collection-types/api::${content_type}.${content_type}"

# ✅ 全部验证通过才能继续开发
# ❌ 任何一项失败都必须重新配置
```

### **💡 效率提升技巧**
```bash
# 快速检查命令（配置后可使用）
verify-all              # 全面系统验证
dev-check               # 开发质量检查
diagnose                # 问题诊断
fresh-start             # 清理缓存重启
pre-commit-quick        # 快速提交前检查
```

---

**使用说明**: 这是主规则文件，包含项目核心信息。开发时请根据具体需求引用相应的专门规则文件，每个专门规则文件都有明确的使用场景和详细的操作指南。