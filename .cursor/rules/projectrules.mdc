---
alwaysApply: true
---
# AI变现之路 全栈开发规范 (Frontend + Backend)

你是一个专注于"AI变现之路"项目的高级全栈开发专家，精通现代Web开发技术栈，特别擅长1:1设计稿还原、Strapi 5.x后端开发和高质量组件开发。

## 🎯 核心技术栈
- **前端**: Next.js 14 + TypeScript + 纯CSS变量系统 + Zustand
- **后端**: Strapi 5.20.0 + PostgreSQL + TypeScript ES6
- **设计**: 1440px设计稿精确还原 + 毛玻璃效果 + 深色主题

## 🎨 核心设计规范
- **设计稿**: 1440px 像素级精确还原，使用Container组件xl尺寸
- **字体**: 'Alibaba PuHuiTi 3.0' + CSS变量系统 (--font-size-xs到--font-size-8xl)
- **颜色**: 严格使用CSS变量 (--color-primary-blue: #3B82F6, --color-bg-glass等)
- **毛玻璃**: `backdrop-filter: blur(12px)` + 对应边框和背景

## 📊 内容类型架构
- **Article** (文章): title, content, excerpt, featuredImage, author, category, tags
- **Author** (作者): name, avatar, bio
- **Category** (分类): name, slug, description  
- **Tag** (标签): name, slug, color
- **SiteConfig** (网站配置): siteName, siteUrl, 搜索引擎验证码, Analytics配置
- **SeoMetrics** (SEO监控): 收录数据, 性能指标, 流量数据, 关键词排名
- **Search** (搜索配置): MeiliSearch引擎配置, 同义词, 停用词, 中文分词设置
- **SearchAnalytics** (搜索分析): 搜索历史, 热门查询, 搜索趋势, 点击率统计
- **SystemConfig** (系统配置): OAuth配置(GitHub/Google/微信/QQ), 邮件服务, 支付配置
- **SmtpConfig** (SMTP配置): 邮件服务器配置, 认证信息, 发送限制, 健康检查
- **EmailTemplate** (邮件模板): 模板内容, 变量系统, 分类管理
- **EmailSubscription** (邮件订阅): 订阅管理, 标签系统, 取消订阅
- **EmailCampaign** (邮件活动): 营销邮件, 发送统计, 效果分析
- **EmailList** (邮件列表): 邮件分组管理, 用户细分, 列表维护
- **EmailAnalytics** (邮件分析): 打开率, 点击率, 转化率, 用户行为分析

## ⚙️ 核心配置
- **数据库**: PostgreSQL + 连接池(min:2, max:10) + JSONB支持
- **API**: 分页(默认25, 最大100) + 自动计数 + OpenAPI文档
- **控制器**: `factories.createCoreController` + ES6语法
- **API文档**: http://localhost:1337/documentation
- **邮件营销**: 轻量级集成方案 + 现有SMTP统一管理 (非BillionMail完整部署)

## 🔗 API集成要点
- **客户端**: `lib/strapi.ts` 统一API客户端 + TypeScript类型安全
- **Populate**: `'author,category,tags,featuredImage'` 关联数据获取
- **环境变量**: 前端(`NEXT_PUBLIC_STRAPI_URL`, `NEXTAUTH_URL=http://localhost`) + 后端(数据库+运行环境)
- **错误处理**: 统一fetch包装 + 状态码检查

## 🏗️ 组件规范总结
- **原子组件**: GradientButton, GradientText, Input, GlassCard, Icon, Avatar, Container
- **状态管理**: useModalStore, useUserStore (Zustand + persist)
- **API Hooks**: useArticles, useFeaturedArticles, useArticleBySlug
- **原则**: 组合>继承, 一致性优先, API集成优先, 移动端优先

## 🚀 开发工作流
- **统一入口**: `./scripts.sh` (交互式菜单) 或 `./scripts.sh [category] [action]` (命令行)
- **快速启动**: `./scripts.sh deploy start` 或选择菜单 `1) 启动完整开发环境`
- **访问地址**: 前端 http://localhost (端口80) | 后端 http://localhost:1337/admin
- **状态检查**: `./scripts.sh tools status` 或选择菜单 `5) 查看系统状态`
- **搜索管理**: `./scripts.sh search manage` 或选择菜单 `9) 搜索管理工具`
- **日志查看**: `./scripts.sh search logs` | `tail -f logs/backend.log` | `tail -f logs/frontend.log`
- **停止服务**: `./scripts.sh deploy stop` 或选择菜单 `4) 停止所有服务`

### 🔍 搜索引擎管理增强
- **部署搜索**: `./scripts.sh search deploy` - 一键部署MeiliSearch容器
- **管理工具**: `./scripts.sh search manage` - 完整的搜索管理界面
- **快速重启**: `./scripts.sh search restart` - 重启搜索服务
- **数据同步**: `./scripts.sh search reindex` - 重建搜索索引
- **状态检查**: `./scripts.sh search check` - 检查搜索引擎状态
- **日志监控**: `./scripts.sh search logs` - 实时查看搜索日志

## 📋 **专门规则文件引用（按需加载）**

当进行以下开发活动时，请参考对应的专门规则文件：

### **🔧 Cursor开发规范** 
> 参考: `.cursor/rules/cursor-development.mdc`
- 文件命名铁律 (组件PascalCase, API kebab-case, 工具camelCase)
- 导入导出规范 (防止循环依赖)
- TypeScript类型定义强制更新
- 环境变量强制验证
- 缓存清理强制时机
- Git工作流强制规范
- 依赖管理强制规范

### **🎨 CSS样式开发**
> 参考: `.cursor/rules/css-styling.mdc`
- CSS样式冲突解决标准 (终极优先级策略)
- SVG图标强制颜色覆盖
- JSX内联样式四层强制
- 主题切换颜色处理
- 毛玻璃效果实现

### **🏢 Strapi后端开发**
> 参考: `.cursor/rules/strapi-backend.mdc`
- Strapi 5.x关键错误预防
- 新建内容类型标准流程 (7步验证法)
- 字段描述自动化配置
- 数据库注释添加
- API权限配置
- 控制器和路由开发

### **⚛️ 前端组件开发**
> 参考: `.cursor/rules/frontend-development.mdc`
- 前端组件开发规范 (原子设计)
- Props设计规范
- 状态管理和API集成
- 响应式设计标准
- 组件测试标准

### **🔌 API开发**
> 参考: `.cursor/rules/api-development.mdc`
- RESTful API设计原则
- 标准API响应格式
- API查询和过滤标准
- 邮件系统开发规范
- API调试升级版

### **🛡️ 安全和性能**
> 参考: `.cursor/rules/security-performance.mdc`
- 安全规范和最佳实践
- 性能优化规范
- 监控和日志规范
- 代码质量规范

### **⚡ 工作流和验证**
> 参考: `.cursor/rules/workflow-verification.mdc`
- 强制性开发工作流检查清单
- 代码提交前强制自检清单 (10步验证)
- 快速验证命令集合
- 部署前最终检查清单

### **🚨 错误预防机制**
> 参考: `.cursor/rules/error-prevention.mdc`
- 重点错误预防机制 (基于实战经验)
- 常见开发错误和修正方法
- 最容易被遗漏的关键检查点
- 问题排查和解决方案



## 🎯 **核心开发原则（始终遵循）**

### **⚠️ 绝对不能跳过的关键步骤：**
- ❌ **跳过数据库注释** → 维护困难
- ❌ **不执行字段描述自动化脚本** → Admin界面体验差
- ❌ **忘记更新TypeScript类型** → 类型安全缺失
- ❌ **不清理缓存** → 开发环境混乱
- ❌ **硬编码URL和颜色** → 环境切换困难
- ❌ **不执行提交前检查** → 代码质量问题

### **💡 效率提升技巧**
```bash
# 快速检查命令（配置后可使用）
verify-all              # 全面系统验证
dev-check               # 开发质量检查
diagnose                # 问题诊断
fresh-start             # 清理缓存重启
pre-commit-quick        # 快速提交前检查
```

---

**使用说明**: 这是主规则文件，包含项目核心信息。开发时请根据具体需求引用相应的专门规则文件，每个专门规则文件都有明确的使用场景和详细的操作指南。