#!/bin/bash

# AI变现之路 - 菜单显示和帮助功能模块
# 从scripts.sh分离出来，保持核心文件在500行以内

# 显示传统命令行帮助
show_usage() {
    echo -e "${BLUE}🚀 AI变现之路 - 脚本管理工具${NC}"
    echo ""
    echo -e "${YELLOW}📋 使用方式:${NC}"
    echo "  1. 交互式模式: ./scripts.sh           (推荐)"
    echo "  2. 命令行模式: ./scripts.sh <类别> <操作> [参数]"
    echo ""
    echo -e "${YELLOW}📋 命令行模式 - 可用类别和操作:${NC}"
    echo ""
    echo -e "${GREEN}🚀 部署管理 (deploy)${NC}"
    echo "  start        - 启动开发环境"
    echo "  stop         - 停止开发服务"
    echo "  frontend     - 启动前端服务"
    echo "  backend      - 启动后端服务"
    echo ""
    echo -e "${GREEN}🗄️  数据库管理 (db)${NC}"
    echo "  check        - 检查数据库连接"
    echo "  backup       - 备份数据库"
    echo "  restore      - 还原数据库"
    echo ""
    echo -e "${GREEN}🔍 搜索引擎 (search)${NC}"
    echo "  deploy       - 部署MeiliSearch"
    echo "  check        - 检查搜索引擎状态"
    echo "  restart      - 重启MeiliSearch服务"
    echo "  logs         - 查看MeiliSearch日志"
    echo "  reindex      - 智能重建搜索索引 (自动创建+数据同步)"
    echo "  manage       - 搜索管理工具"
    echo ""
    echo -e "${GREEN}💾 备份管理 (backup)${NC}"
    echo "  full         - 完整系统备份"
    echo "  verify       - 验证备份文件"
    echo "  restore      - 还原系统备份"
    echo "  cleanup      - 清理临时文件"
    echo ""
    echo -e "${GREEN}🔄 整合部署管理 (integrated)${NC}"
    echo "  backup       - 整合环境数据库备份 (AI变现之路 + BillionMail)"
    echo "  restore      - 整合环境数据库还原"
    echo "  check        - 整合环境状态检查"
    echo "  verify       - 验证整合备份文件"
    echo ""
    echo -e "${GREEN}📧 邮件管理 (email)${NC}"
    echo "  deploy       - 部署BillionMail邮件系统"
    echo "  check        - 检查BillionMail服务状态"
    echo "  restart      - 重启BillionMail服务"
    echo "  logs         - 查看BillionMail日志"
    echo "  test         - 测试BillionMail API连接"
    echo "  test-full    - 完整集成测试（前端+后端）"
    echo "  test-nextauth - 测试NextAuth邮件集成"
    echo "  admin        - 打开BillionMail管理界面"
    echo "    📍 管理界面: ${BILLIONMAIL_ADMIN_URL}"
    echo "    📧 WebMail: ${BILLIONMAIL_WEBMAIL_URL}"
    echo ""
    echo -e "${GREEN}🚀 生产环境 (production)${NC}"
    echo "  auto-deploy  - 全自动生产部署 (环境+代码+配置+部署)"
    echo "  check-env    - 检查基础环境 (Git+Docker+Compose)"
    echo "  install-env  - 安装基础环境"
    echo "  clone-project - 克隆项目代码"
    echo "  update-project - 更新项目代码"
    echo "  configure    - 生成生产配置 (需要域名)"
    echo "  configure-check - 验证配置文件"
    echo "  deploy       - 执行生产部署 (unified/separate)"
    echo "  deploy-check - 检查部署状态"
    echo "  start        - 启动生产服务"
    echo "  stop         - 停止生产服务"
    echo "  restart      - 重启生产服务"
    echo "  status       - 查看生产状态"
    echo "  logs         - 查看生产日志"
    echo "  monitor      - 启动实时监控"
    echo "  performance  - 性能检查"
    echo "  alerts       - 告警检查"
    echo "  backup       - 创建生产备份"
    echo "  restore      - 从备份恢复"
    echo "  cleanup      - 清理生产资源"
    echo "  update       - 更新生产系统"
    echo "  list         - 查看备份列表"
    echo ""
    echo -e "${GREEN}🔧 工具 (tools)${NC}"
    echo "  status       - 查看系统状态"
    echo "  env          - 加载环境变量"
    echo "  fix-fields   - 修复字段描述配置问题（Article专用）"
    echo "  fix-fields-any - 修复任意内容类型的字段描述问题"
    echo "  setup-env    - 自动配置环境变量（域名端口分离）"
    echo ""
    echo -e "${YELLOW}📖 命令行使用示例:${NC}"
    echo ""
    echo -e "${CYAN}开发环境:${NC}"
    echo "  ./scripts.sh deploy start    # 启动开发环境"
    echo "  ./scripts.sh db check        # 检查数据库"
    echo "  ./scripts.sh search deploy   # 部署搜索引擎"
    echo "  ./scripts.sh search restart  # 重启搜索服务"
    echo "  ./scripts.sh search reindex  # 智能重建搜索索引"
    echo "  ./scripts.sh email deploy    # 部署BillionMail邮件系统"
    echo "  ./scripts.sh email check     # 检查BillionMail服务状态"
    echo "  ./scripts.sh backup full     # 完整备份"
    echo "  ./scripts.sh tools status    # 查看系统状态"
    echo ""
    echo -e "${CYAN}生产环境:${NC}"
    echo "  ./scripts.sh production auto-deploy    # 全自动生产部署"
    echo "  ./scripts.sh production check-env      # 检查基础环境"
    echo "  ./scripts.sh production configure yourdomain.com # 生成生产配置"
    echo "  ./scripts.sh production deploy unified # 执行整合部署"
    echo "  ./scripts.sh production start          # 启动生产服务"
    echo "  ./scripts.sh production status         # 查看生产状态"
    echo "  ./scripts.sh production monitor        # 启动实时监控"
    echo "  ./scripts.sh production logs backend   # 查看后端日志"
    echo "  ./scripts.sh production backup         # 创建生产备份"
    echo "  ./scripts.sh production restore backup.tar.gz # 从备份恢复"
    echo "  ./scripts.sh production cleanup        # 清理生产资源"
    echo ""
    echo -e "${CYAN}其他功能:${NC}"
    echo "  ./scripts.sh tools fix-fields # 修复字段描述配置（Article）"
    echo "  ./scripts.sh tools fix-fields-any author # 配置作者字段描述"
    echo "  ./scripts.sh tools setup-env # 自动配置环境变量"
    echo "  ./scripts.sh integrated backup   # 整合环境备份"
    echo "  ./scripts.sh integrated restore backup.tar.gz # 整合环境还原"
    echo "  ./scripts.sh integrated check    # 整合环境检查"
    echo ""
}

# 智能环境自适应菜单显示
show_menu() {
    # 检测当前环境
    local env_info=""
    if [ -f "$SCRIPT_DIR/scripts.sh" ]; then
        # 从主脚本获取环境信息
        env_info=$(source "$SCRIPT_DIR/scripts.sh" && detect_current_environment 2>/dev/null || echo "development:unknown")
    else
        env_info="development:unknown"
    fi
    
    local env_type="${env_info%%:*}"
    local env_status="${env_info#*:}"
    env_status="${env_status%%:*}"
    
    clear
    
    # 显示环境相关的标题
    if [ "$env_type" = "production" ]; then
        echo -e "${RED}┌─────────────────────────────────────────┐${NC}"
        echo -e "${RED}│        🚀 AI变现之路 - 生产环境          │${NC}"
        echo -e "${RED}└─────────────────────────────────────────┘${NC}"
        echo -e "${YELLOW}📍 当前环境: ${RED}🚀 生产环境${NC} | 状态: $env_status"
    else
        echo -e "${BLUE}┌─────────────────────────────────────────┐${NC}"
        echo -e "${BLUE}│        🚀 AI变现之路 - 开发环境          │${NC}"
        echo -e "${BLUE}└─────────────────────────────────────────┘${NC}"
        echo -e "${YELLOW}📍 当前环境: ${BLUE}🔧 开发环境${NC} | 状态: $env_status"
    fi
    
    echo ""
    echo -e "${YELLOW}📋 请选择要执行的操作 (输入序号):${NC}"
    echo ""
    
    # 环境自适应菜单项
    if [ "$env_type" = "production" ]; then
        # 生产环境菜单
        echo -e "${GREEN} 🚀 生产部署${NC}"
        echo -e "  ${CYAN}1${NC}) 全自动部署           (安装环境+代码+配置+部署)"
        echo -e "  ${CYAN}2${NC}) 启动前端服务         (生产前端)"
        echo -e "  ${CYAN}3${NC}) 启动后端服务         (生产后端)"
        echo -e "  ${CYAN}4${NC}) 停止生产环境         (停止所有服务)"
        echo -e "  ${CYAN}5${NC}) 重启生产服务         (重启所有服务)"
        echo ""
        echo -e "${GREEN} 📊 状态监控${NC}"
        echo -e "  ${CYAN}6${NC}) 检查生产状态         (容器+服务+健康检查)"
        echo -e "  ${CYAN}7${NC}) 检查生产数据库       (数据库健康状态)"
        echo -e "  ${CYAN}8${NC}) 检查搜索引擎         (性能监控)"
        echo ""
        echo -e "${GREEN} 🔧 生产管理${NC}"
        echo -e "  ${CYAN}9${NC}) 搜索引擎管理         (通过部署脚本)"
        echo -e " ${CYAN}10${NC}) 查看生产日志         (实时日志监控)"
        echo -e " ${CYAN}11${NC}) 启动实时监控         (监控面板)"
        echo -e " ${CYAN}12${NC}) 安装基础环境         (Git+Docker+Compose)"
        echo ""
        echo -e "${GREEN} 📥 项目管理${NC}"
        echo -e " ${CYAN}13${NC}) 更新项目代码         (拉取最新代码)"
        echo -e " ${CYAN}14${NC}) 生成生产配置         (域名+环境变量)"
        echo -e " ${CYAN}15${NC}) 验证配置文件         (检查配置完整性)"
        echo -e " ${CYAN}16${NC}) 执行生产部署         (整合部署)"
        echo ""
        echo -e "${GREEN} 🛠️ 维护工具${NC}"
        echo -e " ${CYAN}17${NC}) 生产维护工具         (备份+恢复+清理)"
        echo -e " ${CYAN}18${NC}) 创建环境备份         (完整生产备份)"
        echo -e " ${CYAN}19${NC}) 完整环境备份         (数据库+文件+配置)"
        echo -e " ${CYAN}20${NC}) 从备份恢复           (安全恢复机制)"
        echo -e " ${CYAN}21${NC}) 清理生产资源         (Docker+日志+临时文件)"
        echo -e " ${CYAN}22${NC}) 备份文件列表         (查看可用备份)"
        echo -e " ${CYAN}23${NC}) 更新生产系统         (代码+依赖+镜像)"
        echo -e " ${CYAN}24${NC}) 告警检查             (性能+资源+服务)"
    else
        # 开发环境菜单
        echo -e "${GREEN} 🚀 开发环境${NC}"
        echo -e "  ${CYAN}1${NC}) 启动完整开发环境     (前端+后端+数据库)"
        echo -e "  ${CYAN}2${NC}) 启动前端服务         (Next.js 开发模式)"
        echo -e "  ${CYAN}3${NC}) 启动后端服务         (Strapi 开发模式)"
        echo -e "  ${CYAN}4${NC}) 停止所有服务         (开发环境)"
        echo -e "  ${CYAN}5${NC}) 重启开发服务         (重新启动)"
        echo ""
        echo -e "${GREEN} 📊 状态检查${NC}"
        echo -e "  ${CYAN}6${NC}) 查看系统状态         (服务+端口+资源)"
        echo -e "  ${CYAN}7${NC}) 检查数据库连接       (PostgreSQL)"
        echo -e "  ${CYAN}8${NC}) 检查搜索引擎         (MeiliSearch)"
        echo ""
        echo -e "${GREEN} 🔍 搜索引擎${NC}"
        echo -e "  ${CYAN}9${NC}) 部署MeiliSearch      (一键安装配置)"
        echo -e " ${CYAN}10${NC}) 重启MeiliSearch      (重启搜索服务)"
        echo -e " ${CYAN}11${NC}) 查看搜索日志         (实时日志查看)"
        echo -e " ${CYAN}12${NC}) 搜索管理工具         (完整管理界面)"
        echo ""
        echo -e "${GREEN} 📝 开发工具${NC}"
        echo -e " ${CYAN}13${NC}) 智能重建索引         (自动创建+同步数据)"
        echo -e " ${CYAN}14${NC}) 完整系统备份         (数据库+文件)"
        echo -e " ${CYAN}15${NC}) 清理备份临时文件     (清理空间)"
        echo ""
        echo -e "${GREEN} 📧 邮件系统${NC}"
        echo -e " ${CYAN}16${NC}) 访问BillionMail      (邮件营销系统)"
        echo -e " ${CYAN}17${NC}) 检查BillionMail状态  (服务健康检查)"
        echo -e " ${CYAN}18${NC}) 打开BillionMail管理   (浏览器管理界面)"
        echo ""
        echo -e "${GREEN} 🔧 系统维护${NC}"
        echo -e " ${CYAN}19${NC}) 修复字段描述配置     (解决描述不显示问题)"
        echo -e " ${CYAN}20${NC}) 自动配置环境变量     (创建开发环境配置)"
        echo -e " ${CYAN}21${NC}) 整合环境备份         (AI变现之路 + BillionMail)"
        echo -e " ${CYAN}22${NC}) 整合环境还原         (从备份文件还原)"
        echo -e " ${CYAN}23${NC}) 整合环境状态检查     (全面系统检查)"
        echo -e " ${CYAN}24${NC}) 验证整合备份文件     (备份完整性验证)"
    fi
    
    echo ""
    echo -e "${GREEN} 🌐 环境管理${NC}"
    echo -e " ${PURPLE} e${NC}) 环境切换             (开发 ↔ 生产)"
    echo -e " ${PURPLE}env${NC}) 查看环境信息         (详细环境状态)"
    echo -e " ${PURPLE} c${NC}) 配置管理             (生成+验证+备份配置)"
    echo -e " ${PURPLE} t${NC}) 故障排查             (系统诊断工具)"
    echo -e " ${PURPLE} u${NC}) 项目更新             (拉取最新代码)"
    echo ""
    echo -e "${PURPLE} h${NC}) 显示命令行帮助"
    echo -e "${RED} 0${NC}) 退出"
    echo ""
    if [ "$env_type" = "production" ]; then
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    else
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    fi
}