{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/tags.ts"],"sourcesContent":["/**\n * 标签管理系统 - Tags Management System\n * \n * 这个文件集中管理所有文章分类标签的定义和配置\n * 在设计后台管理系统时，可以基于这些数据结构进行标签的CRUD操作\n * \n * @author AI变现之路团队\n * @date 2024-12-22\n */\n\n// ===== 标签类型定义 =====\n\n/**\n * 标签基础接口定义\n * 后台管理系统可以基于此接口设计标签管理表单\n */\nexport interface TagBase {\n    /** 标签唯一标识符（后台管理的主键） */\n    id: string\n    /** 标签显示名称 */\n    name: string\n    /** 标签主色调（用于文字和边框） - 亮色模式 */\n    lightColor: string\n    /** 标签主色调（用于文字和边框） - 暗色模式 */\n    darkColor: string\n    /** 标签描述（后台管理使用） */\n    description?: string\n    /** 排序权重（数字越小越靠前） */\n    sortOrder: number\n    /** 是否启用（后台管理开关） */\n    isActive: boolean\n    /** 创建时间（后台管理使用） */\n    createdAt?: string\n    /** 最后更新时间（后台管理使用） */\n    updatedAt?: string\n}\n\n/**\n * 前端渲染使用的标签接口\n * 继承基础标签信息，添加渲染所需的样式属性\n */\nexport interface Tag extends TagBase {\n    /** 标签当前主题色 */\n    color: string\n    /** 标签背景色（自动计算得出） */\n    backgroundColor: string\n    /** 标签边框色（自动计算得出） */\n    borderColor: string\n    /** 标签图标名称（可选） */\n    iconName?: string\n}\n\n/**\n * 标签分类枚举\n * 后台管理可以按分类组织标签\n */\nexport enum TagCategory {\n    /** 技术类标签 */\n    TECHNOLOGY = 'technology',\n    /** 商业变现类标签 */\n    MONETIZATION = 'monetization',\n    /** 工具类标签 */\n    TOOLS = 'tools',\n    /** 案例类标签 */\n    CASE_STUDY = 'case_study',\n    /** 前沿技术类标签 */\n    TRENDING = 'trending'\n}\n\n// ===== 标签配置管理 =====\n\n/**\n * 标签配置映射表\n * \n * 这是所有标签的主数据源，后台管理系统应该从数据库读取类似结构的数据\n * 在实际项目中，这些数据应该存储在数据库中，通过API接口获取\n */\nconst TAG_CONFIG: Record<string, TagBase> = {\n    'tech-guide': {\n        id: 'tech-guide',\n        name: '技术指南',\n        lightColor: '#1E40AF',\n        darkColor: '#3B82F6',\n        description: '技术教程和实战指南类文章',\n        sortOrder: 10,\n        isActive: true\n    },\n    'ai-tools': {\n        id: 'ai-tools',\n        name: 'AI工具',\n        lightColor: '#6D28D9',\n        darkColor: '#8B5CF6',\n        description: 'AI工具介绍和使用教程',\n        sortOrder: 20,\n        isActive: true\n    },\n    'monetization': {\n        id: 'monetization',\n        name: '变现心得',\n        lightColor: '#C2410C',\n        darkColor: '#F97316',\n        description: '商业变现策略和经验分享',\n        sortOrder: 30,\n        isActive: true\n    },\n    'case-study': {\n        id: 'case-study',\n        name: '实战案例',\n        lightColor: '#047857',\n        darkColor: '#10B981',\n        description: '真实项目案例分析',\n        sortOrder: 40,\n        isActive: true\n    },\n    'trending': {\n        id: 'trending',\n        name: '前沿技术',\n        lightColor: '#1D4ED8',\n        darkColor: '#60A5FA',\n        description: '最新技术趋势和前沿资讯',\n        sortOrder: 50,\n        isActive: true\n    },\n    'growth-hack': {\n        id: 'growth-hack',\n        name: '增长黑客',\n        lightColor: '#047857',\n        darkColor: '#10B981',\n        description: '用户增长和运营策略',\n        sortOrder: 60,\n        isActive: true\n    }\n}\n\n/**\n * 颜色工具函数\n * 将十六进制颜色转换为RGBA格式，用于生成半透明背景色\n */\nfunction hexToRgba(hex: string, alpha: number): string {\n    const r = parseInt(hex.slice(1, 3), 16)\n    const g = parseInt(hex.slice(3, 5), 16)\n    const b = parseInt(hex.slice(5, 7), 16)\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`\n}\n\n/**\n * 根据标签ID获取完整的标签信息\n * \n * @param tagId 标签ID\n * @param theme 主题模式 ('light' | 'dark')\n * @returns 完整的标签对象，包含渲染所需的所有样式属性\n */\nexport function getTagById(tagId: string, theme: 'light' | 'dark' = 'dark'): Tag | null {\n    const baseTag = TAG_CONFIG[tagId]\n    if (!baseTag || !baseTag.isActive) {\n        return null\n    }\n\n    const color = theme === 'light' ? baseTag.lightColor : baseTag.darkColor\n\n    return {\n        ...baseTag,\n        color,\n        backgroundColor: hexToRgba(color, theme === 'light' ? 0.08 : 0.1),\n        borderColor: hexToRgba(color, theme === 'light' ? 0.3 : 0.4),\n        iconName: getTagIcon(tagId)\n    }\n}\n\n/**\n * 根据标签名称获取标签信息（兼容旧数据）\n * \n * @param tagName 标签名称\n * @param theme 主题模式 ('light' | 'dark')\n * @returns 标签对象或null\n */\nexport function getTagByName(tagName: string, theme: 'light' | 'dark' = 'dark'): Tag | null {\n    const entry = Object.entries(TAG_CONFIG).find(([_, tag]) => tag.name === tagName)\n    if (!entry) return null\n\n    return getTagById(entry[0], theme)\n}\n\n/**\n * 获取所有激活的标签\n * 后台管理可以调用此函数获取标签列表\n * \n * @param theme 主题模式 ('light' | 'dark')\n * @param category 可选的分类过滤\n * @returns 激活标签列表，按sortOrder排序\n */\nexport function getAllActiveTags(theme: 'light' | 'dark' = 'dark', category?: TagCategory): Tag[] {\n    return Object.keys(TAG_CONFIG)\n        .map(id => getTagById(id, theme))\n        .filter((tag): tag is Tag => tag !== null)\n        .sort((a, b) => a.sortOrder - b.sortOrder)\n}\n\n/**\n * 获取标签对应的图标名称\n * 可以根据标签类型返回不同的图标\n * \n * @param tagId 标签ID\n * @returns 图标名称\n */\nfunction getTagIcon(tagId: string): string | undefined {\n    const iconMap: Record<string, string> = {\n        'ai-tools': 'ai-tool-tag-icon',\n        'monetization': 'monetization-tag-icon',\n        'tech-guide': 'tag-tech',\n        'case-study': 'tag-case',\n        'trending': 'tag-tools'\n    }\n\n    return iconMap[tagId]\n}\n\n/**\n * 标签验证函数\n * 后台管理在创建/更新标签时可以使用此函数验证数据\n * \n * @param tag 待验证的标签对象\n * @returns 验证结果\n */\nexport function validateTag(tag: Partial<TagBase>): { isValid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (!tag.id || tag.id.trim() === '') {\n        errors.push('标签ID不能为空')\n    }\n\n    if (!tag.name || tag.name.trim() === '') {\n        errors.push('标签名称不能为空')\n    }\n\n    if (!tag.lightColor || !/^#[0-9A-Fa-f]{6}$/.test(tag.lightColor)) {\n        errors.push('亮色主题颜色必须是有效的十六进制颜色码')\n    }\n\n    if (!tag.darkColor || !/^#[0-9A-Fa-f]{6}$/.test(tag.darkColor)) {\n        errors.push('暗色主题颜色必须是有效的十六进制颜色码')\n    }\n\n    if (typeof tag.sortOrder !== 'number' || tag.sortOrder < 0) {\n        errors.push('排序权重必须是非负数')\n    }\n\n    return {\n        isValid: errors.length === 0,\n        errors\n    }\n}\n\n/**\n * 后台管理辅助函数 - 获取标签使用统计\n * \n * @param articles 文章列表\n * @returns 标签使用次数统计\n */\nexport function getTagUsageStats(articles: Array<{ tags: Array<{ name: string }> }>): Record<string, number> {\n    const stats: Record<string, number> = {}\n\n    articles.forEach(article => {\n        article.tags.forEach(tag => {\n            stats[tag.name] = (stats[tag.name] || 0) + 1\n        })\n    })\n\n    return stats\n}\n\n// ===== 导出类型和常量 =====\n\n/**\n * 默认标签配置（用于测试和fallback）\n */\nexport const DEFAULT_TAG: Tag = {\n    id: 'default',\n    name: '默认',\n    lightColor: '#6B7280',\n    darkColor: '#9CA3AF',\n    color: '#9CA3AF',\n    backgroundColor: 'rgba(156, 163, 175, 0.1)',\n    borderColor: 'rgba(156, 163, 175, 0.4)',\n    sortOrder: 999,\n    isActive: true\n}\n\n/**\n * 标签相关常量\n */\nexport const TAG_CONSTANTS = {\n    /** 单篇文章最大标签数量 */\n    MAX_TAGS_PER_ARTICLE: 3,\n    /** 标签名称最大长度 */\n    MAX_TAG_NAME_LENGTH: 10,\n    /** 标签描述最大长度 */\n    MAX_TAG_DESCRIPTION_LENGTH: 100\n} as const "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useGestures.ts"],"sourcesContent":["'use client'\n\nimport { useRef, useEffect, useCallback, useState } from 'react'\n\n/**\n * 移动端手势交互Hook - useGestures\n * \n * 为移动端组件提供手势识别和处理功能\n * 支持点击、长按、滑动、拖拽等常见手势\n * \n * 设计目标：\n * - 原生般的触控体验\n * - 多种手势类型支持\n * - 可配置的手势参数\n * - TypeScript类型安全\n */\n\ninterface GestureOptions {\n    // 点击配置\n    enableTap?: boolean\n    tapThreshold?: number\n    \n    // 长按配置\n    enableLongPress?: boolean\n    longPressDelay?: number\n    \n    // 滑动配置\n    enableSwipe?: boolean\n    swipeThreshold?: number\n    swipeVelocityThreshold?: number\n    \n    // 拖拽配置\n    enableDrag?: boolean\n    dragThreshold?: number\n    \n    // 通用配置\n    preventDefault?: boolean\n    passive?: boolean\n}\n\ninterface GestureCallbacks {\n    onTap?: (event: TouchEvent) => void\n    onDoubleTap?: (event: TouchEvent) => void\n    onLongPress?: (event: TouchEvent) => void\n    onSwipeLeft?: (event: TouchEvent, distance: number) => void\n    onSwipeRight?: (event: TouchEvent, distance: number) => void\n    onSwipeUp?: (event: TouchEvent, distance: number) => void\n    onSwipeDown?: (event: TouchEvent, distance: number) => void\n    onDragStart?: (event: TouchEvent) => void\n    onDragMove?: (event: TouchEvent, deltaX: number, deltaY: number) => void\n    onDragEnd?: (event: TouchEvent) => void\n    onPinchStart?: (event: TouchEvent) => void\n    onPinchMove?: (event: TouchEvent, scale: number) => void\n    onPinchEnd?: (event: TouchEvent) => void\n}\n\ninterface TouchPoint {\n    x: number\n    y: number\n    timestamp: number\n}\n\nexport function useGestures(\n    options: GestureOptions = {},\n    callbacks: GestureCallbacks = {}\n) {\n    const elementRef = useRef<HTMLElement>(null)\n    \n    // 手势状态\n    const [isPressed, setIsPressed] = useState(false)\n    const [isDragging, setIsDragging] = useState(false)\n    const [isPinching, setIsPinching] = useState(false)\n    \n    // 触摸点状态\n    const touchStartRef = useRef<TouchPoint | null>(null)\n    const touchMoveRef = useRef<TouchPoint | null>(null)\n    const lastTapRef = useRef<TouchPoint | null>(null)\n    const longPressTimerRef = useRef<NodeJS.Timeout | null>(null)\n    const dragStartRef = useRef<TouchPoint | null>(null)\n    const pinchStartDistanceRef = useRef<number>(0)\n    \n    // 默认配置\n    const {\n        enableTap = true,\n        tapThreshold = 10,\n        enableLongPress = false,\n        longPressDelay = 500,\n        enableSwipe = false,\n        swipeThreshold = 50,\n        swipeVelocityThreshold = 0.3,\n        enableDrag = false,\n        dragThreshold = 10,\n        preventDefault = true,\n        passive = false\n    } = options\n\n    // 计算两点距离\n    const getDistance = useCallback((point1: TouchPoint, point2: TouchPoint) => {\n        const dx = point2.x - point1.x\n        const dy = point2.y - point1.y\n        return Math.sqrt(dx * dx + dy * dy)\n    }, [])\n\n    // 计算触摸点中心距离（用于双指手势）\n    const getTouchDistance = useCallback((touches: TouchList) => {\n        if (touches.length < 2) return 0\n        \n        const touch1 = touches[0]\n        const touch2 = touches[1]\n        const dx = touch1.clientX - touch2.clientX\n        const dy = touch1.clientY - touch2.clientY\n        \n        return Math.sqrt(dx * dx + dy * dy)\n    }, [])\n\n    // 清除长按定时器\n    const clearLongPressTimer = useCallback(() => {\n        if (longPressTimerRef.current) {\n            clearTimeout(longPressTimerRef.current)\n            longPressTimerRef.current = null\n        }\n    }, [])\n\n    // 触摸开始\n    const handleTouchStart = useCallback((event: TouchEvent) => {\n        if (preventDefault && !passive) {\n            event.preventDefault()\n        }\n\n        const touch = event.touches[0]\n        const now = Date.now()\n        \n        const touchPoint: TouchPoint = {\n            x: touch.clientX,\n            y: touch.clientY,\n            timestamp: now\n        }\n\n        touchStartRef.current = touchPoint\n        setIsPressed(true)\n\n        // 检测双指手势\n        if (event.touches.length === 2) {\n            const distance = getTouchDistance(event.touches)\n            pinchStartDistanceRef.current = distance\n            setIsPinching(true)\n            callbacks.onPinchStart?.(event)\n            return\n        }\n\n        // 长按检测\n        if (enableLongPress && callbacks.onLongPress) {\n            longPressTimerRef.current = setTimeout(() => {\n                callbacks.onLongPress?.(event)\n                clearLongPressTimer()\n            }, longPressDelay)\n        }\n\n        // 拖拽准备\n        if (enableDrag) {\n            dragStartRef.current = touchPoint\n        }\n    }, [\n        preventDefault, passive, enableLongPress, enableDrag, \n        longPressDelay, callbacks, getTouchDistance, clearLongPressTimer\n    ])\n\n    // 触摸移动\n    const handleTouchMove = useCallback((event: TouchEvent) => {\n        if (!touchStartRef.current) return\n\n        if (preventDefault && !passive) {\n            event.preventDefault()\n        }\n\n        const touch = event.touches[0]\n        const now = Date.now()\n        \n        const touchPoint: TouchPoint = {\n            x: touch.clientX,\n            y: touch.clientY,\n            timestamp: now\n        }\n\n        touchMoveRef.current = touchPoint\n\n        // 双指缩放\n        if (isPinching && event.touches.length === 2) {\n            const currentDistance = getTouchDistance(event.touches)\n            const scale = currentDistance / pinchStartDistanceRef.current\n            callbacks.onPinchMove?.(event, scale)\n            return\n        }\n\n        // 计算移动距离\n        const distance = getDistance(touchStartRef.current, touchPoint)\n\n        // 如果移动距离超过阈值，清除长按\n        if (distance > tapThreshold) {\n            clearLongPressTimer()\n        }\n\n        // 拖拽处理\n        if (enableDrag && dragStartRef.current) {\n            const dragDistance = getDistance(dragStartRef.current, touchPoint)\n            \n            if (!isDragging && dragDistance > dragThreshold) {\n                setIsDragging(true)\n                callbacks.onDragStart?.(event)\n            }\n            \n            if (isDragging) {\n                const deltaX = touchPoint.x - dragStartRef.current.x\n                const deltaY = touchPoint.y - dragStartRef.current.y\n                callbacks.onDragMove?.(event, deltaX, deltaY)\n            }\n        }\n    }, [\n        preventDefault, passive, enableDrag, dragThreshold, tapThreshold,\n        isPinching, isDragging, callbacks, getDistance, getTouchDistance, \n        clearLongPressTimer\n    ])\n\n    // 触摸结束\n    const handleTouchEnd = useCallback((event: TouchEvent) => {\n        if (preventDefault && !passive) {\n            event.preventDefault()\n        }\n\n        setIsPressed(false)\n        clearLongPressTimer()\n\n        // 双指手势结束\n        if (isPinching) {\n            setIsPinching(false)\n            callbacks.onPinchEnd?.(event)\n            pinchStartDistanceRef.current = 0\n        }\n\n        // 拖拽结束\n        if (isDragging) {\n            setIsDragging(false)\n            callbacks.onDragEnd?.(event)\n        }\n\n        // 重置拖拽状态\n        dragStartRef.current = null\n\n        if (!touchStartRef.current || !touchMoveRef.current) {\n            touchStartRef.current = null\n            touchMoveRef.current = null\n            return\n        }\n\n        const startPoint = touchStartRef.current\n        const endPoint = touchMoveRef.current || startPoint\n        const distance = getDistance(startPoint, endPoint)\n        const timeDiff = endPoint.timestamp - startPoint.timestamp\n        const velocity = distance / timeDiff\n\n        // 点击检测\n        if (enableTap && distance < tapThreshold && !isDragging) {\n            const now = Date.now()\n            \n            // 双击检测\n            if (lastTapRef.current && \n                now - lastTapRef.current.timestamp < 300 &&\n                getDistance(lastTapRef.current, endPoint) < tapThreshold) {\n                callbacks.onDoubleTap?.(event)\n                lastTapRef.current = null\n            } else {\n                callbacks.onTap?.(event)\n                lastTapRef.current = endPoint\n            }\n        }\n\n        // 滑动检测\n        if (enableSwipe && distance > swipeThreshold && velocity > swipeVelocityThreshold) {\n            const deltaX = endPoint.x - startPoint.x\n            const deltaY = endPoint.y - startPoint.y\n            const absX = Math.abs(deltaX)\n            const absY = Math.abs(deltaY)\n\n            if (absX > absY) {\n                // 水平滑动\n                if (deltaX > 0) {\n                    callbacks.onSwipeRight?.(event, distance)\n                } else {\n                    callbacks.onSwipeLeft?.(event, distance)\n                }\n            } else {\n                // 垂直滑动\n                if (deltaY > 0) {\n                    callbacks.onSwipeDown?.(event, distance)\n                } else {\n                    callbacks.onSwipeUp?.(event, distance)\n                }\n            }\n        }\n\n        // 重置状态\n        touchStartRef.current = null\n        touchMoveRef.current = null\n    }, [\n        preventDefault, passive, enableTap, enableSwipe, tapThreshold, \n        swipeThreshold, swipeVelocityThreshold, isPinching, isDragging,\n        callbacks, getDistance, clearLongPressTimer\n    ])\n\n    // 绑定事件监听器\n    useEffect(() => {\n        const element = elementRef.current\n        if (!element) return\n\n        const touchStartOptions = { passive, capture: false }\n        const touchMoveOptions = { passive, capture: false }\n        const touchEndOptions = { passive, capture: false }\n\n        element.addEventListener('touchstart', handleTouchStart, touchStartOptions)\n        element.addEventListener('touchmove', handleTouchMove, touchMoveOptions)\n        element.addEventListener('touchend', handleTouchEnd, touchEndOptions)\n\n        return () => {\n            element.removeEventListener('touchstart', handleTouchStart)\n            element.removeEventListener('touchmove', handleTouchMove)\n            element.removeEventListener('touchend', handleTouchEnd)\n        }\n    }, [handleTouchStart, handleTouchMove, handleTouchEnd, passive])\n\n    // 清理函数\n    useEffect(() => {\n        return () => {\n            clearLongPressTimer()\n        }\n    }, [clearLongPressTimer])\n\n    return {\n        elementRef,\n        gestureState: {\n            isPressed,\n            isDragging,\n            isPinching\n        }\n    }\n}\n\n/**\n * 简化版本的手势Hook，只支持最常用的手势\n */\nexport function useSimpleGestures(callbacks: {\n    onTap?: () => void\n    onSwipeLeft?: () => void\n    onSwipeRight?: () => void\n}) {\n    return useGestures(\n        {\n            enableTap: true,\n            enableSwipe: true,\n            tapThreshold: 10,\n            swipeThreshold: 50\n        },\n        {\n            onTap: callbacks.onTap,\n            onSwipeLeft: callbacks.onSwipeLeft,\n            onSwipeRight: callbacks.onSwipeRight\n        }\n    )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useTouchFeedback.ts"],"sourcesContent":["'use client'\n\nimport { useRef, useCallback, useEffect } from 'react'\n\n/**\n * 移动端触控反馈Hook - useTouchFeedback\n * \n * 为移动端组件提供触控反馈效果\n * 包括视觉反馈、触觉震动、波纹效果等\n * \n * 设计目标：\n * - 原生般的触控反馈体验\n * - 可配置的反馈类型和强度\n * - 性能优化的动画效果\n * - 无障碍访问支持\n */\n\ninterface TouchFeedbackOptions {\n    // 视觉反馈\n    enableVisualFeedback?: boolean\n    scaleOnPress?: number\n    pressedOpacity?: number\n    animationDuration?: number\n    \n    // 触觉反馈\n    enableHapticFeedback?: boolean\n    hapticType?: 'light' | 'medium' | 'heavy' | 'selection' | 'impact'\n    \n    // 波纹效果\n    enableRipple?: boolean\n    rippleColor?: string\n    rippleDuration?: number\n    \n    // 声音反馈\n    enableSoundFeedback?: boolean\n    soundType?: 'tap' | 'click' | 'success' | 'error'\n    \n    // 性能优化\n    throttleDelay?: number\n    disabled?: boolean\n}\n\ninterface RippleEffect {\n    id: string\n    x: number\n    y: number\n    timestamp: number\n}\n\nexport function useTouchFeedback(options: TouchFeedbackOptions = {}) {\n    const elementRef = useRef<HTMLElement>(null)\n    const ripplesRef = useRef<RippleEffect[]>([])\n    const lastFeedbackRef = useRef<number>(0)\n    const pressedRef = useRef<boolean>(false)\n    \n    // 默认配置\n    const {\n        enableVisualFeedback = true,\n        scaleOnPress = 0.95,\n        pressedOpacity = 0.8,\n        animationDuration = 150,\n        enableHapticFeedback = true,\n        hapticType = 'light',\n        enableRipple = false,\n        rippleColor = 'rgba(255, 255, 255, 0.3)',\n        rippleDuration = 600,\n        enableSoundFeedback = false,\n        soundType = 'tap',\n        throttleDelay = 50,\n        disabled = false\n    } = options\n\n    // 触觉反馈\n    const triggerHapticFeedback = useCallback(() => {\n        if (!enableHapticFeedback || disabled) return\n        \n        try {\n            if ('vibrate' in navigator) {\n                // 标准振动API\n                switch (hapticType) {\n                    case 'light':\n                        navigator.vibrate(10)\n                        break\n                    case 'medium':\n                        navigator.vibrate(20)\n                        break\n                    case 'heavy':\n                        navigator.vibrate(40)\n                        break\n                    case 'selection':\n                        navigator.vibrate([5, 5])\n                        break\n                    case 'impact':\n                        navigator.vibrate([10, 5, 10])\n                        break\n                }\n            }\n            \n            // iOS设备的触觉反馈（如果支持）\n            if ('DeviceMotionEvent' in window && 'requestPermission' in (DeviceMotionEvent as any)) {\n                // iOS 13+的触觉反馈\n                // 这需要在用户交互后才能使用\n            }\n        } catch (error) {\n            console.warn('Haptic feedback not supported:', error)\n        }\n    }, [enableHapticFeedback, hapticType, disabled])\n\n    // 声音反馈\n    const triggerSoundFeedback = useCallback(() => {\n        if (!enableSoundFeedback || disabled) return\n        \n        try {\n            // 使用Web Audio API播放反馈音\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()\n            const oscillator = audioContext.createOscillator()\n            const gainNode = audioContext.createGain()\n            \n            oscillator.connect(gainNode)\n            gainNode.connect(audioContext.destination)\n            \n            // 根据声音类型设置频率\n            switch (soundType) {\n                case 'tap':\n                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime)\n                    break\n                case 'click':\n                    oscillator.frequency.setValueAtTime(1000, audioContext.currentTime)\n                    break\n                case 'success':\n                    oscillator.frequency.setValueAtTime(1200, audioContext.currentTime)\n                    break\n                case 'error':\n                    oscillator.frequency.setValueAtTime(400, audioContext.currentTime)\n                    break\n            }\n            \n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime)\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1)\n            \n            oscillator.start(audioContext.currentTime)\n            oscillator.stop(audioContext.currentTime + 0.1)\n            \n        } catch (error) {\n            console.warn('Sound feedback not supported:', error)\n        }\n    }, [enableSoundFeedback, soundType, disabled])\n\n    // 视觉反馈\n    const applyVisualFeedback = useCallback((pressed: boolean) => {\n        const element = elementRef.current\n        if (!element || !enableVisualFeedback || disabled) return\n\n        if (pressed) {\n            element.style.transform = `scale(${scaleOnPress})`\n            element.style.opacity = pressedOpacity.toString()\n            element.style.transition = `all ${animationDuration}ms cubic-bezier(0.4, 0, 0.2, 1)`\n        } else {\n            element.style.transform = 'scale(1)'\n            element.style.opacity = '1'\n            element.style.transition = `all ${animationDuration}ms cubic-bezier(0.4, 0, 0.2, 1)`\n        }\n    }, [enableVisualFeedback, scaleOnPress, pressedOpacity, animationDuration, disabled])\n\n    // 波纹效果\n    const createRipple = useCallback((x: number, y: number) => {\n        if (!enableRipple || disabled) return\n\n        const element = elementRef.current\n        if (!element) return\n\n        const rect = element.getBoundingClientRect()\n        const relativeX = x - rect.left\n        const relativeY = y - rect.top\n\n        const ripple: RippleEffect = {\n            id: `ripple-${Date.now()}-${Math.random()}`,\n            x: relativeX,\n            y: relativeY,\n            timestamp: Date.now()\n        }\n\n        ripplesRef.current.push(ripple)\n\n        // 创建波纹元素\n        const rippleElement = document.createElement('div')\n        rippleElement.style.position = 'absolute'\n        rippleElement.style.left = `${relativeX}px`\n        rippleElement.style.top = `${relativeY}px`\n        rippleElement.style.width = '0'\n        rippleElement.style.height = '0'\n        rippleElement.style.borderRadius = '50%'\n        rippleElement.style.background = rippleColor\n        rippleElement.style.transform = 'translate(-50%, -50%)'\n        rippleElement.style.pointerEvents = 'none'\n        rippleElement.style.zIndex = '1'\n        rippleElement.style.animation = `ripple-expand ${rippleDuration}ms cubic-bezier(0.4, 0, 0.2, 1)`\n\n        // 确保元素有相对定位\n        const computedStyle = window.getComputedStyle(element)\n        if (computedStyle.position === 'static') {\n            element.style.position = 'relative'\n        }\n\n        element.appendChild(rippleElement)\n\n        // 添加CSS动画\n        if (!document.getElementById('ripple-styles')) {\n            const style = document.createElement('style')\n            style.id = 'ripple-styles'\n            style.textContent = `\n                @keyframes ripple-expand {\n                    0% {\n                        width: 0;\n                        height: 0;\n                        opacity: 1;\n                    }\n                    100% {\n                        width: 200px;\n                        height: 200px;\n                        opacity: 0;\n                    }\n                }\n            `\n            document.head.appendChild(style)\n        }\n\n        // 清理波纹元素\n        setTimeout(() => {\n            if (rippleElement.parentNode) {\n                rippleElement.parentNode.removeChild(rippleElement)\n            }\n            ripplesRef.current = ripplesRef.current.filter(r => r.id !== ripple.id)\n        }, rippleDuration)\n\n    }, [enableRipple, rippleColor, rippleDuration, disabled])\n\n    // 节流处理\n    const isThrottled = useCallback(() => {\n        const now = Date.now()\n        if (now - lastFeedbackRef.current < throttleDelay) {\n            return true\n        }\n        lastFeedbackRef.current = now\n        return false\n    }, [throttleDelay])\n\n    // 触摸开始处理\n    const handleTouchStart = useCallback((event: TouchEvent | MouseEvent) => {\n        if (disabled || isThrottled()) return\n\n        pressedRef.current = true\n        applyVisualFeedback(true)\n        triggerHapticFeedback()\n        triggerSoundFeedback()\n\n        // 获取触摸点坐标\n        let clientX: number, clientY: number\n        if ('touches' in event) {\n            const touch = event.touches[0]\n            clientX = touch.clientX\n            clientY = touch.clientY\n        } else {\n            clientX = event.clientX\n            clientY = event.clientY\n        }\n\n        createRipple(clientX, clientY)\n    }, [disabled, isThrottled, applyVisualFeedback, triggerHapticFeedback, triggerSoundFeedback, createRipple])\n\n    // 触摸结束处理\n    const handleTouchEnd = useCallback(() => {\n        if (disabled) return\n\n        pressedRef.current = false\n        applyVisualFeedback(false)\n    }, [disabled, applyVisualFeedback])\n\n    // 触摸取消处理\n    const handleTouchCancel = useCallback(() => {\n        if (disabled) return\n\n        pressedRef.current = false\n        applyVisualFeedback(false)\n    }, [disabled, applyVisualFeedback])\n\n    // 绑定事件监听器\n    useEffect(() => {\n        const element = elementRef.current\n        if (!element || disabled) return\n\n        // 触摸事件\n        element.addEventListener('touchstart', handleTouchStart, { passive: true })\n        element.addEventListener('touchend', handleTouchEnd, { passive: true })\n        element.addEventListener('touchcancel', handleTouchCancel, { passive: true })\n\n        // 鼠标事件（用于桌面测试）\n        element.addEventListener('mousedown', handleTouchStart)\n        element.addEventListener('mouseup', handleTouchEnd)\n        element.addEventListener('mouseleave', handleTouchCancel)\n\n        return () => {\n            element.removeEventListener('touchstart', handleTouchStart)\n            element.removeEventListener('touchend', handleTouchEnd)\n            element.removeEventListener('touchcancel', handleTouchCancel)\n            element.removeEventListener('mousedown', handleTouchStart)\n            element.removeEventListener('mouseup', handleTouchEnd)\n            element.removeEventListener('mouseleave', handleTouchCancel)\n        }\n    }, [handleTouchStart, handleTouchEnd, handleTouchCancel, disabled])\n\n    // 清理函数\n    useEffect(() => {\n        return () => {\n            // 清理所有波纹效果\n            ripplesRef.current = []\n            \n            // 重置视觉状态\n            const element = elementRef.current\n            if (element) {\n                element.style.transform = ''\n                element.style.opacity = ''\n                element.style.transition = ''\n            }\n        }\n    }, [])\n\n    return {\n        elementRef,\n        isPressed: pressedRef.current,\n        triggerFeedback: handleTouchStart,\n        // 手动控制方法\n        startFeedback: () => handleTouchStart({} as TouchEvent),\n        endFeedback: handleTouchEnd,\n        // 配置方法\n        updateOptions: (newOptions: Partial<TouchFeedbackOptions>) => {\n            Object.assign(options, newOptions)\n        }\n    }\n}\n\n/**\n * 简化版本的触控反馈Hook，使用默认配置\n */\nexport function useSimpleTouchFeedback(enabled: boolean = true) {\n    return useTouchFeedback({\n        enableVisualFeedback: enabled,\n        enableHapticFeedback: enabled,\n        disabled: !enabled\n    })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 786, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/config.ts"],"sourcesContent":["/**\n * 统一的服务配置管理\n * 所有域名和端口配置的单一入口\n */\n\n// 前端服务配置\nconst FRONTEND_DOMAIN = process.env.NEXT_PUBLIC_FRONTEND_DOMAIN || 'localhost'\nconst FRONTEND_PORT = process.env.NEXT_PUBLIC_FRONTEND_PORT || '80'\nconst FRONTEND_PROTOCOL = process.env.NEXT_PUBLIC_FRONTEND_PROTOCOL || 'http'\n\n// 后端服务配置\nconst BACKEND_DOMAIN = process.env.NEXT_PUBLIC_BACKEND_DOMAIN || 'localhost'\nconst BACKEND_PORT = process.env.NEXT_PUBLIC_BACKEND_PORT || '1337'\nconst BACKEND_PROTOCOL = process.env.NEXT_PUBLIC_BACKEND_PROTOCOL || 'http'\n\n// 搜索服务配置（前端调用后端API，不直接访问MeiliSearch）\nconst SEARCH_DOMAIN = process.env.NEXT_PUBLIC_SEARCH_DOMAIN || 'localhost'\nconst SEARCH_PORT = process.env.NEXT_PUBLIC_SEARCH_PORT || '7700'\nconst SEARCH_PROTOCOL = process.env.NEXT_PUBLIC_SEARCH_PROTOCOL || 'http'\n\n/**\n * 构建完整的服务URL\n */\nfunction buildUrl(domain: string, port: string, protocol: string, path: string = ''): string {\n    const portSuffix = (\n        (protocol === 'http' && port === '80') || \n        (protocol === 'https' && port === '443')\n    ) ? '' : `:${port}`\n    \n    const baseUrl = `${protocol}://${domain}${portSuffix}`\n    return path ? `${baseUrl}${path.startsWith('/') ? path : `/${path}`}` : baseUrl\n}\n\n/**\n * 服务URL配置\n */\nexport const config = {\n    // 前端服务\n    frontend: {\n        domain: FRONTEND_DOMAIN,\n        port: FRONTEND_PORT, \n        protocol: FRONTEND_PROTOCOL,\n        url: buildUrl(FRONTEND_DOMAIN, FRONTEND_PORT, FRONTEND_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(FRONTEND_DOMAIN, FRONTEND_PORT, FRONTEND_PROTOCOL, path)\n    },\n    \n    // 后端服务\n    backend: {\n        domain: BACKEND_DOMAIN,\n        port: BACKEND_PORT,\n        protocol: BACKEND_PROTOCOL, \n        url: buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL, path),\n        apiUrl: buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL, '/api')\n    },\n    \n    // 搜索服务（注意：前端不直接访问，通过后端代理）\n    search: {\n        domain: SEARCH_DOMAIN,\n        port: SEARCH_PORT,\n        protocol: SEARCH_PROTOCOL,\n        url: buildUrl(SEARCH_DOMAIN, SEARCH_PORT, SEARCH_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(SEARCH_DOMAIN, SEARCH_PORT, SEARCH_PROTOCOL, path)\n    }\n}\n\n/**\n * 向后兼容的环境变量（逐步迁移）\n * @deprecated 请使用 config 对象替代\n */\nexport const legacyConfig = {\n    STRAPI_URL: config.backend.url,\n    STRAPI_API_URL: config.backend.apiUrl,\n    SITE_URL: config.frontend.url,\n    MEILISEARCH_URL: config.search.url\n}\n\n/**\n * NextAuth配置\n */\nexport const authConfig = {\n    NEXTAUTH_URL: config.frontend.url,\n    callbacks: {\n        github: config.frontend.getUrl('/api/auth/callback/github'),\n        google: config.frontend.getUrl('/api/auth/callback/google'),\n        wechat: config.frontend.getUrl('/api/auth/callback/wechat'),\n        qq: config.frontend.getUrl('/api/auth/callback/qq')\n    }\n}\n\nexport default config"],"names":[],"mappings":"AAAA;;;CAGC,GAED,SAAS;;;;;;;AACT,MAAM,kBAAkB,iDAA2C;AACnE,MAAM,gBAAgB,0CAAyC;AAC/D,MAAM,oBAAoB,4CAA6C;AAEvE,SAAS;AACT,MAAM,iBAAiB,iDAA0C;AACjE,MAAM,eAAe,4CAAwC;AAC7D,MAAM,mBAAmB,4CAA4C;AAErE,qCAAqC;AACrC,MAAM,gBAAgB,iDAAyC;AAC/D,MAAM,cAAc,4CAAuC;AAC3D,MAAM,kBAAkB,4CAA2C;AAEnE;;CAEC,GACD,SAAS,SAAS,MAAc,EAAE,IAAY,EAAE,QAAgB,EAAE,OAAe,EAAE;IAC/E,MAAM,aAAa,AACf,AAAC,aAAa,UAAU,SAAS,QAChC,aAAa,WAAW,SAAS,QAClC,KAAK,CAAC,CAAC,EAAE,MAAM;IAEnB,MAAM,UAAU,GAAG,SAAS,GAAG,EAAE,SAAS,YAAY;IACtD,OAAO,OAAO,GAAG,UAAU,KAAK,UAAU,CAAC,OAAO,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG;AAC5E;AAKO,MAAM,SAAS;IAClB,OAAO;IACP,UAAU;QACN,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,iBAAiB,eAAe;QAC9C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,iBAAiB,eAAe,mBAAmB;IAC/F;IAEA,OAAO;IACP,SAAS;QACL,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,gBAAgB,cAAc;QAC5C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,gBAAgB,cAAc,kBAAkB;QACxF,QAAQ,SAAS,gBAAgB,cAAc,kBAAkB;IACrE;IAEA,0BAA0B;IAC1B,QAAQ;QACJ,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,eAAe,aAAa;QAC1C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,eAAe,aAAa,iBAAiB;IACzF;AACJ;AAMO,MAAM,eAAe;IACxB,YAAY,OAAO,OAAO,CAAC,GAAG;IAC9B,gBAAgB,OAAO,OAAO,CAAC,MAAM;IACrC,UAAU,OAAO,QAAQ,CAAC,GAAG;IAC7B,iBAAiB,OAAO,MAAM,CAAC,GAAG;AACtC;AAKO,MAAM,aAAa;IACtB,cAAc,OAAO,QAAQ,CAAC,GAAG;IACjC,WAAW;QACP,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,IAAI,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC/B;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 861, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/meilisearch.ts"],"sourcesContent":["/**\n * MeiliSearch 前端API客户端\n * \n * 提供与后端MeiliSearch服务交互的统一接口\n * 包括搜索、建议、统计等功能\n */\n\nimport { config } from './config'\n\n// MeiliSearch搜索结果类型定义\nexport interface MeiliSearchArticle {\n    id: number\n    documentId: string\n    title: string\n    slug: string\n    excerpt: string | null\n    featuredImage?: {\n        id: number\n        documentId: string\n        name: string\n        url: string\n        width: number\n        height: number\n        alternativeText?: string | null\n    } | string | null\n    author?: {\n        id: number\n        documentId: string\n        name: string\n        slug: string\n        avatar?: {\n            url: string\n            alternativeText?: string | null\n        } | null\n    } | null\n    category?: {\n        id: number\n        documentId: string\n        name: string\n        slug: string\n    } | null\n    tags?: Array<{\n        id: number\n        documentId: string\n        name: string\n        slug: string\n    }>\n    publishedAt: string\n    viewCount: number\n    readingTime: number\n    featured: boolean\n    isPremium: boolean\n    // MeiliSearch特有的高亮字段\n    _formatted?: {\n        title?: string\n        excerpt?: string\n        content?: string\n    }\n}\n\n// 搜索建议类型\nexport interface MeiliSearchSuggestion {\n    id: string\n    text: string\n    type: 'article' | 'author' | 'category' | 'tag'\n    category?: string\n    metadata?: {\n        slug?: string\n        count?: number\n        icon?: string\n    }\n}\n\n// 搜索参数接口\nexport interface SearchParams {\n    query?: string\n    page?: number\n    pageSize?: number\n    category?: string\n    tags?: string | string[]\n    author?: string\n    featured?: boolean\n    sortBy?: 'relevance' | 'publishedAt' | 'viewCount'\n    sortOrder?: 'asc' | 'desc'\n    highlight?: boolean\n    facets?: boolean\n}\n\n// 搜索响应接口\nexport interface SearchResponse {\n    articles: MeiliSearchArticle[]\n    pagination: {\n        page: number\n        pageSize: number\n        pageCount: number\n        total: number\n    }\n    meta: {\n        query: string\n        processingTimeMs: number\n        facetDistribution?: Record<string, Record<string, number>>\n    }\n}\n\n// 搜索建议响应接口\nexport interface SuggestionsResponse {\n    suggestions: MeiliSearchSuggestion[]\n    meta: {\n        query: string\n        total: number\n    }\n}\n\n// 搜索统计响应接口\nexport interface SearchStatsResponse {\n    totalDocuments: number\n    isIndexing: boolean\n    fieldDistribution: Record<string, number>\n    lastUpdate: string\n}\n\n// API配置\nconst STRAPI_URL = config.backend.url\n\n/**\n * MeiliSearch API客户端类\n */\nclass MeiliSearchClient {\n    private baseUrl: string\n\n    constructor() {\n        this.baseUrl = `${STRAPI_URL}/api/search`\n    }\n\n    /**\n     * 执行HTTP请求的通用方法\n     */\n    private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n        const url = `${this.baseUrl}${endpoint}`\n\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                ...options,\n            })\n\n            if (!response.ok) {\n                throw new Error(`MeiliSearch API请求失败: ${response.status} ${response.statusText}`)\n            }\n\n            const data = await response.json()\n\n            if (data.error) {\n                throw new Error(data.error.message || 'MeiliSearch API错误')\n            }\n\n            return data\n        } catch (error) {\n            console.error('MeiliSearch API请求错误:', error)\n            throw error\n        }\n    }\n\n    /**\n     * 文章搜索\n     */\n    async searchArticles(params: SearchParams = {}): Promise<SearchResponse> {\n        const searchParams = new URLSearchParams()\n\n        // 构建查询参数\n        if (params.query) searchParams.append('q', params.query)\n        if (params.page) searchParams.append('page', params.page.toString())\n        if (params.pageSize) searchParams.append('pageSize', params.pageSize.toString())\n        if (params.category) searchParams.append('category', params.category)\n        if (params.author) searchParams.append('author', params.author)\n        if (params.featured !== undefined) searchParams.append('featured', params.featured.toString())\n        if (params.sortBy) searchParams.append('sortBy', params.sortBy)\n        if (params.sortOrder) searchParams.append('sortOrder', params.sortOrder)\n        if (params.highlight !== undefined) searchParams.append('highlight', params.highlight.toString())\n        if (params.facets !== undefined) searchParams.append('facets', params.facets.toString())\n\n        // 处理标签参数（支持数组）\n        if (params.tags) {\n            const tagsArray = Array.isArray(params.tags) ? params.tags : [params.tags]\n            tagsArray.forEach(tag => searchParams.append('tags', tag))\n        }\n\n        const endpoint = `/articles?${searchParams.toString()}`\n        const response = await this.request<{\n            data: {\n                hits: MeiliSearchArticle[]\n                query: string\n                limit: number\n                offset: number\n                estimatedTotalHits: number\n                totalPages: number\n                currentPage: number\n                processingTimeMs: number\n            }\n            meta: {\n                query: string\n                limit: number\n                offset: number\n            }\n        }>(endpoint)\n\n        return {\n            articles: response.data.hits, // 修复：使用hits数组\n            pagination: {\n                page: response.data.currentPage,\n                pageSize: response.data.limit,\n                pageCount: response.data.totalPages,\n                total: response.data.estimatedTotalHits\n            },\n            meta: {\n                query: response.data.query,\n                processingTimeMs: response.data.processingTimeMs\n            }\n        }\n    }\n\n    /**\n     * 获取搜索建议\n     */\n    async getSuggestions(query: string, limit: number = 5): Promise<SuggestionsResponse> {\n        if (!query.trim()) {\n            return {\n                suggestions: [],\n                meta: { query: '', total: 0 }\n            }\n        }\n\n        const searchParams = new URLSearchParams({\n            q: query.trim(),\n            limit: limit.toString()\n        })\n\n        const endpoint = `/suggestions?${searchParams.toString()}`\n        const response = await this.request<{\n            data: any[]\n            meta: {\n                query: string\n                total: number\n            }\n        }>(endpoint)\n\n        // 转换后端响应为前端格式\n        const suggestions: MeiliSearchSuggestion[] = response.data.map((item, index) => ({\n            id: `suggestion-${index}`,\n            text: item.title || item.name || item.text,\n            type: item.type || 'article',\n            category: item.category?.name,\n            metadata: {\n                slug: item.slug,\n                count: item.count\n            }\n        }))\n\n        return {\n            suggestions,\n            meta: response.meta\n        }\n    }\n\n    /**\n     * 获取搜索统计信息\n     */\n    async getSearchStats(): Promise<SearchStatsResponse> {\n        const endpoint = '/stats'\n        const response = await this.request<{\n            data: SearchStatsResponse\n            meta: {\n                timestamp: string\n            }\n        }>(endpoint)\n\n        return response.data\n    }\n\n    /**\n     * 检查搜索服务健康状态\n     */\n    async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy', message?: string }> {\n        try {\n            const endpoint = '/health'\n            const response = await this.request<{\n                data: {\n                    status: 'available' | 'unhealthy' // 修复：后端返回'available'\n                    message?: string\n                }\n            }>(endpoint)\n\n            // 修复：将'available'映射为'healthy'以兼容前端逻辑\n            return {\n                status: response.data.status === 'available' ? 'healthy' : 'unhealthy',\n                message: response.data.message\n            }\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                message: error instanceof Error ? error.message : '搜索服务不可用'\n            }\n        }\n    }\n\n    /**\n     * 重建搜索索引\n     */\n    async reindexArticles(): Promise<{ message: string, syncedArticles: number }> {\n        const endpoint = '/reindex'\n        const response = await this.request<{\n            data: {\n                message: string\n                syncedArticles: number\n            }\n        }>(endpoint, { method: 'POST' })\n\n        return response.data\n    }\n}\n\n// 创建单例实例\nconst meilisearchClient = new MeiliSearchClient()\n\n// 导出便捷函数\nexport const searchArticles = (params?: SearchParams) => meilisearchClient.searchArticles(params)\nexport const getSuggestions = (query: string, limit?: number) => meilisearchClient.getSuggestions(query, limit)\nexport const getSearchStats = () => meilisearchClient.getSearchStats()\nexport const checkSearchHealth = () => meilisearchClient.healthCheck()\nexport const reindexArticles = () => meilisearchClient.reindexArticles()\n\n// 导出客户端实例（用于更复杂的用法）\nexport default meilisearchClient\n\n// 搜索历史管理\nexport class SearchHistoryManager {\n    private static readonly STORAGE_KEY = 'meilisearch-history'\n    private static readonly MAX_HISTORY = 10\n\n    /**\n     * 添加搜索记录到历史\n     */\n    static addToHistory(query: string): void {\n        if (!query.trim()) return\n\n        try {\n            const history = this.getHistory()\n\n            // 移除重复项\n            const filteredHistory = history.filter(item => item.query !== query.trim())\n\n            // 添加新记录到顶部\n            const newHistory = [\n                {\n                    id: `history-${Date.now()}`,\n                    query: query.trim(),\n                    timestamp: new Date().toISOString(),\n                    count: 1\n                },\n                ...filteredHistory\n            ].slice(0, this.MAX_HISTORY)\n\n            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newHistory))\n        } catch (error) {\n            console.warn('保存搜索历史失败:', error)\n        }\n    }\n\n    /**\n     * 获取搜索历史\n     */\n    static getHistory(): Array<{\n        id: string\n        query: string\n        timestamp: string\n        count: number\n    }> {\n        try {\n            const saved = localStorage.getItem(this.STORAGE_KEY)\n            return saved ? JSON.parse(saved) : []\n        } catch (error) {\n            console.warn('读取搜索历史失败:', error)\n            return []\n        }\n    }\n\n    /**\n     * 清空搜索历史\n     */\n    static clearHistory(): void {\n        try {\n            localStorage.removeItem(this.STORAGE_KEY)\n        } catch (error) {\n            console.warn('清空搜索历史失败:', error)\n        }\n    }\n\n    /**\n     * 获取热门搜索词（基于历史记录）\n     */\n    static getPopularSearches(limit: number = 6): Array<{\n        id: string\n        text: string\n        count: number\n    }> {\n        const history = this.getHistory()\n\n        // 统计搜索频次\n        const searchCounts = new Map<string, number>()\n        history.forEach(item => {\n            const current = searchCounts.get(item.query) || 0\n            searchCounts.set(item.query, current + item.count)\n        })\n\n        // 排序并转换格式\n        return Array.from(searchCounts.entries())\n            .sort(([, a], [, b]) => b - a)\n            .slice(0, limit)\n            .map(([query, count], index) => ({\n                id: `popular-${index}`,\n                text: query,\n                count\n            }))\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1094, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/strapi.ts"],"sourcesContent":["/**\n * Strapi API 客户端\n * 处理与Strapi CMS的所有API交互\n */\n\nimport { ArticleCardData } from '@/components/molecules/ArticleCard/ArticleCard'\nimport { config } from './config'\n\n// SiteConfig相关类型定义\ninterface StrapiSiteConfig {\n    id: number\n    documentId: string\n    siteName: string\n    siteDescription: string\n    siteUrl: string\n    googleVerificationCode?: string | null\n    baiduVerificationCode?: string | null\n    bingVerificationCode?: string | null\n    yandexVerificationCode?: string | null\n    twitterHandle?: string | null\n    googleSubmissionStatus: '未提交' | '已提交' | '待审核' | '已收录'\n    baiduSubmissionStatus: '未提交' | '已提交' | '待审核' | '已收录'\n    lastSitemapUpdate?: string | null\n    enablePerformanceTracking: boolean\n    enableIndexingMonitoring: boolean\n    primaryKeywords?: string | null\n    analyticsId?: string | null\n    gscPropertyUrl?: string | null\n    baiduSiteToken?: string | null\n    defaultOgImage?: {\n        id: number\n        documentId: string\n        name: string\n        url: string\n        width: number\n        height: number\n        alternativeText?: string | null\n    } | null\n    createdAt: string\n    updatedAt: string\n}\n\n// 前端使用的SiteConfig类型\ninterface SiteConfigData {\n    siteName: string\n    siteDescription: string\n    siteUrl: string\n    twitterHandle: string\n    defaultOgImage: string | null\n    primaryKeywords: string[]\n    verificationCodes: {\n        google: string\n        baidu: string\n        bing: string\n        yandex: string\n    }\n    submissionStatus: {\n        google: string\n        baidu: string\n    }\n    analyticsId: string\n}\n\n// SEO监控数据类型\ninterface SeoMetricsData {\n    date: string\n    googleIndexedPages: number\n    baiduIndexedPages: number\n    totalPages: number\n    mobileSpeedScore: number\n    desktopSpeedScore: number\n    organicTraffic: number\n    avgPosition: number\n    crawlErrors: number\n    sitemapStatus: string\n    robotsTxtStatus: string\n}\n\n// 系统配置相关类型定义\ninterface StrapiSystemConfig {\n    id: number\n    documentId: string\n    registrationEnabled: boolean\n    emailVerificationEnabled: boolean\n    verificationCodeLength: number\n    emailVerificationCodeExpiry: number\n    passwordResetEnabled: boolean\n    passwordResetTokenExpiry: number\n    passwordMinLength: number\n    passwordRequireSpecialChar: boolean\n    passwordRequireNumber: boolean\n    passwordRequireUppercase: boolean\n    oauthEnabled: boolean\n    githubOauthEnabled: boolean\n    googleOauthEnabled: boolean\n    wechatOauthEnabled: boolean\n    qqOauthEnabled: boolean\n    oauthAutoRegister: boolean\n    sessionTimeout: number\n    maxLoginAttempts: number\n    accountLockoutDuration: number\n    maintenanceMode: boolean\n    maintenanceMessage: string\n    allowedEmailDomains?: string | null\n    blockedEmailDomains?: string | null\n    systemNotificationEmail: string\n    enableUserProfileEdit: boolean\n    enableAccountDeletion: boolean\n    defaultUserRole: string\n    configurationNotes?: string | null\n    lastModifiedBy?: string | null\n    createdAt: string\n    updatedAt: string\n}\n\n// 前端使用的公开系统配置类型\ninterface PublicSystemConfig {\n    registrationEnabled: boolean\n    emailVerificationEnabled: boolean\n    passwordResetEnabled: boolean\n    oauthEnabled: boolean\n    githubOauthEnabled: boolean\n    googleOauthEnabled: boolean\n    wechatOauthEnabled: boolean\n    qqOauthEnabled: boolean\n    oauthAutoRegister: boolean\n    passwordMinLength: number\n    passwordRequireSpecialChar: boolean\n    passwordRequireNumber: boolean\n    passwordRequireUppercase: boolean\n    maintenanceMode: boolean\n    maintenanceMessage: string\n    enableUserProfileEdit: boolean\n    enableAccountDeletion: boolean\n}\n\n// Strapi API配置\nconst STRAPI_URL = config.backend.url\nconst API_TOKEN = process.env.STRAPI_API_TOKEN\n\n// 调试：输出实际使用的STRAPI_URL\nif (process.env.NODE_ENV === 'development') {\n    console.log('🔍 [DEBUG] STRAPI_URL:', STRAPI_URL)\n}\n\n// Strapi API客户端对象\nexport const strapiApi = {\n    async get(endpoint: string) {\n        const response = await fetch(`${STRAPI_URL}${endpoint}`, {\n            headers: getHeaders(),\n        })\n        \n        if (!response.ok) {\n            throw new Error(`API request failed: ${response.status}`)\n        }\n        \n        return {\n            data: await response.json()\n        }\n    },\n    \n    async post(endpoint: string, data?: any) {\n        const response = await fetch(`${STRAPI_URL}${endpoint}`, {\n            method: 'POST',\n            headers: getHeaders(),\n            body: data ? JSON.stringify(data) : undefined,\n        })\n        \n        if (!response.ok) {\n            throw new Error(`API request failed: ${response.status}`)\n        }\n        \n        return {\n            data: await response.json()\n        }\n    },\n    \n    async put(endpoint: string, data?: any) {\n        const response = await fetch(`${STRAPI_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: getHeaders(),\n            body: data ? JSON.stringify(data) : undefined,\n        })\n        \n        if (!response.ok) {\n            throw new Error(`API request failed: ${response.status}`)\n        }\n        \n        return {\n            data: await response.json()\n        }\n    },\n    \n    async delete(endpoint: string) {\n        const response = await fetch(`${STRAPI_URL}${endpoint}`, {\n            method: 'DELETE',\n            headers: getHeaders(),\n        })\n        \n        if (!response.ok) {\n            throw new Error(`API request failed: ${response.status}`)\n        }\n        \n        return {\n            data: await response.json()\n        }\n    }\n}\n\n// Strapi响应类型定义\ninterface StrapiResponse<T> {\n    data: T\n    meta?: {\n        pagination?: {\n            page: number\n            pageSize: number\n            pageCount: number\n            total: number\n        }\n    }\n}\n\ninterface StrapiArticle {\n    id: number\n    documentId: string\n    title: string\n    slug: string\n    content: string\n    excerpt?: string | null\n    publishedAt: string\n    viewCount: number\n    readingTime: number\n    likeCount?: number | null // 新增：点赞数\n    seoTitle?: string | null\n    seoDescription?: string | null\n    featured: boolean\n    isPremium: boolean\n    createdAt: string\n    updatedAt: string\n    featuredImage?: {\n        id: number\n        documentId: string\n        name: string\n        url: string\n        width: number\n        height: number\n        alternativeText?: string | null\n    } | null\n    author?: {\n        id: number\n        documentId: string\n        name: string\n        slug: string\n        bio?: string | null\n        email?: string | null\n        website?: string | null\n        position?: string | null\n        company?: string | null\n        avatar?: {\n            id: number\n            documentId: string\n            name: string\n            url: string\n            alternativeText?: string | null\n        } | null\n    } | null\n    category?: {\n        id: number\n        documentId: string\n        name: string\n        slug: string\n        description?: string | null\n        icon?: string | null\n        color?: string | null\n    } | null\n    tags?: Array<{\n        id: number\n        documentId: string\n        name: string\n        slug: string\n        color: string\n        description?: string | null\n        icon?: string | null\n    }> | null\n}\n\n// API请求头配置\nconst getHeaders = () => {\n    const headers: HeadersInit = {\n        'Content-Type': 'application/json',\n    }\n\n    if (API_TOKEN) {\n        headers['Authorization'] = `Bearer ${API_TOKEN}`\n    }\n\n    return headers\n}\n\n/**\n * 获取文章列表\n */\nexport async function getArticles(params: {\n    page?: number\n    pageSize?: number\n    category?: string\n    tag?: string\n    search?: string\n    featured?: boolean\n    sortBy?: string\n    sortOrder?: 'asc' | 'desc'\n} = {}): Promise<{\n    articles: ArticleCardData[]\n    pagination: {\n        page: number\n        pageSize: number\n        pageCount: number\n        total: number\n    }\n}> {\n    try {\n        const searchParams = new URLSearchParams()\n\n        // 分页参数\n        searchParams.append('pagination[page]', String(params.page || 1))\n        searchParams.append('pagination[pageSize]', String(params.pageSize || 10))\n\n        // 关联数据 - 使用简化的组合方式\n        searchParams.append('populate[0]', 'author')\n        searchParams.append('populate[1]', 'author.avatar')\n        searchParams.append('populate[2]', 'featuredImage')\n        searchParams.append('populate[3]', 'tags')\n        searchParams.append('populate[4]', 'category')\n\n        // 排序\n        if (params.sortBy) {\n            const sortOrder = params.sortOrder || 'desc'\n            searchParams.append('sort[0]', `${params.sortBy}:${sortOrder}`)\n        } else {\n            searchParams.append('sort[0]', 'publishedAt:desc')\n        }\n\n        // 筛选条件\n        if (params.category) {\n            searchParams.append('filters[category][slug][$eq]', params.category)\n        }\n\n        if (params.tag) {\n            searchParams.append('filters[tags][slug][$in]', params.tag)\n        }\n\n        if (params.search) {\n            searchParams.append('filters[$or][0][title][$containsi]', params.search)\n            searchParams.append('filters[$or][1][excerpt][$containsi]', params.search)\n        }\n\n        if (params.featured !== undefined) {\n            searchParams.append('filters[featured][$eq]', String(params.featured))\n        }\n\n        const response = await fetch(\n            `${STRAPI_URL}/api/articles?${searchParams}`,\n            {\n                headers: getHeaders(),\n                next: { revalidate: 300 }, // 5分钟缓存\n            }\n        )\n\n        if (!response.ok) {\n            throw new Error(`Strapi API error: ${response.status}`)\n        }\n\n        const data: StrapiResponse<StrapiArticle[]> = await response.json()\n\n        return {\n            articles: data.data.map(transformStrapiArticle),\n            pagination: data.meta?.pagination || {\n                page: 1,\n                pageSize: 10,\n                pageCount: 1,\n                total: data.data.length\n            }\n        }\n    } catch (error) {\n        console.error('获取文章列表失败:', error)\n\n        // 返回空结果而不是抛出错误，保证前端不崩溃\n        return {\n            articles: [],\n            pagination: {\n                page: 1,\n                pageSize: 10,\n                pageCount: 0,\n                total: 0\n            }\n        }\n    }\n}\n\n/**\n * 根据slug获取单篇文章\n */\nexport async function getArticleBySlug(slug: string): Promise<ArticleCardData | null> {\n    try {\n        const searchParams = new URLSearchParams()\n        searchParams.append('filters[slug][$eq]', slug)\n        // 使用简化的组合方式\n        searchParams.append('populate[0]', 'author')\n        searchParams.append('populate[1]', 'author.avatar')\n        searchParams.append('populate[2]', 'featuredImage')\n        searchParams.append('populate[3]', 'tags')\n        searchParams.append('populate[4]', 'category')\n\n        const response = await fetch(\n            `${STRAPI_URL}/api/articles?${searchParams}`,\n            {\n                headers: getHeaders(),\n                next: { revalidate: 300 },\n            }\n        )\n\n        if (!response.ok) {\n            throw new Error(`Strapi API error: ${response.status}`)\n        }\n\n        const data: StrapiResponse<StrapiArticle[]> = await response.json()\n\n        if (data.data.length === 0) {\n            return null\n        }\n\n        return transformStrapiArticle(data.data[0])\n    } catch (error) {\n        console.error('获取文章详情失败:', error)\n        return null\n    }\n}\n\n/**\n * 获取精选文章\n */\nexport async function getFeaturedArticles(limit: number = 6): Promise<ArticleCardData[]> {\n    try {\n        const { articles } = await getArticles({\n            pageSize: limit,\n            featured: true\n        })\n        return articles\n    } catch (error) {\n        console.error('获取精选文章失败:', error)\n        return []\n    }\n}\n\n/**\n * 增加文章浏览量\n */\nexport async function incrementArticleView(articleId: string): Promise<number | null> {\n    try {\n        // 调用专用的浏览量增加API\n        const response = await fetch(`${STRAPI_URL}/api/articles/${articleId}/view`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n\n        if (!response.ok) {\n            console.error('增加浏览量失败:', response.status, response.statusText)\n            return null\n        }\n\n        const result = await response.json()\n        const newViewCount = result.data?.viewCount\n        console.log('浏览量更新成功:', newViewCount)\n        return newViewCount\n    } catch (error) {\n        console.error('更新浏览量失败:', error)\n        // 静默失败，不影响用户体验\n        return null\n    }\n}\n\n/**\n * 数据转换函数：将Strapi文章数据转换为前端需要的格式\n */\nfunction transformStrapiArticle(strapiArticle: StrapiArticle): ArticleCardData {\n    if (!strapiArticle || !strapiArticle.title || !strapiArticle.slug) {\n        console.error('Invalid article data - missing required fields:', strapiArticle)\n        throw new Error('Article data is missing required fields (title or slug)')\n    }\n\n    return {\n        id: String(strapiArticle.id),\n        title: strapiArticle.title,\n        slug: strapiArticle.slug,\n        excerpt: strapiArticle.excerpt || '',\n        publishedAt: formatDate(strapiArticle.publishedAt),\n        readingTime: `${strapiArticle.readingTime || 5}分钟`,\n        viewCount: String(strapiArticle.viewCount || 0),\n        isPremium: strapiArticle.isPremium || false, // 使用专门的isPremium字段设置会员专享标识\n        featured: strapiArticle.featured || false, // 是否置顶推荐\n        coverImage: strapiArticle.featuredImage?.url\n            ? `${STRAPI_URL}${strapiArticle.featuredImage.url}`\n            : undefined,\n        // 调试：输出图片URL构建过程\n        ...(process.env.NODE_ENV === 'development' && {\n            _debug_imageUrl: strapiArticle.featuredImage?.url,\n            _debug_finalUrl: strapiArticle.featuredImage?.url ? `${STRAPI_URL}${strapiArticle.featuredImage.url}` : undefined\n        }),\n        author: {\n            name: strapiArticle.author?.name || '匿名作者',\n            // 🔥 修复：Strapi 5.x扁平化结构 + 多格式支持 + Fallback + 调试信息\n            avatar: (() => {\n                // 调试：输出作者头像数据结构（仅在开发环境）\n                if (process.env.NODE_ENV === 'development' && strapiArticle.author) {\n                    console.log('作者数据结构:', {\n                        name: strapiArticle.author.name,\n                        avatar: strapiArticle.author.avatar\n                    })\n                }\n\n                // 尝试多种可能的头像路径\n                if (strapiArticle.author?.avatar?.url) {\n                    return `${STRAPI_URL}${strapiArticle.author.avatar.url}`\n                }\n\n                if ((strapiArticle.author?.avatar as any)?.formats?.thumbnail?.url) {\n                    return `${STRAPI_URL}${(strapiArticle.author?.avatar as any).formats.thumbnail.url}`\n                }\n\n                if ((strapiArticle.author?.avatar as any)?.formats?.small?.url) {\n                    return `${STRAPI_URL}${(strapiArticle.author?.avatar as any).formats.small.url}`\n                }\n\n                if ((strapiArticle.author?.avatar as any)?.formats?.medium?.url) {\n                    return `${STRAPI_URL}${(strapiArticle.author?.avatar as any).formats.medium.url}`\n                }\n\n                return undefined\n            })()\n        },\n        tags: strapiArticle.tags?.map(tag => tag.name).filter(Boolean) || [],\n        // SEO优化字段\n        seoTitle: strapiArticle.seoTitle || undefined,\n        seoDescription: strapiArticle.seoDescription || undefined,\n        // 新增字段\n        content: strapiArticle.content || undefined,\n        likeCount: String(strapiArticle.likeCount || 0)\n    }\n}\n\n/**\n * 格式化日期\n */\nfunction formatDate(dateString: string): string {\n    try {\n        const date = new Date(dateString)\n        return date.toISOString().split('T')[0] // 返回 YYYY-MM-DD 格式\n    } catch (error) {\n        return new Date().toISOString().split('T')[0]\n    }\n}\n\n/**\n * 检查Strapi连接状态\n */\nexport async function checkStrapiConnection(): Promise<boolean> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/articles?pagination[pageSize]=1`, {\n            headers: getHeaders(),\n        })\n        return response.ok\n    } catch (error) {\n        console.error('Strapi连接检查失败:', error)\n        return false\n    }\n}\n\n/**\n * 转换Strapi网站配置数据为前端使用格式\n */\nfunction transformStrapiSiteConfig(strapiConfig: StrapiSiteConfig): SiteConfigData {\n    return {\n        siteName: strapiConfig.siteName || 'AI变现之路',\n        siteDescription: strapiConfig.siteDescription || '汇聚AI领域专家实战经验，每周分享最新变现机会与实用工具',\n        siteUrl: strapiConfig.siteUrl || 'https://aibianx.com',\n        twitterHandle: strapiConfig.twitterHandle || '@aibianx',\n        defaultOgImage: strapiConfig.defaultOgImage?.url || null,\n        primaryKeywords: strapiConfig.primaryKeywords\n            ? strapiConfig.primaryKeywords.split(',').map(k => k.trim()).filter(k => k)\n            : [],\n        verificationCodes: {\n            google: strapiConfig.googleVerificationCode || '',\n            baidu: strapiConfig.baiduVerificationCode || '',\n            bing: strapiConfig.bingVerificationCode || '',\n            yandex: strapiConfig.yandexVerificationCode || '',\n        },\n        submissionStatus: {\n            google: strapiConfig.googleSubmissionStatus || '未提交',\n            baidu: strapiConfig.baiduSubmissionStatus || '未提交',\n        },\n        analyticsId: strapiConfig.analyticsId || '',\n    }\n}\n\n/**\n * 获取默认网站配置\n */\nfunction getDefaultSiteConfig(): SiteConfigData {\n    // 构建时使用环境变量配置的URL，确保不为空\n    const defaultUrl = process.env.NEXT_PUBLIC_SITE_URL || \n                      (process.env.NEXT_PUBLIC_FRONTEND_PROTOCOL && process.env.NEXT_PUBLIC_FRONTEND_DOMAIN\n                       ? `${process.env.NEXT_PUBLIC_FRONTEND_PROTOCOL}://${process.env.NEXT_PUBLIC_FRONTEND_DOMAIN}`\n                       : 'https://aibianx.com')\n    \n    return {\n        siteName: 'AI变现之路',\n        siteDescription: '汇聚AI领域专家实战经验，每周分享最新变现机会与实用工具',\n        siteUrl: defaultUrl,\n        twitterHandle: '@aibianx',\n        defaultOgImage: null,\n        primaryKeywords: ['AI变现', 'ChatGPT赚钱', 'AI工具', '人工智能创业'],\n        verificationCodes: {\n            google: '',\n            baidu: '',\n            bing: '',\n            yandex: '',\n        },\n        submissionStatus: {\n            google: 'status_not_submitted',\n            baidu: 'status_not_submitted',\n        },\n        analyticsId: '',\n    }\n}\n\n/**\n * 获取网站配置\n */\nexport async function getSiteConfig(): Promise<SiteConfigData> {\n    // 构建时使用默认配置，避免API连接问题\n    if (process.env.NODE_ENV === 'production' && typeof window === 'undefined') {\n        console.log('构建时使用默认网站配置')\n        return getDefaultSiteConfig()\n    }\n\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/site-config?populate=defaultOgImage`, {\n            headers: getHeaders(),\n            next: { revalidate: 300 }, // 5分钟缓存\n        })\n\n        if (!response.ok) {\n            console.warn(`网站配置API失败 (${response.status})，使用默认配置`)\n            return getDefaultSiteConfig()\n        }\n\n        const data: StrapiResponse<StrapiSiteConfig> = await response.json()\n\n        // 处理singleType的响应格式 - 可能返回数组或单个对象\n        const siteConfig = Array.isArray(data.data) ? data.data[0] : data.data || data\n\n        if (!siteConfig) {\n            console.warn('未找到网站配置数据，使用默认配置')\n            return getDefaultSiteConfig()\n        }\n\n        return transformStrapiSiteConfig(siteConfig as StrapiSiteConfig)\n    } catch (error) {\n        console.error('获取网站配置失败:', error)\n        return getDefaultSiteConfig()\n    }\n}\n\n/**\n * 获取搜索引擎验证代码（专用于前端meta标签）\n */\nexport async function getVerificationCodes(): Promise<{\n    google: string\n    baidu: string\n    bing: string\n    yandex: string\n}> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/site-config/verification-codes`, {\n            headers: getHeaders(),\n            next: { revalidate: 3600 }, // 1小时缓存\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取验证代码失败: ${response.status}`)\n        }\n\n        const result = await response.json()\n        return result.data\n    } catch (error) {\n        console.error('获取验证代码失败:', error)\n        return {\n            google: '',\n            baidu: '',\n            bing: '',\n            yandex: '',\n        }\n    }\n}\n\n/**\n * 获取最新SEO监控数据\n */\nexport async function getLatestSeoMetrics(): Promise<SeoMetricsData | null> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/seo-metrics-data?sort[0]=date:desc&pagination[limit]=1&populate=*`, {\n            headers: getHeaders(),\n            next: { revalidate: 300 }, // 5分钟缓存\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取SEO监控数据失败: ${response.status}`)\n        }\n\n        const result = await response.json()\n\n        if (!result.data || result.data.length === 0) {\n            return null\n        }\n\n        return result.data[0] as SeoMetricsData\n    } catch (error) {\n        console.error('获取SEO监控数据失败:', error)\n        return null\n    }\n}\n\n/**\n * 获取收录统计摘要\n */\nexport async function getIndexingSummary(days: number = 30): Promise<{\n    lastUpdate: string | null\n    totalPages: number\n    indexedPages: { google: number; baidu: number; bing: number }\n    indexingRate: { google: number; baidu: number; bing: number }\n    crawlErrors: number\n    sitemapStatus: string\n    robotsTxtStatus: string\n} | null> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/seo-metrics-data?sort[0]=date:desc&pagination[limit]=1&populate=*`, {\n            headers: getHeaders(),\n            next: { revalidate: 300 }, // 5分钟缓存\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取收录摘要失败: ${response.status}`)\n        }\n\n        const result = await response.json()\n\n        if (!result.data || result.data.length === 0) {\n            return null\n        }\n\n        const latest = result.data[0]\n        const totalPages = latest.totalPages || 1\n\n        return {\n            lastUpdate: latest.date,\n            totalPages: latest.totalPages || 0,\n            indexedPages: {\n                google: latest.googleIndexedPages || 0,\n                baidu: latest.baiduIndexedPages || 0,\n                bing: latest.bingIndexedPages || 0\n            },\n            indexingRate: {\n                google: Math.round(((latest.googleIndexedPages || 0) / totalPages) * 100),\n                baidu: Math.round(((latest.baiduIndexedPages || 0) / totalPages) * 100),\n                bing: Math.round(((latest.bingIndexedPages || 0) / totalPages) * 100)\n            },\n            crawlErrors: latest.crawlErrors || 0,\n            sitemapStatus: latest.sitemapStatus || 'status_not_submitted',\n            robotsTxtStatus: latest.robotsTxtStatus || 'status_not_detected'\n        }\n    } catch (error) {\n        console.error('获取收录摘要失败:', error)\n        return null\n    }\n}\n\n/**\n * 获取性能监控摘要\n */\nexport async function getPerformanceSummary(): Promise<{\n    lastUpdate: string | null\n    avgPageLoadTime: number\n    speedScores: { mobile: number; desktop: number }\n    coreWebVitals: { lcp: number; fid: number; cls: number }\n} | null> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/seo-metrics-data?sort[0]=date:desc&pagination[limit]=1&populate=*`, {\n            headers: getHeaders(),\n            next: { revalidate: 300 }, // 5分钟缓存\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取性能摘要失败: ${response.status}`)\n        }\n\n        const result = await response.json()\n\n        if (!result.data || result.data.length === 0) {\n            return null\n        }\n\n        const latest = result.data[0]\n\n        return {\n            lastUpdate: latest.date,\n            avgPageLoadTime: latest.avgPageLoadTime || 0,\n            speedScores: {\n                mobile: latest.mobileSpeedScore || 0,\n                desktop: latest.desktopSpeedScore || 0\n            },\n            coreWebVitals: {\n                lcp: latest.coreWebVitalsLCP || 0,\n                fid: latest.coreWebVitalsFID || 0,\n                cls: latest.coreWebVitalsCLS || 0\n            }\n        }\n    } catch (error) {\n        console.error('获取性能摘要失败:', error)\n        return null\n    }\n}\n\n/**\n * 更新sitemap时间戳\n */\nexport async function updateSitemapTimestamp(): Promise<boolean> {\n    try {\n        // 获取当前配置\n        const getResponse = await fetch(`${STRAPI_URL}/api/site-config?populate=*`, {\n            headers: getHeaders(),\n        })\n\n        if (!getResponse.ok) {\n            throw new Error('获取配置失败')\n        }\n\n        const result = await getResponse.json()\n        const data = Array.isArray(result.data) ? result.data[0] : result.data\n\n        if (!data) {\n            throw new Error('配置不存在')\n        }\n\n        // 更新时间戳\n        const updateResponse = await fetch(`${STRAPI_URL}/api/site-config/${data.documentId}`, {\n            method: 'PUT',\n            headers: getHeaders(),\n            body: JSON.stringify({\n                data: {\n                    lastSitemapUpdate: new Date().toISOString()\n                }\n            })\n        })\n\n        return updateResponse.ok\n    } catch (error) {\n        console.error('更新sitemap时间戳失败:', error)\n        return false\n    }\n}\n\n// =================== 系统配置相关API ===================\n\n/**\n * 获取公开的系统配置（前端使用）\n */\nexport async function getPublicSystemConfig(): Promise<PublicSystemConfig | null> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/system-config/public`, {\n            headers: getHeaders(),\n            next: { revalidate: 300 }, // 5分钟缓存\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取系统配置失败: ${response.status}`)\n        }\n\n        const data = await response.json()\n        return data as PublicSystemConfig\n    } catch (error) {\n        console.error('获取公开系统配置失败:', error)\n        return null\n    }\n}\n\n/**\n * 获取完整的系统配置（管理员使用）\n */\nexport async function getFullSystemConfig(): Promise<StrapiSystemConfig | null> {\n    try {\n        const response = await fetch(`${STRAPI_URL}/api/system-config`, {\n            headers: getHeaders(),\n        })\n\n        if (!response.ok) {\n            throw new Error(`获取完整系统配置失败: ${response.status}`)\n        }\n\n        const result = await response.json()\n        const data = Array.isArray(result.data) ? result.data[0] : result.data\n        return data as StrapiSystemConfig\n    } catch (error) {\n        console.error('获取完整系统配置失败:', error)\n        return null\n    }\n}\n\n/**\n * 更新系统配置（管理员使用）\n */\nexport async function updateSystemConfig(configData: Partial<StrapiSystemConfig>): Promise<boolean> {\n    try {\n        // 先获取当前配置以获取documentId\n        const currentConfig = await getFullSystemConfig()\n        if (!currentConfig) {\n            throw new Error('无法获取当前系统配置')\n        }\n\n        const response = await fetch(`${STRAPI_URL}/api/system-config`, {\n            method: 'PUT',\n            headers: getHeaders(),\n            body: JSON.stringify({\n                data: configData\n            })\n        })\n\n        return response.ok\n    } catch (error) {\n        console.error('更新系统配置失败:', error)\n        return false\n    }\n}\n\n\n\n/**\n * 检查系统是否处于维护模式\n */\nexport async function isMaintenanceMode(): Promise<boolean> {\n    try {\n        const config = await getPublicSystemConfig()\n        return config?.maintenanceMode || false\n    } catch (error) {\n        console.error('检查维护模式状态失败:', error)\n        return false\n    }\n}\n\n/**\n * 验证密码是否符合系统要求\n */\nexport async function validatePassword(password: string): Promise<{\n    isValid: boolean\n    errors: string[]\n}> {\n    try {\n        const config = await getPublicSystemConfig()\n        const errors: string[] = []\n\n        if (!config) {\n            return { isValid: true, errors: [] } // 无法获取配置时，使用默认验证\n        }\n\n        // 检查最小长度\n        if (password.length < config.passwordMinLength) {\n            errors.push(`密码长度至少需要${config.passwordMinLength}个字符`)\n        }\n\n        // 检查是否需要数字\n        if (config.passwordRequireNumber && !/\\d/.test(password)) {\n            errors.push('密码必须包含至少一个数字')\n        }\n\n        // 检查是否需要特殊字符\n        if (config.passwordRequireSpecialChar && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n            errors.push('密码必须包含至少一个特殊字符')\n        }\n\n        // 检查是否需要大写字母\n        if (config.passwordRequireUppercase && !/[A-Z]/.test(password)) {\n            errors.push('密码必须包含至少一个大写字母')\n        }\n\n        return {\n            isValid: errors.length === 0,\n            errors\n        }\n    } catch (error) {\n        console.error('验证密码失败:', error)\n        return { isValid: true, errors: [] } // 出错时使用宽松验证\n    }\n}\n\n/**\n * 获取启用的OAuth提供商列表\n */\nexport async function getEnabledOAuthProviders(): Promise<string[]> {\n    try {\n        const config = await getPublicSystemConfig()\n        if (!config || !config.oauthEnabled) {\n            return []\n        }\n\n        const providers: string[] = []\n        if (config.githubOauthEnabled) providers.push('github')\n        if (config.googleOauthEnabled) providers.push('google')\n        if (config.wechatOauthEnabled) providers.push('wechat')\n        if (config.qqOauthEnabled) providers.push('qq')\n\n        return providers\n    } catch (error) {\n        console.error('获取OAuth提供商列表失败:', error)\n        return []\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1750, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/weeklyUtils.ts"],"sourcesContent":["/**\n * Weekly页面工具函数\n * \n * 包含筛选、搜索、分页等业务逻辑\n * 分离复杂逻辑，提升代码可读性和可测试性\n */\n\nimport type { ArticleCardData } from '@/components/molecules/ArticleCard/ArticleCard'\n\n/**\n * 解析浏览量字符串为数字（用于排序）\n */\nfunction parseViewCount(viewCount: string): number {\n    const numStr = viewCount.replace('k', '000').replace('.', '')\n    return parseInt(numStr, 10) || 0\n}\n\n/**\n * 搜索文章函数\n */\nexport function searchArticles(\n    articles: ArticleCardData[],\n    query: string\n): ArticleCardData[] {\n    if (!query.trim()) {\n        return articles\n    }\n\n    const searchQuery = query.toLowerCase()\n\n    return articles.filter(article =>\n        article.title.toLowerCase().includes(searchQuery) ||\n        article.excerpt?.toLowerCase().includes(searchQuery) ||\n        article.tags.some(tag => tag.toLowerCase().includes(searchQuery))\n    )\n}\n\n/**\n * 根据筛选条件过滤文章\n */\nexport function filterArticles(\n    articles: ArticleCardData[],\n    filterId: string\n): ArticleCardData[] {\n    switch (filterId) {\n        case 'latest':\n            return [...articles].sort((a, b) =>\n                new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()\n            )\n\n        case 'hot':\n            return [...articles].sort((a, b) =>\n                parseViewCount(b.viewCount) - parseViewCount(a.viewCount)\n            )\n\n        case 'ai-tools':\n            return articles.filter(article =>\n                article.tags.some(tag => tag === 'AI工具')\n            )\n\n        case 'monetization':\n            return articles.filter(article =>\n                article.tags.some(tag => tag === '变现心得')\n            )\n\n        case 'tech-guide':\n            return articles.filter(article =>\n                article.tags.some(tag => tag === '技术指南')\n            )\n\n        case 'case-study':\n            return articles.filter(article =>\n                article.tags.some(tag => tag === '实战案例')\n            )\n\n        case 'trending':\n            return articles.filter(article =>\n                article.tags.some(tag => tag === '前沿技术')\n            )\n\n        default:\n            return articles\n    }\n}\n\n/**\n * 综合筛选和搜索文章\n */\nexport function filterAndSearchArticles(\n    articles: ArticleCardData[],\n    searchQuery: string,\n    filterId: string\n): ArticleCardData[] {\n    // 先应用搜索筛选\n    let filtered = searchArticles(articles, searchQuery)\n\n    // 再应用分类筛选\n    filtered = filterArticles(filtered, filterId)\n\n    return filtered\n}\n\n/**\n * 分页处理\n */\nexport function paginateArticles(\n    articles: ArticleCardData[],\n    currentPage: number,\n    itemsPerPage: number\n): {\n    paginatedArticles: ArticleCardData[]\n    totalPages: number\n    hasNextPage: boolean\n    hasPrevPage: boolean\n} {\n    const totalPages = Math.ceil(articles.length / itemsPerPage)\n    const startIndex = (currentPage - 1) * itemsPerPage\n    const paginatedArticles = articles.slice(startIndex, startIndex + itemsPerPage)\n\n    return {\n        paginatedArticles,\n        totalPages,\n        hasNextPage: currentPage < totalPages,\n        hasPrevPage: currentPage > 1\n    }\n}\n\n/**\n * 获取搜索结果统计信息\n */\nexport function getSearchResultStats(\n    totalResults: number,\n    searchQuery: string,\n    isSearching: boolean\n): {\n    showStats: boolean\n    message: string\n} {\n    if (!searchQuery.trim()) {\n        return {\n            showStats: false,\n            message: ''\n        }\n    }\n\n    if (isSearching) {\n        return {\n            showStats: true,\n            message: '搜索中...'\n        }\n    }\n\n    return {\n        showStats: true,\n        message: `搜索 \"${searchQuery}\" 找到 ${totalResults} 个相关结果`\n    }\n}\n\n/**\n * 生成空状态配置\n */\nexport function getEmptyStateConfig(\n    hasSearchQuery: boolean,\n    searchQuery: string\n): {\n    type: 'search' | 'category'\n    title: string\n    description: string\n    actionText: string\n    showSearchSuggestions: boolean\n} {\n    if (hasSearchQuery) {\n        return {\n            type: 'search',\n            title: '未找到相关内容',\n            description: `没有找到包含 \"${searchQuery}\" 的内容`,\n            actionText: '查看全部文章',\n            showSearchSuggestions: true\n        }\n    }\n\n    return {\n        type: 'category',\n        title: '该分类暂无文章',\n        description: '敬请期待更多精彩内容',\n        actionText: '查看最新文章',\n        showSearchSuggestions: false\n    }\n}\n\n/**\n * 平滑滚动到顶部\n */\nexport function scrollToTop(behavior: 'smooth' | 'auto' = 'smooth'): void {\n    window.scrollTo({ top: 0, behavior })\n}\n\n/**\n * 获取响应式网格样式\n */\nexport function getGridStyles(\n    desktopColumns: string,\n    tabletColumns: string,\n    mobileColumns: string,\n    gap: string,\n    maxWidth: string\n) {\n    return {\n        display: 'grid',\n        gridTemplateColumns: desktopColumns,\n        gap,\n        marginBottom: '48px',\n        maxWidth,\n        margin: '0 auto 48px auto'\n    }\n}\n\n/**\n * 获取搜索容器样式\n */\nexport function getSearchContainerStyles(maxWidth: string) {\n    return {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        searchContainer: {\n            width: '100%',\n            maxWidth\n        }\n    }\n}\n\n/**\n * 生成搜索建议按钮样式\n */\nexport function getSuggestionButtonStyles(index: number) {\n    return {\n        background: 'rgba(59, 130, 246, 0.1)',\n        border: '1px solid rgba(59, 130, 246, 0.3)',\n        borderRadius: '20px',\n        padding: '6px 16px',\n        color: 'var(--color-primary-blue)',\n        fontSize: 'var(--font-size-sm)',\n        cursor: 'pointer',\n        transition: 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        fontFamily: \"'Alibaba PuHuiTi 3.0', sans-serif\",\n        opacity: 0,\n        animation: `fadeInUp 0.6s ease-out ${0.1 * (index + 1)}s forwards`\n    }\n}\n\n/**\n * 生成搜索建议按钮悬停效果\n */\nexport function applySuggestionButtonHover(element: HTMLButtonElement, isHover: boolean) {\n    if (isHover) {\n        element.style.background = 'rgba(59, 130, 246, 0.2)'\n        element.style.borderColor = 'rgba(59, 130, 246, 0.5)'\n        element.style.transform = 'translateY(-1px)'\n        element.style.boxShadow = '0 4px 12px rgba(59, 130, 246, 0.2)'\n    } else {\n        element.style.background = 'rgba(59, 130, 246, 0.1)'\n        element.style.borderColor = 'rgba(59, 130, 246, 0.3)'\n        element.style.transform = 'translateY(0)'\n        element.style.boxShadow = 'none'\n    }\n}\n\n/**\n * 生成清空搜索按钮样式\n */\nexport function getClearSearchButtonStyles() {\n    return {\n        background: 'transparent',\n        border: '1px solid rgba(42, 42, 42, 0.70)',\n        borderRadius: '6px',\n        padding: '4px 8px',\n        color: 'var(--color-text-muted)',\n        fontSize: '12px',\n        cursor: 'pointer',\n        transition: 'all 0.2s ease'\n    }\n}\n\n/**\n * 应用清空搜索按钮悬停效果\n */\nexport function applyClearSearchButtonHover(element: HTMLButtonElement, isHover: boolean) {\n    if (isHover) {\n        element.style.borderColor = 'rgba(59, 130, 246, 0.50)'\n        element.style.color = '#D1D5DB'\n    } else {\n        element.style.borderColor = 'rgba(42, 42, 42, 0.70)'\n        element.style.color = '#9CA3AF'\n    }\n}\n\n/**\n * 生成主要操作按钮样式\n */\nexport function getPrimaryButtonStyles() {\n    return {\n        background: 'var(--gradient-primary)',\n        color: 'var(--color-text-primary)',\n        border: 'none',\n        borderRadius: '12px',\n        padding: '14px 28px',\n        fontSize: 'var(--font-size-base)',\n        fontWeight: '500',\n        cursor: 'pointer',\n        transition: 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        boxShadow: '0 4px 20px rgba(59, 130, 246, 0.3)',\n        minWidth: '150px',\n        whiteSpace: 'nowrap' as const\n    }\n}\n\n/**\n * 应用主要操作按钮悬停效果\n */\nexport function applyPrimaryButtonHover(element: HTMLButtonElement, isHover: boolean) {\n    if (isHover) {\n        element.style.transform = 'translateY(-2px)'\n        element.style.boxShadow = '0 8px 25px rgba(59, 130, 246, 0.4)'\n    } else {\n        element.style.transform = 'translateY(0)'\n        element.style.boxShadow = '0 4px 20px rgba(59, 130, 246, 0.3)'\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1968, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useWeeklyLogicWithAPI.ts"],"sourcesContent":["/**\n * useWeeklyLogicWithAPI Hook\n * \n * 封装Weekly页面的状态管理和业务逻辑（API版本）\n * 包含搜索、筛选、分页等功能，使用真实Strapi API\n */\n\nimport { useState, useMemo, useEffect, useCallback } from 'react'\nimport { getArticles, checkStrapiConnection } from '@/lib/strapi'\nimport { searchArticles, checkSearchHealth, SearchHistoryManager } from '@/lib/meilisearch'\nimport type { MeiliSearchArticle } from '@/lib/meilisearch'\nimport { scrollToTop } from '@/lib/weeklyUtils'\nimport { PAGE_CONFIG } from '@/constants/weeklyConfig'\nimport type { ArticleCardData } from '@/components/molecules/ArticleCard/ArticleCard'\nimport { config } from '@/lib/config'\n\ninterface UseWeeklyLogicReturn {\n    // 状态\n    searchQuery: string\n    activeFilter: string\n    currentPage: number\n    isSearching: boolean\n    isLoading: boolean\n    connectionError: boolean\n    searchMode: 'strapi' | 'meilisearch'\n\n    // 数据\n    articles: ArticleCardData[]\n    totalPages: number\n    hasResults: boolean\n    totalCount: number\n\n    // 操作函数\n    handleSearch: (query: string) => void\n    handleFilterChange: (filterId: string) => void\n    handlePageChange: (page: number) => void\n    resetToDefaults: () => void\n    clearSearch: () => void\n    refetch: () => void\n}\n\n/**\n * Weekly页面逻辑Hook (API版本)\n */\nexport function useWeeklyLogicWithAPI(): UseWeeklyLogicReturn {\n    // 状态管理\n    const [searchQuery, setSearchQuery] = useState('')\n    const [activeFilter, setActiveFilter] = useState('latest')\n    const [currentPage, setCurrentPage] = useState(1)\n    const [isSearching, setIsSearching] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [connectionError, setConnectionError] = useState(false)\n    const [articles, setArticles] = useState<ArticleCardData[]>([])\n    const [totalPages, setTotalPages] = useState(1)\n    const [totalCount, setTotalCount] = useState(0)\n    const [searchMode, setSearchMode] = useState<'strapi' | 'meilisearch'>('strapi')\n\n    // 转换MeiliSearch文章为组件所需格式\n    const transformMeiliSearchArticle = (article: MeiliSearchArticle): ArticleCardData => {\n        // 格式化日期函数\n        const formatDate = (dateString: string): string => {\n            try {\n                const date = new Date(dateString)\n                if (isNaN(date.getTime())) {\n                    return '日期未知'\n                }\n                return date.toLocaleDateString('zh-CN', {\n                    year: 'numeric',\n                    month: 'short',\n                    day: 'numeric'\n                })\n            } catch {\n                return '日期未知'\n            }\n        }\n\n        return {\n            id: article.documentId,\n            title: article.title,\n            slug: article.slug,\n            excerpt: article.excerpt || '',\n            coverImage: article.featuredImage\n                ? (typeof article.featuredImage === 'string' \n                    ? `${config.backend.url}${article.featuredImage}`\n                    : `${config.backend.url}${article.featuredImage.url}`)\n                : undefined,\n            author: {\n                name: article.author?.name || '匿名作者',\n                avatar: article.author?.avatar?.url\n                    ? `${config.backend.url}${article.author.avatar.url}`\n                    : undefined\n            },\n            // 修复：使用正确的字段名和格式\n            publishedAt: formatDate(article.publishedAt),\n            readingTime: `${article.readingTime}分钟`,\n            viewCount: String(article.viewCount),\n            // 修复：标签应该是字符串数组，不是对象数组\n            tags: article.tags?.map(tag => tag.name) || [],\n            isPremium: article.isPremium || false, // 使用专门的isPremium字段而非featured\n            // 可选字段\n            content: undefined,\n            likeCount: '0'\n        }\n    }\n\n    // 获取文章数据（智能选择搜索引擎）\n    const fetchArticles = useCallback(async (\n        search?: string,\n        filter?: string,\n        page?: number\n    ) => {\n        try {\n            setIsLoading(true)\n            setConnectionError(false)\n\n            const hasSearchQuery = search && search.trim()\n\n            // 智能选择搜索引擎：有搜索词时优先使用MeiliSearch\n            let useSearch = false\n            if (hasSearchQuery) {\n                try {\n                    console.log('🔍 检查MeiliSearch健康状态...')\n                    const searchHealth = await checkSearchHealth()\n                    console.log('🔍 健康检查结果:', searchHealth)\n\n                    if (searchHealth.status === 'healthy') {\n                        useSearch = true\n                        setSearchMode('meilisearch')\n                        console.log('✅ 使用MeiliSearch搜索引擎')\n                    } else {\n                        console.warn('⚠️ MeiliSearch不可用，降级到Strapi搜索:', searchHealth.message)\n                        setSearchMode('strapi')\n                    }\n                } catch (error) {\n                    console.error('❌ MeiliSearch健康检查失败，使用Strapi搜索:', error)\n                    setSearchMode('strapi')\n                }\n            } else {\n                setSearchMode('strapi')\n            }\n\n            if (useSearch && hasSearchQuery) {\n                // 使用MeiliSearch搜索\n                console.log('🔍 使用MeiliSearch搜索:', search)\n\n                // 准备MeiliSearch参数\n                const searchParams: any = {\n                    query: search.trim(),\n                    page: page || currentPage,\n                    pageSize: PAGE_CONFIG.itemsPerPage,\n                    highlight: true,\n                    sortBy: 'relevance'\n                }\n\n                // 添加筛选条件\n                if (filter && filter !== 'latest') {\n                    switch (filter) {\n                        case 'featured':\n                            searchParams.featured = true\n                            break\n                        case 'ai-tools':\n                            searchParams.tags = 'ai-tools'\n                            break\n                        case 'monetization':\n                            searchParams.tags = 'monetization'\n                            break\n                        case 'case-study':\n                            searchParams.tags = 'case-study'\n                            break\n                    }\n                }\n\n                const searchResult = await searchArticles(searchParams)\n\n                // 转换结果\n                const transformedArticles = searchResult.articles.map(transformMeiliSearchArticle)\n\n                setArticles(transformedArticles)\n                setTotalPages(searchResult.pagination.pageCount)\n                setTotalCount(searchResult.pagination.total)\n\n                // 保存搜索历史\n                SearchHistoryManager.addToHistory(search.trim())\n\n                console.log(`✅ MeiliSearch搜索完成: ${transformedArticles.length} 篇文章`)\n\n            } else {\n                // 使用Strapi原生搜索\n                console.log('📝 使用Strapi搜索:', search || '(无搜索词)')\n\n                // 检查Strapi连接\n                const isConnected = await checkStrapiConnection()\n                if (!isConnected) {\n                    setConnectionError(true)\n                    setIsLoading(false)\n                    return\n                }\n\n                // 准备Strapi API参数\n                const apiParams: any = {\n                    page: page || currentPage,\n                    pageSize: PAGE_CONFIG.itemsPerPage,\n                }\n\n                // 搜索参数\n                if (hasSearchQuery) {\n                    apiParams.search = search.trim()\n                }\n\n                // 筛选参数\n                if (filter && filter !== 'latest') {\n                    switch (filter) {\n                        case 'featured':\n                            apiParams.featured = true\n                            break\n                        case 'ai-tools':\n                            apiParams.tag = 'AI工具'\n                            break\n                        case 'monetization':\n                            apiParams.tag = '变现指南'\n                            break\n                        case 'case-study':\n                            apiParams.tag = '案例分析'\n                            break\n                    }\n                }\n\n                // 调用Strapi API\n                const result = await getArticles(apiParams)\n\n                setArticles(result.articles)\n                setTotalPages(result.pagination.pageCount)\n                setTotalCount(result.pagination.total)\n\n                console.log(`✅ Strapi搜索完成: ${result.articles.length} 篇文章`)\n            }\n\n        } catch (error) {\n            console.error('获取文章失败:', error)\n            setConnectionError(true)\n            setArticles([])\n            setTotalPages(1)\n            setTotalCount(0)\n        } finally {\n            setIsLoading(false)\n        }\n    }, [currentPage])\n\n    // 初始数据加载\n    useEffect(() => {\n        fetchArticles(searchQuery, activeFilter, currentPage)\n    }, [])\n\n    // 当搜索、筛选或分页变化时重新获取数据\n    useEffect(() => {\n        fetchArticles(searchQuery, activeFilter, currentPage)\n    }, [searchQuery, activeFilter, currentPage, fetchArticles])\n\n    // 是否有结果\n    const hasResults = useMemo(() => {\n        return articles.length > 0 && !connectionError\n    }, [articles.length, connectionError])\n\n    // 搜索处理\n    const handleSearch = useCallback((query: string) => {\n        setIsSearching(true)\n        setSearchQuery(query)\n        setCurrentPage(1) // 重置分页\n\n        // 模拟搜索延迟（为了更好的用户体验）\n        setTimeout(() => {\n            setIsSearching(false)\n        }, PAGE_CONFIG.searchDelay)\n    }, [])\n\n    // 筛选处理\n    const handleFilterChange = useCallback((filterId: string) => {\n        setActiveFilter(filterId)\n        setCurrentPage(1) // 重置分页\n    }, [])\n\n    // 分页处理\n    const handlePageChange = useCallback((page: number) => {\n        setCurrentPage(page)\n        scrollToTop() // 滚动到顶部\n    }, [])\n\n    // 重置到默认状态\n    const resetToDefaults = useCallback(() => {\n        setSearchQuery('')\n        setActiveFilter('latest')\n        setCurrentPage(1)\n        setIsSearching(false)\n    }, [])\n\n    // 清空搜索\n    const clearSearch = useCallback(() => {\n        handleSearch('')\n    }, [handleSearch])\n\n    // 重新获取数据\n    const refetch = useCallback(() => {\n        fetchArticles(searchQuery, activeFilter, currentPage)\n    }, [fetchArticles, searchQuery, activeFilter, currentPage])\n\n    return {\n        // 状态\n        searchQuery,\n        activeFilter,\n        currentPage,\n        isSearching,\n        isLoading,\n        connectionError,\n        searchMode,\n\n        // 数据\n        articles,\n        totalPages,\n        hasResults,\n        totalCount,\n\n        // 操作函数\n        handleSearch,\n        handleFilterChange,\n        handlePageChange,\n        resetToDefaults,\n        clearSearch,\n        refetch\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2249, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useSubtitleColorFix.ts"],"sourcesContent":["import { useEffect, RefObject } from 'react'\n\n/**\n * 副标题颜色修复Hook\n * \n * 解决副标题被意外修改为渐变色的问题\n * 通过MutationObserver和定时器确保颜色始终为#9CA3AF\n */\nexport function useSubtitleColorFix(\n    subtitle1Ref: RefObject<HTMLDivElement | null>,\n    subtitle2Ref: RefObject<HTMLDivElement | null>\n) {\n    useEffect(() => {\n        const TARGET_COLOR = '#9CA3AF'\n\n        const forceSubtitleColor = (element: HTMLElement, label: string) => {\n            if (!element) return\n\n            // 移除所有可能干扰的样式\n            element.style.removeProperty('background')\n            element.style.removeProperty('background-image')\n            element.style.removeProperty('background-clip')\n            element.style.removeProperty('-webkit-background-clip')\n            element.style.removeProperty('-webkit-text-fill-color')\n\n            // 强制设置颜色\n            element.style.setProperty('color', TARGET_COLOR, 'important')\n            element.style.setProperty('background', 'none', 'important')\n            element.style.setProperty('-webkit-text-fill-color', 'unset', 'important')\n            element.style.setProperty('text-fill-color', 'unset', 'important')\n\n            // 直接设置属性\n            element.setAttribute('style',\n                element.getAttribute('style')?.replace(/color:\\s*[^;]+;?/g, '') +\n                `;color: ${TARGET_COLOR} !important;`\n            )\n\n            console.log(`🔧 修复${label}颜色`, element.style.color)\n        }\n\n        // 立即修复两个副标题\n        if (subtitle1Ref.current) {\n            forceSubtitleColor(subtitle1Ref.current, '第一行副标题')\n        }\n        if (subtitle2Ref.current) {\n            forceSubtitleColor(subtitle2Ref.current, '第二行副标题')\n        }\n\n        // 创建MutationObserver监控这两个特定元素\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n                    const target = mutation.target as HTMLElement\n                    if (target === subtitle1Ref.current) {\n                        const currentColor = target.style.color\n                        if (!currentColor.includes(TARGET_COLOR) && !currentColor.includes('156, 163, 175')) {\n                            console.log('🚨 第一行副标题颜色被修改，立即修复:', currentColor)\n                            forceSubtitleColor(target, '第一行副标题')\n                        }\n                    }\n                    if (target === subtitle2Ref.current) {\n                        const currentColor = target.style.color\n                        if (!currentColor.includes(TARGET_COLOR) && !currentColor.includes('156, 163, 175')) {\n                            console.log('🚨 第二行副标题颜色被修改，立即修复:', currentColor)\n                            forceSubtitleColor(target, '第二行副标题')\n                        }\n                    }\n                }\n            })\n        })\n\n        // 监控两个副标题元素\n        if (subtitle1Ref.current) {\n            observer.observe(subtitle1Ref.current, {\n                attributes: true,\n                attributeFilter: ['style']\n            })\n        }\n        if (subtitle2Ref.current) {\n            observer.observe(subtitle2Ref.current, {\n                attributes: true,\n                attributeFilter: ['style']\n            })\n        }\n\n        // 定期强制检查（作为最后防线）\n        const intervalId = setInterval(() => {\n            if (subtitle1Ref.current) {\n                const computedStyle = window.getComputedStyle(subtitle1Ref.current)\n                if (computedStyle.color !== 'rgb(156, 163, 175)') {\n                    forceSubtitleColor(subtitle1Ref.current, '第一行副标题(定时检查)')\n                }\n            }\n            if (subtitle2Ref.current) {\n                const computedStyle = window.getComputedStyle(subtitle2Ref.current)\n                if (computedStyle.color !== 'rgb(156, 163, 175)') {\n                    forceSubtitleColor(subtitle2Ref.current, '第二行副标题(定时检查)')\n                }\n            }\n        }, 1000)\n\n        return () => {\n            observer.disconnect()\n            clearInterval(intervalId)\n        }\n    }, [subtitle1Ref, subtitle2Ref])\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2348, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/headerUtils.ts"],"sourcesContent":["/**\n * AppHeader 组件工具函数\n * \n * 包含路由匹配、滚动处理、事件处理等逻辑\n * 分离复杂逻辑，提升代码可读性和可测试性\n */\n\nimport { SCROLL_CONFIG } from '@/constants/headerConfig'\n\n// 导入Modal类型定义\ntype ModalType = 'login' | 'register' | 'forgotPassword' | 'membership' | 'payment' | 'test' | null\ntype ModalData = Record<string, unknown>\n\n/**\n * SSR兼容的路由匹配函数\n * 避免服务端和客户端路径检测不一致导致的水合错误\n */\nexport function isActiveRoute(pathname: string, href: string, isClient: boolean): boolean {\n    // SSR期间返回false，避免水合错误\n    if (!isClient) {\n        return false\n    }\n\n    if (href === '/') {\n        return pathname === '/'\n    }\n\n    if (href === '/about') {\n        return pathname === '/about'\n    }\n\n    if (href === '/weekly') {\n        return pathname.startsWith('/weekly')\n    }\n\n    return false\n}\n\n/**\n * 滚动处理逻辑\n * 返回新的可见状态和滚动状态\n */\nexport function handleScroll(\n    currentScrollY: number,\n    lastScrollY: number,\n    isPageTransitioning: boolean\n): {\n    shouldBeVisible: boolean\n    isScrolled: boolean\n    shouldHideWithDelay: boolean\n} {\n    if (isPageTransitioning) {\n        return {\n            shouldBeVisible: true,\n            isScrolled: currentScrollY > SCROLL_CONFIG.threshold,\n            shouldHideWithDelay: false\n        }\n    }\n\n    const isScrolled = currentScrollY > SCROLL_CONFIG.threshold\n    const isScrollingDown = currentScrollY > lastScrollY\n    const shouldHideWithDelay = isScrollingDown && currentScrollY > SCROLL_CONFIG.threshold\n\n    return {\n        shouldBeVisible: !shouldHideWithDelay,\n        isScrolled,\n        shouldHideWithDelay\n    }\n}\n\n/**\n * 创建滚动事件处理器\n */\nexport function createScrollHandler(\n    isPageTransitioning: boolean,\n    lastScrollY: number,\n    setIsVisible: (visible: boolean) => void,\n    setIsScrolled: (scrolled: boolean) => void,\n    setLastScrollY: (y: number) => void\n) {\n    return () => {\n        const currentScrollY = window.scrollY\n        const { shouldBeVisible, isScrolled, shouldHideWithDelay } = handleScroll(\n            currentScrollY,\n            lastScrollY,\n            isPageTransitioning\n        )\n\n        setIsScrolled(isScrolled)\n\n        if (shouldHideWithDelay) {\n            setTimeout(() => {\n                if (!isPageTransitioning) {\n                    setIsVisible(false)\n                }\n            }, SCROLL_CONFIG.hideDelay)\n        } else {\n            setIsVisible(shouldBeVisible)\n        }\n\n        setLastScrollY(currentScrollY)\n    }\n}\n\n/**\n * 获取Logo区域样式\n */\nexport function getLogoStyles(size: number, borderRadius: string, gap: string) {\n    return {\n        container: {\n            display: 'flex',\n            alignItems: 'center',\n            gap,\n            textDecoration: 'none',\n            height: `${size}px`\n        },\n        iconContainer: {\n            width: `${size}px`,\n            height: `${size}px`,\n            borderRadius,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0\n        },\n        image: {\n            width: `${size}px`,\n            height: `${size}px`,\n            objectFit: 'contain' as const\n        }\n    }\n}\n\n/**\n * 获取导航链接样式\n */\nexport function getNavLinkStyles(isActive: boolean, transition: string) {\n    return {\n        color: isActive ? 'var(--color-text-primary)' : 'var(--color-text-muted)',\n        lineHeight: '24px',\n        height: '24px',\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center' as const,\n        textDecoration: 'none',\n        fontSize: '14px',\n        fontWeight: '400',\n        transition,\n        padding: '0 4px',\n        whiteSpace: 'nowrap' as const\n    }\n}\n\n/**\n * 获取活动指示器样式\n */\nexport function getActiveIndicatorStyles(\n    width: string,\n    height: string,\n    gradient: string,\n    borderRadius: string,\n    transition: string\n) {\n    return {\n        width,\n        height,\n        background: gradient,\n        borderRadius,\n        transition\n    }\n}\n\n/**\n * 获取图标按钮样式\n */\nexport function getIconButtonStyles(\n    size: string,\n    borderRadius: string,\n    padding: string,\n    marginLeft?: string,\n    transition?: string\n) {\n    return {\n        background: 'var(--color-bg-glass)',\n        borderStyle: 'solid' as const,\n        borderColor: 'var(--color-border-primary)',\n        borderWidth: '1px',\n        borderRadius,\n        padding,\n        display: 'flex',\n        width: size,\n        height: size,\n        justifyContent: 'center',\n        alignItems: 'center',\n        ...(marginLeft && { marginLeft }),\n        cursor: 'pointer',\n        transition: transition || 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        flexShrink: 0\n    }\n}\n\n/**\n * 获取汉堡菜单线条样式\n */\nexport function getHamburgerLineStyles(\n    background: string,\n    height: string,\n    borderRadius: string,\n    isOpen: boolean,\n    lineIndex: number\n) {\n    const baseStyle = {\n        width: '100%',\n        height,\n        background,\n        borderRadius,\n        transition: 'all 0.3s ease'\n    }\n\n    if (!isOpen) {\n        return baseStyle\n    }\n\n    // 菜单打开时的变换\n    switch (lineIndex) {\n        case 0:\n            return {\n                ...baseStyle,\n                transform: 'rotate(45deg) translateY(7px)'\n            }\n        case 1:\n            return {\n                ...baseStyle,\n                opacity: 0\n            }\n        case 2:\n            return {\n                ...baseStyle,\n                transform: 'rotate(-45deg) translateY(-7px)'\n            }\n        default:\n            return baseStyle\n    }\n}\n\n/**\n * 获取移动端菜单样式\n */\nexport function getMobileMenuStyles(\n    isOpen: boolean,\n    width: string,\n    padding: string,\n    transition: string\n) {\n    return {\n        overlay: {\n            position: 'fixed' as const,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 60,\n            visibility: isOpen ? ('visible' as const) : ('hidden' as const),\n            pointerEvents: isOpen ? ('auto' as const) : ('none' as const)\n        },\n        backdrop: {\n            position: 'absolute' as const,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.6)',\n            backdropFilter: 'blur(4px)',\n            WebkitBackdropFilter: 'blur(4px)',\n            opacity: isOpen ? 1 : 0,\n            transition: 'opacity 0.3s ease'\n        },\n        menu: {\n            position: 'absolute' as const,\n            top: 0,\n            right: 0,\n            width,\n            height: '100%',\n            background: 'var(--color-bg-glass)',\n            backdropFilter: 'blur(20px)',\n            WebkitBackdropFilter: 'blur(20px)',\n            borderLeft: '1px solid var(--color-border-primary)',\n            padding,\n            transform: isOpen ? 'translateX(0)' : 'translateX(100%)',\n            transition,\n            display: 'flex',\n            flexDirection: 'column' as const,\n            gap: '32px',\n            overflowY: 'auto' as const\n        }\n    }\n}\n\n/**\n * 获取移动端导航链接样式\n */\nexport function getMobileNavLinkStyles(isActive: boolean) {\n    return {\n        color: isActive ? 'var(--color-text-primary)' : 'var(--color-text-secondary)',\n        fontSize: '18px',\n        fontWeight: isActive ? '600' : '400',\n        textDecoration: 'none',\n        padding: '12px 0',\n        borderBottom: '1px solid rgba(42, 42, 42, 0.3)',\n        transition: 'color 0.3s ease',\n        touchAction: 'manipulation' as const\n    }\n}\n\n/**\n * 创建事件处理器工厂\n */\nexport function createEventHandlers(\n    openModal: (modalType: ModalType, data?: ModalData) => void,\n    setIsMobileMenuOpen: React.Dispatch<React.SetStateAction<boolean>>,\n    toggleTheme: () => void,\n    toggleLanguage: () => void\n) {\n    return {\n        handleLogin: () => {\n            openModal('login')\n            setIsMobileMenuOpen(false)\n        },\n\n        handleRegister: () => {\n            openModal('register')\n            setIsMobileMenuOpen(false)\n        },\n\n        handleUserMenu: () => {\n            console.log('User menu clicked')\n        },\n\n        toggleMobileMenu: () => {\n            setIsMobileMenuOpen(prev => !prev)\n        },\n\n        closeMobileMenu: () => {\n            setIsMobileMenuOpen(false)\n        },\n\n        handleThemeToggle: () => {\n            toggleTheme()\n        },\n\n        handleLanguageToggle: () => {\n            toggleLanguage()\n        }\n    }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2609, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useHeaderScroll.ts"],"sourcesContent":["/**\n * useHeaderScroll Hook\n * \n * 封装Header滚动显示/隐藏逻辑\n * 处理页面切换和滚动事件\n */\n\nimport { useState, useEffect } from 'react'\nimport { createScrollHandler } from '@/lib/headerUtils'\nimport { SCROLL_CONFIG } from '@/constants/headerConfig'\n\ninterface UseHeaderScrollReturn {\n    isVisible: boolean\n    isScrolled: boolean\n    isPageTransitioning: boolean\n}\n\n/**\n * Header滚动处理Hook\n */\nexport function useHeaderScroll(pathname: string): UseHeaderScrollReturn {\n    const [isVisible, setIsVisible] = useState(true)\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [isScrolled, setIsScrolled] = useState(false)\n    const [isPageTransitioning, setIsPageTransitioning] = useState(false)\n\n    // 监听路由变化，在页面切换时暂时禁用滚动隐藏\n    useEffect(() => {\n        setIsPageTransitioning(true)\n        setIsVisible(true)\n\n        const timer = setTimeout(() => {\n            setIsPageTransitioning(false)\n        }, SCROLL_CONFIG.routeTransitionDelay)\n\n        return () => clearTimeout(timer)\n    }, [pathname])\n\n    // 监听滚动事件：滚动时隐藏导航栏，顶部时显示\n    useEffect(() => {\n        const handleScroll = createScrollHandler(\n            isPageTransitioning,\n            lastScrollY,\n            setIsVisible,\n            setIsScrolled,\n            setLastScrollY\n        )\n\n        window.addEventListener('scroll', handleScroll, { passive: true })\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY, isPageTransitioning])\n\n    return {\n        isVisible,\n        isScrolled,\n        isPageTransitioning\n    }\n} "],"names":[],"mappings":"AAAA;;;;;CAKC;;;AAED;AACA;AACA;;;;AAWO,SAAS,gBAAgB,QAAgB;IAC5C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/D,wBAAwB;IACxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,uBAAuB;QACvB,aAAa;QAEb,MAAM,QAAQ,WAAW;YACrB,uBAAuB;QAC3B,GAAG,gIAAA,CAAA,gBAAa,CAAC,oBAAoB;QAErC,OAAO,IAAM,aAAa;IAC9B,GAAG;QAAC;KAAS;IAEb,wBAAwB;IACxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,eAAe,CAAA,GAAA,yHAAA,CAAA,sBAAmB,AAAD,EACnC,qBACA,aACA,cACA,eACA;QAGJ,OAAO,gBAAgB,CAAC,UAAU,cAAc;YAAE,SAAS;QAAK;QAChE,OAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;IACtD,GAAG;QAAC;QAAa;KAAoB;IAErC,OAAO;QACH;QACA;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 2660, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useHomeArticles.ts"],"sourcesContent":["/**\n * useHomeArticles Hook\n * \n * 封装首页文章列表的API逻辑\n * 支持\"最新\"、\"热门\"、\"免费\"三种分类\n */\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { getArticles, checkStrapiConnection } from '@/lib/strapi'\nimport type { ArticleCardData } from '@/components/molecules/ArticleCard/ArticleCard'\n\ninterface UseHomeArticlesReturn {\n    // 状态\n    activeFilter: string\n    isLoading: boolean\n    connectionError: boolean\n\n    // 数据\n    articles: ArticleCardData[]\n    totalCount: number\n\n    // 操作函数\n    handleFilterChange: (filterId: string) => void\n    refetch: () => void\n}\n\n/**\n * 首页文章逻辑Hook (API版本)\n */\nexport function useHomeArticles(): UseHomeArticlesReturn {\n    // 状态管理\n    const [activeFilter, setActiveFilter] = useState('latest')\n    const [isLoading, setIsLoading] = useState(true)\n    const [connectionError, setConnectionError] = useState(false)\n    const [articles, setArticles] = useState<ArticleCardData[]>([])\n    const [totalCount, setTotalCount] = useState(0)\n\n    // 获取文章数据\n    const fetchArticles = useCallback(async (filter: string) => {\n        try {\n            setIsLoading(true)\n            setConnectionError(false)\n\n            // 检查Strapi连接\n            const isConnected = await checkStrapiConnection()\n            if (!isConnected) {\n                setConnectionError(true)\n                setIsLoading(false)\n                return\n            }\n\n            // 准备API参数\n            const apiParams: any = {\n                pageSize: 5, // 首页显示5篇文章，让页面更饱满\n            }\n\n                        // 根据筛选类型配置参数\n            switch (filter) {\n                case 'latest':\n                    // 最新：按发布时间倒序\n                    // getArticles 默认就是按 publishedAt:desc 排序\n                    break\n                    \n                case 'popular':\n                    // 热门：按浏览量倒序\n                    apiParams.sortBy = 'viewCount'\n                    apiParams.sortOrder = 'desc'\n                    break\n            }\n\n            // 调用API\n            console.log('🔍 [useHomeArticles] Calling getArticles with params:', apiParams)\n            const result = await getArticles(apiParams)\n            console.log('🔍 [useHomeArticles] Raw API result:', result)\n\n            // 🔍 调试：输出获取的文章数据\n            if (process.env.NODE_ENV === 'development') {\n                console.log('🔍 [useHomeArticles] Fetched articles:', result.articles.length)\n                console.log('🔍 [useHomeArticles] Full result object:', result)\n                result.articles.forEach((article, index) => {\n                    console.log(`🔍 [useHomeArticles] Article ${index + 1}:`, {\n                        title: article.title,\n                        coverImage: article.coverImage,\n                        hasImage: !!article.coverImage,\n                        fullArticle: article\n                    })\n                })\n            }\n\n            setArticles(result.articles)\n            setTotalCount(result.pagination.total)\n\n        } catch (error) {\n            console.error('获取首页文章失败:', error)\n            setConnectionError(true)\n            setArticles([])\n            setTotalCount(0)\n        } finally {\n            setIsLoading(false)\n        }\n    }, [])\n\n    // 初始数据加载\n    useEffect(() => {\n        fetchArticles(activeFilter)\n    }, [fetchArticles, activeFilter])\n\n    // 筛选处理\n    const handleFilterChange = useCallback((filterId: string) => {\n        setActiveFilter(filterId)\n    }, [])\n\n    // 重新获取数据\n    const refetch = useCallback(() => {\n        fetchArticles(activeFilter)\n    }, [fetchArticles, activeFilter])\n\n    return {\n        // 状态\n        activeFilter,\n        isLoading,\n        connectionError,\n\n        // 数据\n        articles,\n        totalCount,\n\n        // 操作函数\n        handleFilterChange,\n        refetch\n    }\n} "],"names":[],"mappings":"AAAA;;;;;CAKC;;;AAED;AACA;;;AAqBO,SAAS;IACZ,OAAO;IACP,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB,EAAE;IAC9D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,SAAS;IACT,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACrC,IAAI;YACA,aAAa;YACb,mBAAmB;YAEnB,aAAa;YACb,MAAM,cAAc,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD;YAC9C,IAAI,CAAC,aAAa;gBACd,mBAAmB;gBACnB,aAAa;gBACb;YACJ;YAEA,UAAU;YACV,MAAM,YAAiB;gBACnB,UAAU;YACd;YAEY,aAAa;YACzB,OAAQ;gBACJ,KAAK;oBAGD;gBAEJ,KAAK;oBACD,YAAY;oBACZ,UAAU,MAAM,GAAG;oBACnB,UAAU,SAAS,GAAG;oBACtB;YACR;YAEA,QAAQ;YACR,QAAQ,GAAG,CAAC,yDAAyD;YACrE,MAAM,SAAS,MAAM,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;YACjC,QAAQ,GAAG,CAAC,wCAAwC;YAEpD,kBAAkB;YAClB,wCAA4C;gBACxC,QAAQ,GAAG,CAAC,0CAA0C,OAAO,QAAQ,CAAC,MAAM;gBAC5E,QAAQ,GAAG,CAAC,4CAA4C;gBACxD,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS;oBAC9B,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE;wBACtD,OAAO,QAAQ,KAAK;wBACpB,YAAY,QAAQ,UAAU;wBAC9B,UAAU,CAAC,CAAC,QAAQ,UAAU;wBAC9B,aAAa;oBACjB;gBACJ;YACJ;YAEA,YAAY,OAAO,QAAQ;YAC3B,cAAc,OAAO,UAAU,CAAC,KAAK;QAEzC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,aAAa;YAC3B,mBAAmB;YACnB,YAAY,EAAE;YACd,cAAc;QAClB,SAAU;YACN,aAAa;QACjB;IACJ,GAAG,EAAE;IAEL,SAAS;IACT,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,cAAc;IAClB,GAAG;QAAC;QAAe;KAAa;IAEhC,OAAO;IACP,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpC,gBAAgB;IACpB,GAAG,EAAE;IAEL,SAAS;IACT,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACxB,cAAc;IAClB,GAAG;QAAC;QAAe;KAAa;IAEhC,OAAO;QACH,KAAK;QACL;QACA;QACA;QAEA,KAAK;QACL;QACA;QAEA,OAAO;QACP;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 2768, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useBookmarksLogic.ts"],"sourcesContent":["import { useState } from 'react'\nimport { ViewMode, VIEW_MODES, BOOKMARKED_ITEMS } from '@/constants/bookmarksConfig'\n\n/**\n * 收藏页面状态管理Hook\n * \n * 功能：\n * - 管理搜索查询状态\n * - 管理活动过滤器状态\n * - 管理视图模式状态\n * - 提供所有事件处理函数\n */\nexport function useBookmarksLogic() {\n    const [searchQuery, setSearchQuery] = useState('')\n    const [activeFilter, setActiveFilter] = useState('全部')\n    const [viewMode, setViewMode] = useState<ViewMode>(VIEW_MODES.GRID)\n    const [isSearchFocused, setIsSearchFocused] = useState(false)\n\n    // 处理书签点击\n    const handleBookmarkClick = (item: typeof BOOKMARKED_ITEMS[0]) => {\n        console.log('点击收藏内容:', item.title)\n        // 这里可以添加跳转到详情页面的逻辑\n    }\n\n    // 清空搜索\n    const handleSearchClear = () => {\n        setSearchQuery('')\n    }\n\n    // 搜索键盘事件处理\n    const handleSearchKeyDown = (e: React.KeyboardEvent) => {\n        switch (e.key) {\n            case 'Escape':\n                handleSearchClear()\n                e.preventDefault()\n                break\n            case 'Enter':\n                console.log('搜索:', searchQuery)\n                // 这里可以添加搜索逻辑\n                break\n        }\n    }\n\n    // 搜索输入处理\n    const handleSearchChange = (value: string) => {\n        setSearchQuery(value)\n    }\n\n    // 搜索焦点处理\n    const handleSearchFocus = () => {\n        setIsSearchFocused(true)\n    }\n\n    const handleSearchBlur = () => {\n        setIsSearchFocused(false)\n    }\n\n    // 过滤器点击处理\n    const handleFilterClick = (filter: string) => {\n        setActiveFilter(filter)\n        console.log('切换过滤器:', filter)\n    }\n\n    // 视图模式切换处理\n    const handleViewModeChange = (mode: ViewMode) => {\n        setViewMode(mode)\n        console.log('切换视图模式:', mode)\n    }\n\n    // 批量管理处理\n    const handleBatchManage = () => {\n        console.log('批量管理')\n        // 这里可以添加批量管理逻辑\n    }\n\n    return {\n        // 状态\n        searchQuery,\n        activeFilter,\n        viewMode,\n        isSearchFocused,\n\n        // 事件处理函数\n        handleBookmarkClick,\n        handleSearchClear,\n        handleSearchKeyDown,\n        handleSearchChange,\n        handleSearchFocus,\n        handleSearchBlur,\n        handleFilterClick,\n        handleViewModeChange,\n        handleBatchManage\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAWO,SAAS;IACZ,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,mIAAA,CAAA,aAAU,CAAC,IAAI;IAClE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,SAAS;IACT,MAAM,sBAAsB,CAAC;QACzB,QAAQ,GAAG,CAAC,WAAW,KAAK,KAAK;IACjC,mBAAmB;IACvB;IAEA,OAAO;IACP,MAAM,oBAAoB;QACtB,eAAe;IACnB;IAEA,WAAW;IACX,MAAM,sBAAsB,CAAC;QACzB,OAAQ,EAAE,GAAG;YACT,KAAK;gBACD;gBACA,EAAE,cAAc;gBAChB;YACJ,KAAK;gBACD,QAAQ,GAAG,CAAC,OAAO;gBAEnB;QACR;IACJ;IAEA,SAAS;IACT,MAAM,qBAAqB,CAAC;QACxB,eAAe;IACnB;IAEA,SAAS;IACT,MAAM,oBAAoB;QACtB,mBAAmB;IACvB;IAEA,MAAM,mBAAmB;QACrB,mBAAmB;IACvB;IAEA,UAAU;IACV,MAAM,oBAAoB,CAAC;QACvB,gBAAgB;QAChB,QAAQ,GAAG,CAAC,UAAU;IAC1B;IAEA,WAAW;IACX,MAAM,uBAAuB,CAAC;QAC1B,YAAY;QACZ,QAAQ,GAAG,CAAC,WAAW;IAC3B;IAEA,SAAS;IACT,MAAM,oBAAoB;QACtB,QAAQ,GAAG,CAAC;IACZ,eAAe;IACnB;IAEA,OAAO;QACH,KAAK;QACL;QACA;QACA;QACA;QAEA,SAAS;QACT;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 2849, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useSettingsLogic.ts"],"sourcesContent":["import { useState } from 'react'\nimport { INITIAL_FORM_DATA, INITIAL_SECURITY_DATA, TabType } from '@/constants/settingsConfig'\n\n/**\n * 设置页面状态管理Hook\n * \n * 功能：\n * - 管理活动标签页状态\n * - 管理个人信息表单数据\n * - 管理安全设置数据\n * - 提供所有事件处理函数\n */\nexport function useSettingsLogic() {\n    const [activeTab, setActiveTab] = useState<TabType>('profile')\n    const [formData, setFormData] = useState(INITIAL_FORM_DATA)\n    const [securityData, setSecurityData] = useState(INITIAL_SECURITY_DATA)\n\n    // 个人信息表单输入处理\n    const handleInputChange = (field: string, value: string) => {\n        setFormData(prev => ({\n            ...prev,\n            [field]: value\n        }))\n    }\n\n    // 安全设置输入处理\n    const handleSecurityChange = (field: string, value: string | boolean) => {\n        setSecurityData(prev => ({\n            ...prev,\n            [field]: value\n        }))\n    }\n\n    // 重置表单数据\n    const handleReset = () => {\n        if (activeTab === 'profile') {\n            setFormData(INITIAL_FORM_DATA)\n        } else if (activeTab === 'security') {\n            setSecurityData(prev => ({\n                ...prev,\n                currentPassword: '',\n                newPassword: '',\n                confirmPassword: ''\n            }))\n        }\n    }\n\n    // 保存更改\n    const handleSave = () => {\n        if (activeTab === 'profile') {\n            console.log('保存个人信息:', formData)\n            // 这里可以添加API调用逻辑\n        } else if (activeTab === 'security') {\n            console.log('保存安全设置:', securityData)\n            // 这里可以添加API调用逻辑\n        }\n    }\n\n    // 移除设备\n    const handleRemoveDevice = (deviceId: number) => {\n        setSecurityData(prev => ({\n            ...prev,\n            devices: prev.devices.filter(device => device.id !== deviceId)\n        }))\n    }\n\n    // 头像编辑处理\n    const handleAvatarEdit = () => {\n        console.log('Edit avatar clicked')\n        // 这里可以添加头像编辑逻辑\n    }\n\n    return {\n        // 状态\n        activeTab,\n        formData,\n        securityData,\n\n        // 事件处理函数\n        setActiveTab,\n        handleInputChange,\n        handleSecurityChange,\n        handleReset,\n        handleSave,\n        handleRemoveDevice,\n        handleAvatarEdit\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAWO,SAAS;IACZ,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,kIAAA,CAAA,oBAAiB;IAC1D,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,kIAAA,CAAA,wBAAqB;IAEtE,aAAa;IACb,MAAM,oBAAoB,CAAC,OAAe;QACtC,YAAY,CAAA,OAAQ,CAAC;gBACjB,GAAG,IAAI;gBACP,CAAC,MAAM,EAAE;YACb,CAAC;IACL;IAEA,WAAW;IACX,MAAM,uBAAuB,CAAC,OAAe;QACzC,gBAAgB,CAAA,OAAQ,CAAC;gBACrB,GAAG,IAAI;gBACP,CAAC,MAAM,EAAE;YACb,CAAC;IACL;IAEA,SAAS;IACT,MAAM,cAAc;QAChB,IAAI,cAAc,WAAW;YACzB,YAAY,kIAAA,CAAA,oBAAiB;QACjC,OAAO,IAAI,cAAc,YAAY;YACjC,gBAAgB,CAAA,OAAQ,CAAC;oBACrB,GAAG,IAAI;oBACP,iBAAiB;oBACjB,aAAa;oBACb,iBAAiB;gBACrB,CAAC;QACL;IACJ;IAEA,OAAO;IACP,MAAM,aAAa;QACf,IAAI,cAAc,WAAW;YACzB,QAAQ,GAAG,CAAC,WAAW;QACvB,gBAAgB;QACpB,OAAO,IAAI,cAAc,YAAY;YACjC,QAAQ,GAAG,CAAC,WAAW;QACvB,gBAAgB;QACpB;IACJ;IAEA,OAAO;IACP,MAAM,qBAAqB,CAAC;QACxB,gBAAgB,CAAA,OAAQ,CAAC;gBACrB,GAAG,IAAI;gBACP,SAAS,KAAK,OAAO,CAAC,MAAM,CAAC,CAAA,SAAU,OAAO,EAAE,KAAK;YACzD,CAAC;IACL;IAEA,SAAS;IACT,MAAM,mBAAmB;QACrB,QAAQ,GAAG,CAAC;IACZ,eAAe;IACnB;IAEA,OAAO;QACH,KAAK;QACL;QACA;QACA;QAEA,SAAS;QACT;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 2928, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/useSystemConfig.ts"],"sourcesContent":["/**\n * 系统配置相关的React Hooks\n * 提供获取和使用系统配置的便捷方法\n */\n\nimport { useState, useEffect } from 'react'\nimport {\n    getPublicSystemConfig,\n    getEnabledOAuthProviders,\n    validatePassword,\n    isMaintenanceMode,\n    type PublicSystemConfig\n} from '../strapi'\n\n/**\n * 获取公开系统配置的Hook\n */\nexport function useSystemConfig() {\n    const [config, setConfig] = useState<PublicSystemConfig | null>(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        async function fetchConfig() {\n            try {\n                setIsLoading(true)\n                setError(null)\n                \n                // 构建时使用默认配置，避免API连接问题\n                if (typeof window === 'undefined') {\n                    setConfig({\n                        registrationEnabled: true,\n                        emailVerificationEnabled: true,\n                        passwordResetEnabled: true,\n                        verificationCodeLength: 6,\n                        maintenanceMode: false,\n                        oauthAutoRegister: true,\n                        enableUserProfileEdit: true,\n                        enableAccountDeletion: false\n                    })\n                    setIsLoading(false)\n                    return\n                }\n                \n                const configData = await getPublicSystemConfig()\n                setConfig(configData)\n            } catch (err) {\n                setError(err instanceof Error ? err.message : '获取系统配置失败')\n                console.error('获取系统配置失败:', err)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        fetchConfig()\n    }, [])\n\n    return {\n        config, isLoading, error, refetch: () => {\n            setIsLoading(true)\n            setError(null)\n            return getPublicSystemConfig().then(setConfig).finally(() => setIsLoading(false))\n        }\n    }\n}\n\n/**\n * 获取启用的OAuth提供商列表的Hook\n */\nexport function useOAuthProviders() {\n    const [providers, setProviders] = useState<string[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        async function fetchProviders() {\n            try {\n                setIsLoading(true)\n                setError(null)\n                const enabledProviders = await getEnabledOAuthProviders()\n                setProviders(enabledProviders)\n            } catch (err) {\n                setError(err instanceof Error ? err.message : '获取OAuth提供商失败')\n                console.error('获取OAuth提供商失败:', err)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        fetchProviders()\n    }, [])\n\n    return { providers, isLoading, error }\n}\n\n/**\n * 密码验证Hook\n */\nexport function usePasswordValidation() {\n    const [validationResult, setValidationResult] = useState<{\n        isValid: boolean\n        errors: string[]\n    } | null>(null)\n    const [isValidating, setIsValidating] = useState(false)\n\n    const validatePasswordAsync = async (password: string) => {\n        if (!password) {\n            setValidationResult({ isValid: false, errors: ['密码不能为空'] })\n            return\n        }\n\n        try {\n            setIsValidating(true)\n            const result = await validatePassword(password)\n            setValidationResult(result)\n            return result\n        } catch (err) {\n            console.error('密码验证失败:', err)\n            setValidationResult({ isValid: false, errors: ['密码验证失败'] })\n        } finally {\n            setIsValidating(false)\n        }\n    }\n\n    return {\n        validationResult,\n        isValidating,\n        validatePassword: validatePasswordAsync,\n        clearValidation: () => setValidationResult(null)\n    }\n}\n\n/**\n * 维护模式检查Hook\n */\nexport function useMaintenanceMode() {\n    const [maintenanceMode, setMaintenanceMode] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        async function checkMaintenanceMode() {\n            try {\n                setIsLoading(true)\n                setError(null)\n                const isInMaintenance = await isMaintenanceMode()\n                setMaintenanceMode(isInMaintenance)\n            } catch (err) {\n                setError(err instanceof Error ? err.message : '检查维护模式失败')\n                console.error('检查维护模式失败:', err)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        checkMaintenanceMode()\n    }, [])\n\n    return { maintenanceMode, isLoading, error }\n}\n\n/**\n * 注册功能可用性检查Hook\n */\nexport function useRegistrationAvailability() {\n    const { config, isLoading, error } = useSystemConfig()\n\n    return {\n        isRegistrationEnabled: config?.registrationEnabled || false,\n        isEmailVerificationEnabled: config?.emailVerificationEnabled || false,\n        isPasswordResetEnabled: config?.passwordResetEnabled || false,\n        isLoading,\n        error\n    }\n}\n\n/**\n * OAuth功能可用性检查Hook\n */\nexport function useOAuthAvailability() {\n    const { config, isLoading, error } = useSystemConfig()\n\n    return {\n        isOAuthEnabled: config?.oauthEnabled || false,\n        isGitHubEnabled: config?.githubOauthEnabled || false,\n        isGoogleEnabled: config?.googleOauthEnabled || false,\n        isWeChatEnabled: config?.wechatOauthEnabled || false,\n        isQQEnabled: config?.qqOauthEnabled || false,\n        autoRegister: config?.oauthAutoRegister || false,\n        isLoading,\n        error\n    }\n}\n\n/**\n * 用户功能权限检查Hook\n */\nexport function useUserPermissions() {\n    const { config, isLoading, error } = useSystemConfig()\n\n    return {\n        canEditProfile: config?.enableUserProfileEdit || false,\n        canDeleteAccount: config?.enableAccountDeletion || false,\n        isLoading,\n        error\n    }\n}\n\n/**\n * 密码策略Hook\n */\nexport function usePasswordPolicy() {\n    const { config, isLoading, error } = useSystemConfig()\n\n    return {\n        minLength: config?.passwordMinLength || 8,\n        requireSpecialChar: config?.passwordRequireSpecialChar || false,\n        requireNumber: config?.passwordRequireNumber || false,\n        requireUppercase: config?.passwordRequireUppercase || false,\n        isLoading,\n        error,\n        getPolicyDescription: () => {\n            if (!config) return '加载密码策略中...'\n\n            const requirements = []\n            requirements.push(`至少${config.passwordMinLength}个字符`)\n            if (config.passwordRequireNumber) requirements.push('包含数字')\n            if (config.passwordRequireSpecialChar) requirements.push('包含特殊字符')\n            if (config.passwordRequireUppercase) requirements.push('包含大写字母')\n\n            return `密码要求：${requirements.join('、')}`\n        }\n    }\n}\n\n/**\n * 系统状态综合Hook\n */\nexport function useSystemStatus() {\n    const { config, isLoading: configLoading } = useSystemConfig()\n    const { maintenanceMode, isLoading: maintenanceLoading } = useMaintenanceMode()\n\n    return {\n        isSystemReady: !configLoading && !maintenanceLoading && !maintenanceMode,\n        isMaintenanceMode: maintenanceMode,\n        maintenanceMessage: config?.maintenanceMessage || '网站正在维护中，请稍后访问。',\n        isLoading: configLoading || maintenanceLoading,\n        emailVerificationEnabled: config?.emailVerificationEnabled || false\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3149, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/index.ts"],"sourcesContent":["/**\n * Hooks 统一导出\n * \n * 项目中所有自定义Hook的统一导出入口\n */\n\n// 移动端手势相关\nexport { useGestures, useSimpleGestures } from './useGestures'\nexport { useTouchFeedback, useSimpleTouchFeedback } from './useTouchFeedback'\n\n// 现有的hooks\nexport { useWeeklyLogicWithAPI } from './useWeeklyLogicWithAPI'\n\n// UI相关hooks\nexport { useSubtitleColorFix } from './useSubtitleColorFix'\nexport { useHeaderScroll } from './useHeaderScroll'\n\n// 数据获取hooks\nexport { useHomeArticles } from './useHomeArticles'\nexport { useBookmarksLogic } from './useBookmarksLogic'\nexport { useSettingsLogic } from './useSettingsLogic'\n\n// 系统配置hooks\nexport { \n  useSystemConfig, \n  useOAuthAvailability, \n  usePasswordPolicy, \n  usePasswordValidation \n} from './useSystemConfig'"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,UAAU;;AACV;AACA;AAEA,WAAW;AACX;AAEA,YAAY;AACZ;AACA;AAEA,YAAY;AACZ;AACA;AACA;AAEA,YAAY;AACZ","debugId":null}},
    {"offset": {"line": 3196, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx'\n\nexport function cn(...inputs: ClassValue[]) {\n    return clsx(inputs)\n} "],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACtC,OAAO,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AAChB","debugId":null}},
    {"offset": {"line": 3208, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/validations.ts"],"sourcesContent":["import { z } from 'zod'\n\n// 用户注册表单验证模式\nexport const registerSchema = z.object({\n    username: z.string()\n        .min(2, '用户名至少需要2个字符')\n        .max(20, '用户名不能超过20个字符')\n        .regex(/^[a-zA-Z0-9_\\u4e00-\\u9fa5]+$/, '用户名只能包含字母、数字、下划线和中文'),\n\n    email: z.string()\n        .email('请输入有效的邮箱地址'),\n\n    password: z.string()\n        .min(8, '密码至少需要8个字符')\n        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, '密码必须包含大小写字母和数字'),\n\n    confirmPassword: z.string(),\n\n    agreeToTerms: z.boolean()\n        .refine(val => val === true, '请同意用户协议和隐私政策')\n}).refine((data) => data.password === data.confirmPassword, {\n    message: \"密码确认不匹配\",\n    path: [\"confirmPassword\"],\n})\n\n// 用户登录表单验证模式\nexport const loginSchema = z.object({\n    emailOrUsername: z.string()\n        .min(1, '请输入邮箱或用户名'),\n\n    password: z.string()\n        .min(1, '请输入密码'),\n\n    rememberMe: z.boolean().optional()\n})\n\n// 忘记密码表单验证模式\nexport const forgotPasswordSchema = z.object({\n    email: z.string()\n        .email('请输入有效的邮箱地址')\n})\n\n// 密码强度评估\nexport function getPasswordStrength(password: string): { score: number; feedback: string[] } {\n    let score = 0\n    const feedback: string[] = []\n\n    if (password.length >= 8) score++\n    else feedback.push('至少8个字符')\n\n    if (/[a-z]/.test(password)) score++\n    else feedback.push('包含小写字母')\n\n    if (/[A-Z]/.test(password)) score++\n    else feedback.push('包含大写字母')\n\n    if (/\\d/.test(password)) score++\n    else feedback.push('包含数字')\n\n    if (/[^a-zA-Z0-9]/.test(password)) score++\n    else feedback.push('包含特殊字符')\n\n    if (password.length >= 12) score++\n\n    return { score, feedback }\n}\n\n// 表单验证结果类型\nexport interface ValidationResult {\n    success: boolean\n    errors?: string[]\n}\n\n// 通用验证函数\nexport function validateForm(schema: z.ZodSchema, data: unknown): ValidationResult {\n    try {\n        schema.parse(data)\n        return { success: true }\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            return {\n                success: false,\n                errors: error.issues.map(issue => issue.message)\n            }\n        }\n        return { success: false, errors: ['验证失败'] }\n    }\n}\n\n// 表单数据类型导出\nexport type RegisterFormData = z.infer<typeof registerSchema>\nexport type LoginFormData = z.infer<typeof loginSchema>\nexport type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema> "],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,iBAAiB,6KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,6KAAA,CAAA,IAAC,CAAC,MAAM,GACb,GAAG,CAAC,GAAG,eACP,GAAG,CAAC,IAAI,gBACR,KAAK,CAAC,gCAAgC;IAE3C,OAAO,6KAAA,CAAA,IAAC,CAAC,MAAM,GACV,KAAK,CAAC;IAEX,UAAU,6KAAA,CAAA,IAAC,CAAC,MAAM,GACb,GAAG,CAAC,GAAG,cACP,KAAK,CAAC,mCAAmC;IAE9C,iBAAiB,6KAAA,CAAA,IAAC,CAAC,MAAM;IAEzB,cAAc,6KAAA,CAAA,IAAC,CAAC,OAAO,GAClB,MAAM,CAAC,CAAA,MAAO,QAAQ,MAAM;AACrC,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IACxD,SAAS;IACT,MAAM;QAAC;KAAkB;AAC7B;AAGO,MAAM,cAAc,6KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,iBAAiB,6KAAA,CAAA,IAAC,CAAC,MAAM,GACpB,GAAG,CAAC,GAAG;IAEZ,UAAU,6KAAA,CAAA,IAAC,CAAC,MAAM,GACb,GAAG,CAAC,GAAG;IAEZ,YAAY,6KAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;AACpC;AAGO,MAAM,uBAAuB,6KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,OAAO,6KAAA,CAAA,IAAC,CAAC,MAAM,GACV,KAAK,CAAC;AACf;AAGO,SAAS,oBAAoB,QAAgB;IAChD,IAAI,QAAQ;IACZ,MAAM,WAAqB,EAAE;IAE7B,IAAI,SAAS,MAAM,IAAI,GAAG;SACrB,SAAS,IAAI,CAAC;IAEnB,IAAI,QAAQ,IAAI,CAAC,WAAW;SACvB,SAAS,IAAI,CAAC;IAEnB,IAAI,QAAQ,IAAI,CAAC,WAAW;SACvB,SAAS,IAAI,CAAC;IAEnB,IAAI,KAAK,IAAI,CAAC,WAAW;SACpB,SAAS,IAAI,CAAC;IAEnB,IAAI,eAAe,IAAI,CAAC,WAAW;SAC9B,SAAS,IAAI,CAAC;IAEnB,IAAI,SAAS,MAAM,IAAI,IAAI;IAE3B,OAAO;QAAE;QAAO;IAAS;AAC7B;AASO,SAAS,aAAa,MAAmB,EAAE,IAAa;IAC3D,IAAI;QACA,OAAO,KAAK,CAAC;QACb,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,IAAI,iBAAiB,6KAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC7B,OAAO;gBACH,SAAS;gBACT,QAAQ,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,OAAO;YACnD;QACJ;QACA,OAAO;YAAE,SAAS;YAAO,QAAQ;gBAAC;aAAO;QAAC;IAC9C;AACJ","debugId":null}},
    {"offset": {"line": 3281, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/membership.ts"],"sourcesContent":["export interface MembershipPlan {\n    id: string\n    name: string\n    description: string\n    price: {\n        monthly: number\n        annually: number\n    }\n    originalPrice?: {\n        monthly: number\n        annually: number\n    }\n    features: string[]\n    highlighted?: boolean\n    badge?: string\n    popular?: boolean\n}\n\nexport interface PaymentMethod {\n    id: string\n    name: string\n    icon: string\n    description?: string\n    enabled: boolean\n}\n\nexport type BillingCycle = 'monthly' | 'annually'\n\nexport const membershipPlans: MembershipPlan[] = [\n    {\n        id: 'free',\n        name: '免费版',\n        description: '体验AI变现的基础功能',\n        price: {\n            monthly: 0,\n            annually: 0,\n        },\n        features: [\n            '基础AI工具推荐',\n            '每周精选内容',\n            '社区基础权限',\n            '有限的教程访问',\n        ],\n    },\n    {\n        id: 'pro',\n        name: '专业版',\n        description: '解锁完整功能，助力AI变现',\n        price: {\n            monthly: 99,\n            annually: 999,\n        },\n        originalPrice: {\n            monthly: 199,\n            annually: 1999,\n        },\n        features: [\n            '完整AI工具库访问',\n            '独家变现案例分析',\n            '专业技术指导',\n            'VIP社群权限',\n            '月度专家直播',\n            '1对1咨询机会',\n        ],\n        highlighted: true,\n        badge: '最受欢迎',\n        popular: true,\n    },\n    {\n        id: 'enterprise',\n        name: '企业版',\n        description: '为团队和企业量身定制',\n        price: {\n            monthly: 299,\n            annually: 2999,\n        },\n        originalPrice: {\n            monthly: 499,\n            annually: 4999,\n        },\n        features: [\n            '专业版所有功能',\n            '团队协作工具',\n            '企业级技术支持',\n            '定制化咨询服务',\n            '专属客户经理',\n            '白标解决方案',\n            'API访问权限',\n        ],\n        badge: '企业首选',\n    },\n]\n\nexport const paymentMethods: PaymentMethod[] = [\n    {\n        id: 'wechat',\n        name: '微信支付',\n        icon: 'wechat-pay-icon',\n        description: '使用微信扫码支付',\n        enabled: true,\n    },\n    {\n        id: 'alipay',\n        name: '支付宝',\n        icon: 'alipay-icon',\n        description: '使用支付宝扫码支付',\n        enabled: true,\n    },\n    {\n        id: 'unionpay',\n        name: '银联支付',\n        icon: 'unionpay-icon',\n        description: '银行卡在线支付',\n        enabled: true,\n    },\n]\n\nexport const calculateDiscount = (monthly: number, annually: number): number => {\n    const monthlyTotal = monthly * 12\n    const discount = ((monthlyTotal - annually) / monthlyTotal) * 100\n    return Math.round(discount)\n}\n\nexport const formatPrice = (price: number): string => {\n    return price === 0 ? '免费' : `¥${price}`\n}\n\nexport const getMembershipBenefits = () => [\n    {\n        icon: 'ai-tool-library',\n        title: '海量AI工具库',\n        description: '200+ 精选AI工具，覆盖创作、编程、设计等各个领域',\n    },\n    {\n        icon: 'practical-experience',\n        title: '实战案例分析',\n        description: '真实的AI变现案例，详细的操作步骤和盈利数据',\n    },\n    {\n        icon: 'one-on-one-consulting',\n        title: '专家1对1指导',\n        description: '资深AI变现专家提供个性化指导和答疑',\n    },\n    {\n        icon: 'community-support',\n        title: 'VIP专属社群',\n        description: '与同行交流经验，获取第一手行业资讯',\n    },\n    {\n        icon: 'continuous-update',\n        title: '持续内容更新',\n        description: '每周新增工具和案例，紧跟AI发展趋势',\n    },\n    {\n        icon: 'success-cases',\n        title: '成功保障',\n        description: '30天内无效果，无条件退款保障',\n    },\n] "],"names":[],"mappings":";;;;;;;AA4BO,MAAM,kBAAoC;IAC7C;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YACH,SAAS;YACT,UAAU;QACd;QACA,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;IACA;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YACH,SAAS;YACT,UAAU;QACd;QACA,eAAe;YACX,SAAS;YACT,UAAU;QACd;QACA,UAAU;YACN;YACA;YACA;YACA;YACA;YACA;SACH;QACD,aAAa;QACb,OAAO;QACP,SAAS;IACb;IACA;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YACH,SAAS;YACT,UAAU;QACd;QACA,eAAe;YACX,SAAS;YACT,UAAU;QACd;QACA,UAAU;YACN;YACA;YACA;YACA;YACA;YACA;YACA;SACH;QACD,OAAO;IACX;CACH;AAEM,MAAM,iBAAkC;IAC3C;QACI,IAAI;QACJ,MAAM;QACN,MAAM;QACN,aAAa;QACb,SAAS;IACb;IACA;QACI,IAAI;QACJ,MAAM;QACN,MAAM;QACN,aAAa;QACb,SAAS;IACb;IACA;QACI,IAAI;QACJ,MAAM;QACN,MAAM;QACN,aAAa;QACb,SAAS;IACb;CACH;AAEM,MAAM,oBAAoB,CAAC,SAAiB;IAC/C,MAAM,eAAe,UAAU;IAC/B,MAAM,WAAW,AAAC,CAAC,eAAe,QAAQ,IAAI,eAAgB;IAC9D,OAAO,KAAK,KAAK,CAAC;AACtB;AAEO,MAAM,cAAc,CAAC;IACxB,OAAO,UAAU,IAAI,OAAO,CAAC,CAAC,EAAE,OAAO;AAC3C;AAEO,MAAM,wBAAwB,IAAM;QACvC;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;QACA;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;QACA;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;QACA;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;QACA;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;QACA;YACI,MAAM;YACN,OAAO;YACP,aAAa;QACjB;KACH","debugId":null}},
    {"offset": {"line": 3419, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/i18n.ts"],"sourcesContent":["export type Language = 'zh' | 'en'\n\n// 翻译值类型：可以是字符串或嵌套对象\ntype TranslationValue = string | { [key: string]: TranslationValue }\n\n// 翻译对象类型\ninterface TranslationObject {\n    [key: string]: TranslationValue\n}\n\nexport const translations: Record<Language, TranslationObject> = {\n    zh: {\n        nav: {\n            discover: '发现',\n            weekly: '周刊',\n            about: '关于'\n        },\n        buttons: {\n            login: '登录',\n            register: '注册',\n            subscribe: '立即订阅',\n            readMore: '阅读更多',\n            viewAll: '查看全部',\n            download: '下载'\n        },\n        common: {\n            loading: '加载中...',\n            search: '搜索',\n            more: '更多',\n            date: '日期',\n            author: '作者',\n            tags: '标签',\n            views: '浏览量',\n            likes: '点赞'\n        },\n        hero: {\n            title: 'AI变现之路',\n            subtitle: '探索人工智能商业化的无限可能',\n            description: '从技术到商业，从创意到现实，我们为您提供最前沿的AI变现策略和实战经验'\n        },\n        sections: {\n            featuredArticles: '精选文章',\n            latestNews: '最新资讯',\n            resources: '免费资源',\n            caseStudies: '成功案例'\n        },\n        footer: {\n            copyright: '© 2024 AI变现之路. 保留所有权利.',\n            privacy: '隐私政策',\n            terms: '服务条款',\n            contact: '联系我们'\n        }\n    },\n    en: {\n        nav: {\n            discover: 'Discover',\n            weekly: 'Weekly',\n            about: 'About'\n        },\n        buttons: {\n            login: 'Login',\n            register: 'Register',\n            subscribe: 'Subscribe Now',\n            readMore: 'Read More',\n            viewAll: 'View All',\n            download: 'Download'\n        },\n        common: {\n            loading: 'Loading...',\n            search: 'Search',\n            more: 'More',\n            date: 'Date',\n            author: 'Author',\n            tags: 'Tags',\n            views: 'Views',\n            likes: 'Likes'\n        },\n        hero: {\n            title: 'AI Monetization Path',\n            subtitle: 'Explore Unlimited AI Business Opportunities',\n            description: 'From technology to business, from ideas to reality, we provide cutting-edge AI monetization strategies and practical experience'\n        },\n        sections: {\n            featuredArticles: 'Featured Articles',\n            latestNews: 'Latest News',\n            resources: 'Free Resources',\n            caseStudies: 'Case Studies'\n        },\n        footer: {\n            copyright: '© 2024 AI Monetization Path. All rights reserved.',\n            privacy: 'Privacy Policy',\n            terms: 'Terms of Service',\n            contact: 'Contact Us'\n        }\n    }\n}\n\nexport const getTranslation = (language: Language, key: string): string => {\n    const keys = key.split('.')\n    let translation: TranslationValue = translations[language]\n\n    for (const k of keys) {\n        if (translation && typeof translation === 'object' && k in translation) {\n            translation = translation[k]\n        } else {\n            // 如果找不到翻译，回退到中文\n            translation = translations.zh\n            for (const fallbackKey of keys) {\n                if (translation && typeof translation === 'object' && fallbackKey in translation) {\n                    translation = translation[fallbackKey]\n                } else {\n                    return key // 如果中文也找不到，返回key本身\n                }\n            }\n            break\n        }\n    }\n\n    return typeof translation === 'string' ? translation : key\n} "],"names":[],"mappings":";;;;AAUO,MAAM,eAAoD;IAC7D,IAAI;QACA,KAAK;YACD,UAAU;YACV,QAAQ;YACR,OAAO;QACX;QACA,SAAS;YACL,OAAO;YACP,UAAU;YACV,WAAW;YACX,UAAU;YACV,SAAS;YACT,UAAU;QACd;QACA,QAAQ;YACJ,SAAS;YACT,QAAQ;YACR,MAAM;YACN,MAAM;YACN,QAAQ;YACR,MAAM;YACN,OAAO;YACP,OAAO;QACX;QACA,MAAM;YACF,OAAO;YACP,UAAU;YACV,aAAa;QACjB;QACA,UAAU;YACN,kBAAkB;YAClB,YAAY;YACZ,WAAW;YACX,aAAa;QACjB;QACA,QAAQ;YACJ,WAAW;YACX,SAAS;YACT,OAAO;YACP,SAAS;QACb;IACJ;IACA,IAAI;QACA,KAAK;YACD,UAAU;YACV,QAAQ;YACR,OAAO;QACX;QACA,SAAS;YACL,OAAO;YACP,UAAU;YACV,WAAW;YACX,UAAU;YACV,SAAS;YACT,UAAU;QACd;QACA,QAAQ;YACJ,SAAS;YACT,QAAQ;YACR,MAAM;YACN,MAAM;YACN,QAAQ;YACR,MAAM;YACN,OAAO;YACP,OAAO;QACX;QACA,MAAM;YACF,OAAO;YACP,UAAU;YACV,aAAa;QACjB;QACA,UAAU;YACN,kBAAkB;YAClB,YAAY;YACZ,WAAW;YACX,aAAa;QACjB;QACA,QAAQ;YACJ,WAAW;YACX,SAAS;YACT,OAAO;YACP,SAAS;QACb;IACJ;AACJ;AAEO,MAAM,iBAAiB,CAAC,UAAoB;IAC/C,MAAM,OAAO,IAAI,KAAK,CAAC;IACvB,IAAI,cAAgC,YAAY,CAAC,SAAS;IAE1D,KAAK,MAAM,KAAK,KAAM;QAClB,IAAI,eAAe,OAAO,gBAAgB,YAAY,KAAK,aAAa;YACpE,cAAc,WAAW,CAAC,EAAE;QAChC,OAAO;YACH,gBAAgB;YAChB,cAAc,aAAa,EAAE;YAC7B,KAAK,MAAM,eAAe,KAAM;gBAC5B,IAAI,eAAe,OAAO,gBAAgB,YAAY,eAAe,aAAa;oBAC9E,cAAc,WAAW,CAAC,YAAY;gBAC1C,OAAO;oBACH,OAAO,IAAI,mBAAmB;;gBAClC;YACJ;YACA;QACJ;IACJ;IAEA,OAAO,OAAO,gBAAgB,WAAW,cAAc;AAC3D","debugId":null}},
    {"offset": {"line": 3535, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/useTranslation.ts"],"sourcesContent":["import { useLanguageStore } from '@/stores'\nimport { getTranslation, Language } from './i18n'\n\nexport const useTranslation = () => {\n    const { language } = useLanguageStore()\n\n    const t = (key: string): string => {\n        return getTranslation(language, key)\n    }\n\n    return {\n        t,\n        language,\n        isZh: language === 'zh',\n        isEn: language === 'en'\n    }\n} "],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,MAAM,iBAAiB;IAC1B,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD;IAEpC,MAAM,IAAI,CAAC;QACP,OAAO,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD,EAAE,UAAU;IACpC;IAEA,OAAO;QACH;QACA;QACA,MAAM,aAAa;QACnB,MAAM,aAAa;IACvB;AACJ","debugId":null}},
    {"offset": {"line": 3559, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/index.ts"],"sourcesContent":["/**\n * 通用库函数导出文件\n * \n * 统一导出所有工具函数和API客户端\n */\n\nexport * from './utils'\nexport * from './validations'\nexport * from './tags'\nexport * from './membership'\nexport * from './strapi'\nexport * from './i18n'\nexport * from './useTranslation' "],"names":[],"mappings":"AAAA;;;;CAIC;AAED;AACA;AACA;AACA;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 3595, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/usePaymentMethods.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { strapiApi } from '@/lib/strapi';\n\nexport interface PaymentMethod {\n  id: string;\n  name: string;\n  icon: string;\n  supportedMethods: Record<string, boolean>;\n  supportedCurrencies?: string[];\n}\n\nexport interface PaymentConfig {\n  availableMethods: PaymentMethod[];\n  environment: 'sandbox' | 'production';\n  general: {\n    siteName: string;\n    paymentTimeout: number;\n    minPaymentAmount: number;\n    maxPaymentAmount: number;\n  };\n}\n\nexport interface UsePaymentMethodsResult {\n  paymentMethods: PaymentMethod[];\n  config: PaymentConfig | null;\n  isLoading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  isMethodAvailable: (methodId: string) => boolean;\n  getMethodByType: (methodId: string) => PaymentMethod | undefined;\n}\n\n/**\n * 获取可用支付方式的Hook\n * 根据后台配置动态返回启用的支付方式\n */\nexport function usePaymentMethods(): UsePaymentMethodsResult {\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\n  const [config, setConfig] = useState<PaymentConfig | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPaymentMethods = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await strapiApi.get('/api/payment-config/available-methods');\n      \n      if (response.data?.success) {\n        const { availableMethods, environment, general } = response.data.data;\n        \n        setPaymentMethods(availableMethods || []);\n        setConfig({\n          availableMethods: availableMethods || [],\n          environment,\n          general\n        });\n      } else {\n        throw new Error('获取支付方式失败');\n      }\n    } catch (err: any) {\n      console.error('获取支付方式错误:', err);\n      setError(err.message || '获取支付方式失败');\n      setPaymentMethods([]);\n      setConfig(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPaymentMethods();\n  }, []);\n\n  const isMethodAvailable = (methodId: string): boolean => {\n    return paymentMethods.some(method => method.id === methodId);\n  };\n\n  const getMethodByType = (methodId: string): PaymentMethod | undefined => {\n    return paymentMethods.find(method => method.id === methodId);\n  };\n\n  return {\n    paymentMethods,\n    config,\n    isLoading,\n    error,\n    refetch: fetchPaymentMethods,\n    isMethodAvailable,\n    getMethodByType\n  };\n}\n\n/**\n * 检查特定支付方式是否支持某种方法\n */\nexport function usePaymentMethodSupport(methodId: string, methodType: string) {\n  const { getMethodByType } = usePaymentMethods();\n  const method = getMethodByType(methodId);\n  \n  return method?.supportedMethods?.[methodType] || false;\n}\n\n/**\n * 获取支付方式的显示信息\n */\nexport function usePaymentMethodDisplay() {\n  const { paymentMethods, config } = usePaymentMethods();\n\n  const getMethodIcon = (methodId: string): string => {\n    const method = paymentMethods.find(m => m.id === methodId);\n    return method?.icon || '/icons/payment-default.svg';\n  };\n\n  const getMethodName = (methodId: string): string => {\n    const method = paymentMethods.find(m => m.id === methodId);\n    return method?.name || '未知支付方式';\n  };\n\n  const formatMethodsList = () => {\n    return paymentMethods.map(method => ({\n      value: method.id,\n      label: method.name,\n      icon: method.icon,\n      disabled: false\n    }));\n  };\n\n  return {\n    getMethodIcon,\n    getMethodName,\n    formatMethodsList,\n    environment: config?.environment || 'sandbox',\n    siteName: config?.general?.siteName || 'AI变现之路'\n  };\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAmCO,SAAS;IACd,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB,EAAE;IACxE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAwB;IAC3D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,sBAAsB;QAC1B,IAAI;YACF,aAAa;YACb,SAAS;YAET,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC;YAErC,IAAI,SAAS,IAAI,EAAE,SAAS;gBAC1B,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,SAAS,IAAI,CAAC,IAAI;gBAErE,kBAAkB,oBAAoB,EAAE;gBACxC,UAAU;oBACR,kBAAkB,oBAAoB,EAAE;oBACxC;oBACA;gBACF;YACF,OAAO;gBACL,MAAM,IAAI,MAAM;YAClB;QACF,EAAE,OAAO,KAAU;YACjB,QAAQ,KAAK,CAAC,aAAa;YAC3B,SAAS,IAAI,OAAO,IAAI;YACxB,kBAAkB,EAAE;YACpB,UAAU;QACZ,SAAU;YACR,aAAa;QACf;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,oBAAoB,CAAC;QACzB,OAAO,eAAe,IAAI,CAAC,CAAA,SAAU,OAAO,EAAE,KAAK;IACrD;IAEA,MAAM,kBAAkB,CAAC;QACvB,OAAO,eAAe,IAAI,CAAC,CAAA,SAAU,OAAO,EAAE,KAAK;IACrD;IAEA,OAAO;QACL;QACA;QACA;QACA;QACA,SAAS;QACT;QACA;IACF;AACF;AAKO,SAAS,wBAAwB,QAAgB,EAAE,UAAkB;IAC1E,MAAM,EAAE,eAAe,EAAE,GAAG;IAC5B,MAAM,SAAS,gBAAgB;IAE/B,OAAO,QAAQ,kBAAkB,CAAC,WAAW,IAAI;AACnD;AAKO,SAAS;IACd,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG;IAEnC,MAAM,gBAAgB,CAAC;QACrB,MAAM,SAAS,eAAe,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACjD,OAAO,QAAQ,QAAQ;IACzB;IAEA,MAAM,gBAAgB,CAAC;QACrB,MAAM,SAAS,eAAe,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACjD,OAAO,QAAQ,QAAQ;IACzB;IAEA,MAAM,oBAAoB;QACxB,OAAO,eAAe,GAAG,CAAC,CAAA,SAAU,CAAC;gBACnC,OAAO,OAAO,EAAE;gBAChB,OAAO,OAAO,IAAI;gBAClB,MAAM,OAAO,IAAI;gBACjB,UAAU;YACZ,CAAC;IACH;IAEA,OAAO;QACL;QACA;QACA;QACA,aAAa,QAAQ,eAAe;QACpC,UAAU,QAAQ,SAAS,YAAY;IACzC;AACF","debugId":null}},
    {"offset": {"line": 3688, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/hooks/usePayment.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { strapiApi } from '@/lib/strapi';\n\nexport interface PaymentOrder {\n  orderId: string;\n  paymentMethod: string;\n  amount: number;\n  currency?: string;\n  productName: string;\n  returnUrl?: string;\n  cancelUrl?: string;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  paymentId?: string;\n  paymentData?: {\n    type: 'redirect' | 'jsapi' | 'stripe_elements' | 'qrcode';\n    url?: string;\n    params?: any;\n    clientSecret?: string;\n    qrCode?: string;\n  };\n  message?: string;\n}\n\nexport interface PaymentStatus {\n  paymentNo: string;\n  status: 'pending' | 'success' | 'failed' | 'cancelled' | 'refunded';\n  amount?: number;\n  orderId?: string;\n  orderNo?: string;\n  thirdPartyTransactionId?: string;\n  completedAt?: string;\n  message?: string;\n}\n\nexport interface PaymentHistory {\n  id: string;\n  paymentNo: string;\n  amount: number;\n  status: string;\n  statusText: string;\n  paymentMethod: string;\n  paymentMethodText: string;\n  createdAt: string;\n  completedAt?: string;\n  failReason?: string;\n  order?: {\n    id: string;\n    orderNo: string;\n    productType: string;\n    productName: string;\n  };\n}\n\n/**\n * 支付相关操作Hook\n */\nexport function usePayment() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * 创建支付\n   */\n  const createPayment = useCallback(async (orderData: PaymentOrder): Promise<PaymentResult | null> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await strapiApi.post('/api/payments/create', orderData);\n\n      if (response.data?.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data?.message || '创建支付失败');\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.error?.message || err.message || '创建支付失败';\n      setError(errorMessage);\n      console.error('创建支付错误:', err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * 查询支付状态\n   */\n  const getPaymentStatus = useCallback(async (paymentNo: string): Promise<PaymentStatus | null> => {\n    try {\n      setError(null);\n\n      const response = await strapiApi.get(`/api/payments/status/${paymentNo}`);\n\n      if (response.data?.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data?.message || '查询支付状态失败');\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.error?.message || err.message || '查询支付状态失败';\n      setError(errorMessage);\n      console.error('查询支付状态错误:', err);\n      return null;\n    }\n  }, []);\n\n  /**\n   * 取消支付\n   */\n  const cancelPayment = useCallback(async (paymentNo: string): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await strapiApi.post(`/api/payments/cancel/${paymentNo}`);\n\n      if (response.data?.success) {\n        return true;\n      } else {\n        throw new Error(response.data?.message || '取消支付失败');\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.error?.message || err.message || '取消支付失败';\n      setError(errorMessage);\n      console.error('取消支付错误:', err);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * 申请退款\n   */\n  const requestRefund = useCallback(async (paymentNo: string, refundAmount?: number, reason?: string): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await strapiApi.post(`/api/payments/refund/${paymentNo}`, {\n        refundAmount,\n        reason\n      });\n\n      if (response.data?.success) {\n        return true;\n      } else {\n        throw new Error(response.data?.message || '申请退款失败');\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.error?.message || err.message || '申请退款失败';\n      setError(errorMessage);\n      console.error('申请退款错误:', err);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return {\n    createPayment,\n    getPaymentStatus,\n    cancelPayment,\n    requestRefund,\n    isLoading,\n    error,\n    clearError: () => setError(null)\n  };\n}\n\n/**\n * 支付历史Hook\n */\nexport function usePaymentHistory() {\n  const [payments, setPayments] = useState<PaymentHistory[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    pageSize: 10,\n    pageCount: 0,\n    total: 0\n  });\n\n  /**\n   * 获取支付历史\n   */\n  const fetchPaymentHistory = useCallback(async (page: number = 1, pageSize: number = 10, status?: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const params: any = { page, pageSize };\n      if (status) {\n        params.status = status;\n      }\n\n      const response = await strapiApi.get('/api/payments/history', { params });\n\n      if (response.data?.success) {\n        setPayments(response.data.data);\n        setPagination(response.data.pagination);\n      } else {\n        throw new Error('获取支付历史失败');\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.error?.message || err.message || '获取支付历史失败';\n      setError(errorMessage);\n      console.error('获取支付历史错误:', err);\n      setPayments([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * 刷新支付历史\n   */\n  const refreshHistory = useCallback(() => {\n    fetchPaymentHistory(pagination.page, pagination.pageSize);\n  }, [fetchPaymentHistory, pagination.page, pagination.pageSize]);\n\n  return {\n    payments,\n    pagination,\n    isLoading,\n    error,\n    fetchPaymentHistory,\n    refreshHistory,\n    clearError: () => setError(null)\n  };\n}\n\n/**\n * 支付状态轮询Hook\n */\nexport function usePaymentPolling(paymentNo: string, onStatusChange?: (status: PaymentStatus) => void) {\n  const [status, setStatus] = useState<PaymentStatus | null>(null);\n  const [isPolling, setIsPolling] = useState(false);\n  const { getPaymentStatus } = usePayment();\n\n  const startPolling = useCallback(() => {\n    if (isPolling || !paymentNo) return;\n\n    setIsPolling(true);\n\n    const pollInterval = setInterval(async () => {\n      const currentStatus = await getPaymentStatus(paymentNo);\n      \n      if (currentStatus) {\n        setStatus(currentStatus);\n        onStatusChange?.(currentStatus);\n\n        // 如果状态是终态，停止轮询\n        if (['success', 'failed', 'cancelled', 'refunded'].includes(currentStatus.status)) {\n          clearInterval(pollInterval);\n          setIsPolling(false);\n        }\n      }\n    }, 2000); // 每2秒查询一次\n\n    // 10分钟后停止轮询\n    setTimeout(() => {\n      clearInterval(pollInterval);\n      setIsPolling(false);\n    }, 10 * 60 * 1000);\n\n    return () => {\n      clearInterval(pollInterval);\n      setIsPolling(false);\n    };\n  }, [paymentNo, isPolling, getPaymentStatus, onStatusChange]);\n\n  const stopPolling = useCallback(() => {\n    setIsPolling(false);\n  }, []);\n\n  return {\n    status,\n    isPolling,\n    startPolling,\n    stopPolling\n  };\n}"],"names":[],"mappings":"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","debugId":null}}]
}