{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/lib/config.ts"],"sourcesContent":["/**\n * 统一的服务配置管理\n * 所有域名和端口配置的单一入口\n */\n\n// 前端服务配置\nconst FRONTEND_DOMAIN = process.env.NEXT_PUBLIC_FRONTEND_DOMAIN || 'localhost'\nconst FRONTEND_PORT = process.env.NEXT_PUBLIC_FRONTEND_PORT || '80'\nconst FRONTEND_PROTOCOL = process.env.NEXT_PUBLIC_FRONTEND_PROTOCOL || 'http'\n\n// 后端服务配置\nconst BACKEND_DOMAIN = process.env.NEXT_PUBLIC_BACKEND_DOMAIN || 'localhost'\nconst BACKEND_PORT = process.env.NEXT_PUBLIC_BACKEND_PORT || '1337'\nconst BACKEND_PROTOCOL = process.env.NEXT_PUBLIC_BACKEND_PROTOCOL || 'http'\n\n// 搜索服务配置（前端调用后端API，不直接访问MeiliSearch）\nconst SEARCH_DOMAIN = process.env.NEXT_PUBLIC_SEARCH_DOMAIN || 'localhost'\nconst SEARCH_PORT = process.env.NEXT_PUBLIC_SEARCH_PORT || '7700'\nconst SEARCH_PROTOCOL = process.env.NEXT_PUBLIC_SEARCH_PROTOCOL || 'http'\n\n/**\n * 构建完整的服务URL\n */\nfunction buildUrl(domain: string, port: string, protocol: string, path: string = ''): string {\n    const portSuffix = (\n        (protocol === 'http' && port === '80') || \n        (protocol === 'https' && port === '443')\n    ) ? '' : `:${port}`\n    \n    const baseUrl = `${protocol}://${domain}${portSuffix}`\n    return path ? `${baseUrl}${path.startsWith('/') ? path : `/${path}`}` : baseUrl\n}\n\n/**\n * 服务URL配置\n */\nexport const config = {\n    // 前端服务\n    frontend: {\n        domain: FRONTEND_DOMAIN,\n        port: FRONTEND_PORT, \n        protocol: FRONTEND_PROTOCOL,\n        url: buildUrl(FRONTEND_DOMAIN, FRONTEND_PORT, FRONTEND_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(FRONTEND_DOMAIN, FRONTEND_PORT, FRONTEND_PROTOCOL, path)\n    },\n    \n    // 后端服务\n    backend: {\n        domain: BACKEND_DOMAIN,\n        port: BACKEND_PORT,\n        protocol: BACKEND_PROTOCOL, \n        url: buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL, path),\n        apiUrl: buildUrl(BACKEND_DOMAIN, BACKEND_PORT, BACKEND_PROTOCOL, '/api')\n    },\n    \n    // 搜索服务（注意：前端不直接访问，通过后端代理）\n    search: {\n        domain: SEARCH_DOMAIN,\n        port: SEARCH_PORT,\n        protocol: SEARCH_PROTOCOL,\n        url: buildUrl(SEARCH_DOMAIN, SEARCH_PORT, SEARCH_PROTOCOL),\n        getUrl: (path: string = '') => buildUrl(SEARCH_DOMAIN, SEARCH_PORT, SEARCH_PROTOCOL, path)\n    }\n}\n\n/**\n * 向后兼容的环境变量（逐步迁移）\n * @deprecated 请使用 config 对象替代\n */\nexport const legacyConfig = {\n    STRAPI_URL: config.backend.url,\n    STRAPI_API_URL: config.backend.apiUrl,\n    SITE_URL: config.frontend.url,\n    MEILISEARCH_URL: config.search.url\n}\n\n/**\n * NextAuth配置\n */\nexport const authConfig = {\n    NEXTAUTH_URL: config.frontend.url,\n    callbacks: {\n        github: config.frontend.getUrl('/api/auth/callback/github'),\n        google: config.frontend.getUrl('/api/auth/callback/google'),\n        wechat: config.frontend.getUrl('/api/auth/callback/wechat'),\n        qq: config.frontend.getUrl('/api/auth/callback/qq')\n    }\n}\n\nexport default config"],"names":[],"mappings":"AAAA;;;CAGC,GAED,SAAS;;;;;;;AACT,MAAM,kBAAkB,iDAA2C;AACnE,MAAM,gBAAgB,0CAAyC;AAC/D,MAAM,oBAAoB,4CAA6C;AAEvE,SAAS;AACT,MAAM,iBAAiB,iDAA0C;AACjE,MAAM,eAAe,4CAAwC;AAC7D,MAAM,mBAAmB,4CAA4C;AAErE,qCAAqC;AACrC,MAAM,gBAAgB,iDAAyC;AAC/D,MAAM,cAAc,4CAAuC;AAC3D,MAAM,kBAAkB,4CAA2C;AAEnE;;CAEC,GACD,SAAS,SAAS,MAAc,EAAE,IAAY,EAAE,QAAgB,EAAE,OAAe,EAAE;IAC/E,MAAM,aAAa,AACf,AAAC,aAAa,UAAU,SAAS,QAChC,aAAa,WAAW,SAAS,QAClC,KAAK,CAAC,CAAC,EAAE,MAAM;IAEnB,MAAM,UAAU,GAAG,SAAS,GAAG,EAAE,SAAS,YAAY;IACtD,OAAO,OAAO,GAAG,UAAU,KAAK,UAAU,CAAC,OAAO,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG;AAC5E;AAKO,MAAM,SAAS;IAClB,OAAO;IACP,UAAU;QACN,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,iBAAiB,eAAe;QAC9C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,iBAAiB,eAAe,mBAAmB;IAC/F;IAEA,OAAO;IACP,SAAS;QACL,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,gBAAgB,cAAc;QAC5C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,gBAAgB,cAAc,kBAAkB;QACxF,QAAQ,SAAS,gBAAgB,cAAc,kBAAkB;IACrE;IAEA,0BAA0B;IAC1B,QAAQ;QACJ,QAAQ;QACR,MAAM;QACN,UAAU;QACV,KAAK,SAAS,eAAe,aAAa;QAC1C,QAAQ,CAAC,OAAe,EAAE,GAAK,SAAS,eAAe,aAAa,iBAAiB;IACzF;AACJ;AAMO,MAAM,eAAe;IACxB,YAAY,OAAO,OAAO,CAAC,GAAG;IAC9B,gBAAgB,OAAO,OAAO,CAAC,MAAM;IACrC,UAAU,OAAO,QAAQ,CAAC,GAAG;IAC7B,iBAAiB,OAAO,MAAM,CAAC,GAAG;AACtC;AAKO,MAAM,aAAa;IACtB,cAAc,OAAO,QAAQ,CAAC,GAAG;IACjC,WAAW;QACP,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;QAC/B,IAAI,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC/B;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/wwx/dev/WebProjects/aibianx/frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["/**\n * NextAuth.js 完整配置 - 支持三种认证方式\n * 根据架构文档实现：邮箱密码 + GitHub + Google OAuth\n */\n\nimport NextAuth from 'next-auth'\nimport type { NextAuthOptions } from 'next-auth'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport GitHubProvider from 'next-auth/providers/github'\nimport GoogleProvider from 'next-auth/providers/google'\nimport { config } from '@/lib/config'\n\n// OAuth用户查找或创建函数\nasync function findOrCreateOAuthUser(profile: any, account: any, strapiUrl: string) {\n  const provider = account.provider\n  let user = null\n  let isNewUser = false\n  \n  // 1. 先通过邮箱查找现有用户\n  if (profile.email) {\n    const response = await fetch(`${strapiUrl}/api/users?filters[email][$eq]=${profile.email}`)\n    if (response.ok) {\n      const data = await response.json()\n      if (data.length > 0) {\n        user = data[0]\n      }\n    }\n  }\n  \n  // 2. 如果用户不存在，创建新用户\n  if (!user) {\n    const userData = mapOAuthProfile(profile, account)\n    const createResponse = await fetch(`${strapiUrl}/api/auth/local/register`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData)\n    })\n    \n    if (createResponse.ok) {\n      const result = await createResponse.json()\n      user = result.user\n      isNewUser = true\n    }\n  } else {\n    // 3. 更新OAuth信息\n    const updateData: any = {}\n    if (provider === 'github' && !user.githubId) {\n      updateData.githubId = profile.id.toString()\n      updateData.githubUsername = profile.login\n    } else if (provider === 'google' && !user.googleId) {\n      updateData.googleId = profile.sub\n    }\n    \n    const connectedProviders = user.connectedProviders || []\n    if (!connectedProviders.includes(provider)) {\n      connectedProviders.push(provider)\n      updateData.connectedProviders = connectedProviders\n    }\n    \n    if (Object.keys(updateData).length > 0) {\n      await fetch(`${strapiUrl}/api/users/${user.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updateData)\n      })\n    }\n  }\n  \n  return { user, isNewUser, jwt: 'temp-jwt' }\n}\n\n// OAuth档案信息映射\nfunction mapOAuthProfile(profile: any, account: any) {\n  const provider = account.provider\n  \n  switch (provider) {\n    case 'github':\n      return {\n        username: profile.login,\n        email: profile.email,\n        nickname: profile.name,\n        provider: 'github',\n        providerAccountId: profile.id.toString(),\n        githubId: profile.id.toString(),\n        githubUsername: profile.login,\n        hasPassword: false,\n        isEmailVerified: true,\n        connectedProviders: ['github']\n      }\n    case 'google':\n      return {\n        username: profile.email.split('@')[0],\n        email: profile.email,\n        nickname: profile.name,\n        provider: 'google',\n        providerAccountId: profile.sub,\n        googleId: profile.sub,\n        hasPassword: false,\n        isEmailVerified: profile.email_verified,\n        connectedProviders: ['google']\n      }\n    default:\n      throw new Error(`Unsupported OAuth provider: ${provider}`)\n  }\n}\n\nconst authOptions: NextAuthOptions = {\n  providers: [\n    // 邮箱密码登录\n    CredentialsProvider({\n      id: 'credentials',\n      name: 'credentials',\n      credentials: {\n        email: { label: \"邮箱\", type: \"email\" },\n        password: { label: \"密码\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        try {\n          const strapiUrl = config.backend.url\n\n          // 调用Strapi登录API\n          const response = await fetch(`${strapiUrl}/api/auth/local`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              identifier: credentials.email,\n              password: credentials.password,\n            }),\n          })\n\n          if (response.ok) {\n            const data = await response.json()\n            return {\n              id: data.user.id,\n              email: data.user.email,\n              name: data.user.username || data.user.nickname || data.user.email,\n              strapiUser: data.user,\n              strapiToken: data.jwt\n            }\n          }\n\n          return null\n        } catch (error) {\n          console.error('❌ 登录验证失败:', error)\n          return null\n        }\n      }\n    }),\n\n    // GitHub OAuth登录\n    GitHubProvider({\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    }),\n\n    // Google OAuth登录\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    })\n  ],\n\n  // 使用JWT策略\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30天\n  },\n\n  // JWT配置\n  jwt: {\n    maxAge: 30 * 24 * 60 * 60, // 30天\n  },\n\n  // 页面配置\n  pages: {\n    signIn: '/', // 登录页面（将打开登录弹窗）\n    error: '/auth/error', // 错误页面\n  },\n\n  // 回调函数\n  callbacks: {\n    async signIn({ user, account, profile }) {\n      console.log('✅ 用户登录尝试:', user.email, '通过', account?.provider)\n      \n      try {\n        const strapiUrl = config.backend.url\n        \n        // OAuth登录处理（GitHub、Google）\n        if (account?.provider === 'github' || account?.provider === 'google') {\n          const existingUser = await findOrCreateOAuthUser(profile, account, strapiUrl)\n          user.strapiUser = existingUser.user\n          user.strapiToken = existingUser.jwt\n          user.isNewUser = existingUser.isNewUser\n          return true\n        }\n        \n        return true\n      } catch (error) {\n        console.error('❌ 登录处理失败:', error)\n        return true\n      }\n    },\n\n    async jwt({ token, user, account }) {\n      // 首次登录时，将用户信息存储到JWT\n      if (user) {\n        token.strapiUser = user.strapiUser\n        token.strapiToken = user.strapiToken\n        token.provider = account?.provider || 'credentials'\n        token.isNewUser = user.isNewUser || false\n      }\n\n      return token\n    },\n\n    async session({ session, token }) {\n      // 将JWT中的Strapi数据传递给session\n      session.strapiUser = token.strapiUser as any\n      session.strapiToken = token.strapiToken as string\n      session.provider = token.provider as string\n      session.isNewUser = token.isNewUser as boolean\n\n      return session\n    },\n  },\n\n  // 事件回调\n  events: {\n    async signIn({ user, account, isNewUser }) {\n      console.log(`用户登录: ${user.email} 通过 ${account?.provider}`)\n      \n      // 如果是新用户，自动订阅功能（BillionMail已移除）\n      if (isNewUser) {\n        try {\n          console.log(`新用户自动订阅功能: ${user.email} (BillionMail已移除)`)\n          // 这里会在邮件集成任务中实现具体逻辑\n        } catch (error) {\n          console.error('❌ 自动订阅功能失败:', error)\n        }\n      }\n    },\n    \n    async signOut({ session }) {\n      console.log(`用户登出: ${session?.user?.email}`)\n    },\n  },\n\n  // 调试模式\n  debug: process.env.NODE_ENV === 'development',\n  \n  // 信任的主机（用于OAuth回调）\n  trustHost: true,\n}\n\n// 创建NextAuth handler\nconst handler = NextAuth(authOptions)\n\n// 导出GET和POST处理器\nexport { handler as GET, handler as POST }"],"names":[],"mappings":"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","debugId":null}}]
}