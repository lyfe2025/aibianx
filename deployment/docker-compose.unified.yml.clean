name: aibianx-integrated

services:
  # ===== 共享数据库 =====
  postgres:
    image: postgres:17-alpine
    container_name: aibianx-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/database:/var/lib/postgresql/data
      - postgres_socket:/var/run/postgresql
      - ./configs/postgresql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - integrated-network

  # ===== 缓存服务 =====
  redis:
    image: redis:7.4-alpine
    container_name: aibianx-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - integrated-network

  # ===== 搜索引擎 =====
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: aibianx-meilisearch
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      MEILI_ENV: production
    volumes:
      - ./data/meilisearch:/meili_data
    ports:
      - "${MEILISEARCH_PORT:-7700}:7700"
    networks:
      - integrated-network

  # ===== 应用后端 =====
  backend:
    build:
      context: ../backend
      dockerfile: ../deployment/backend.Dockerfile
    container_name: aibianx-backend
    restart: unless-stopped
    env_file:
      - ../backend/.env
    volumes:
      - ../backend/public/uploads:/app/public/uploads
      - strapi_cache:/app/.cache
    ports:
      - "${BACKEND_PORT:-1337}:1337"
    depends_on:
      - postgres
      - redis
      - meilisearch
    networks:
      - integrated-network

  # ===== 应用前端 =====
  frontend:
    build:
      context: ../frontend
      dockerfile: ../deployment/frontend.Dockerfile
      args:
        NEXT_PUBLIC_FRONTEND_DOMAIN: ${DOMAIN}
        NEXT_PUBLIC_FRONTEND_PORT: ${FRONTEND_PORT:-80}
        NEXT_PUBLIC_FRONTEND_PROTOCOL: https
        NEXT_PUBLIC_BACKEND_DOMAIN: ${DOMAIN}
        NEXT_PUBLIC_BACKEND_PORT: ${BACKEND_PORT:-1337}
        NEXT_PUBLIC_BACKEND_PROTOCOL: https
        NEXT_PUBLIC_SEARCH_DOMAIN: ${DOMAIN}
        NEXT_PUBLIC_SEARCH_PORT: ${MEILISEARCH_PORT:-7700}
        NEXT_PUBLIC_SEARCH_PROTOCOL: https
        NEXT_PUBLIC_SITE_URL: https://${DOMAIN}
        NEXTAUTH_URL: https://${DOMAIN}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    container_name: aibianx-frontend
    restart: unless-stopped
    env_file:
      - ../frontend/.env.local
    environment:
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"  # 内部开发端口，固定不变
    depends_on:
      - backend
    networks:
      - integrated-network

  # ===== 邮件系统已改为独立部署 =====
  # 注意: BillionMail邮件系统已改为独立部署 (./BillionMail/ 目录)
  # 这样可以避免端口冲突和重复部署问题
  # 
  # 独立BillionMail的访问地址:
  #   管理界面: http://localhost:8080/billion
  #   WebMail: http://localhost:8080/roundcube
  # 
  # 启动独立BillionMail: cd BillionMail && docker-compose up -d
  # 停止独立BillionMail: cd BillionMail && docker-compose down
  #
  # 如需重新启用统一邮件服务，请先停止独立BillionMail:
  #   cd BillionMail && docker-compose down
  # 然后取消下面服务的注释并重新部署

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local
  strapi_cache:
    driver: local
  postgres_socket:
    driver: local

# 网络
networks:
  integrated-network:
    driver: bridge
    name: aibianx-network